<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[4waisenkinder]]></title>
  <link href="http://4waisenkinder.github.io/atom.xml" rel="self"/>
  <link href="http://4waisenkinder.github.io/"/>
  <updated>2015-01-03T15:16:38+01:00</updated>
  <id>http://4waisenkinder.github.io/</id>
  <author>
    <name><![CDATA[Stefan Judis, Patrick Venetz, AndrÃ© Kussmann, Bernhard Weisshuhn]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[How to react to changing environments using matchMedia]]></title>
    <link href="http://4waisenkinder.github.io/blog/2014/12/26/handle-environment-changes-via-window-dot-matchmedia/"/>
    <updated>2014-12-26T23:03:00+01:00</updated>
    <id>http://4waisenkinder.github.io/blog/2014/12/26/handle-environment-changes-via-window-dot-matchmedia</id>
    <content type="html"><![CDATA[<p>I was at my parents place over Christmas. Besides eating the whole day and playing board games I tried to read two books I brought with me.</p>

<p>One of the books was <a href="http://www.abookapart.com/products/responsible-responsive-design">RESPONSIBLE RESPONSIVE DESIGN</a> by <a href="https://twitter.com/scottjehl">Scott Jehl</a>. It was released recently and it is a really good read. I did not finish it yet, but I enjoy it pretty much and it is for sure in the TOP5 list of my favourite books about responsive web design.</p>

<!-- more -->


<p>In the world of responsive web design we deal with media queries all the time to give our visitors the best experience possible depending on the their devices and environments. Usually this means that web developers deal with screen dimensions inside of media queries and this is becoming crazier and more useful every day.</p>

<p>If you are interested in what may come in the future the spec for <a href="http://dev.w3.org/csswg/mediaqueries4">Media Queries Level 4</a> is quite interesting &ndash; check out the spec for <a href="http://dev.w3.org/csswg/mediaqueries4/#light-level">light-level</a>. ;)</p>

<p>Media queries are mostly used inside of the CSS files to adapt the styling to the particular device the visitor is using. And this makes total sense, but responsive web design should not be only about &ldquo;making it look pretty&rdquo;.</p>

<h4>It should also be about using and initializing only needed things.</h4>

<p>At my last job I was working with <a href="http://foundation.zurb.com/">Foundation</a> a lot. And I really loved it. The <a href="http://foundation.zurb.com/docs/components/block_grid.html">block grid</a> is awesome! And also the <a href="http://foundation.zurb.com/docs/components/offcanvas.html">Off-canvas implementation</a> is quite nice in my opinion.</p>

<p>The only thing that always bothered me about the implementations in famous frameworks like <a href="http://getbootstrap.com/">Bootstrap</a> and <a href="http://foundation.zurb.com/">Foundation</a> is that the scripts and modules used for smaller devices are also executed on larger devices and vice versa.</p>

<p>No matter if the modules and their functionality are needed or not. The given code is executed and all event handlers are still bound. These event handlers will not be triggered in a lot of cases, because the given DOM elements connected to the functionality are hidden via CSS in several environment combinations.</p>

<p>When having a look at the navigation solutions for smaller devices in both projects you will see, that the JavaScript modules to guarantee a good experience on smaller devices are initialized and event handlers are bound for no reason &ndash; no matter if they are needed or not. For me this is a simple waste of CPU and not needed at all.</p>

<p><img class="center" src="http://4waisenkinder.github.io/images/blog/stefanjudis/mobileNavigationOnDesktop.jpg" width="600" height="324" title="Mobile event handlers still bound on larger devices" alt="Mobile event handlers still bound on larger devices"></p>

<p>There are a lot of discussions on the subject what to serve to our customers held talking about feature detection and custom builds, but not every project has enough time and resources to implement complicated build systems.</p>

<p>Nevertheless the fact that modules are initialized for &ldquo;nothing&rdquo; is something I really do not like. And this is why I started to initialize given modules only when needed. A custom build of <a href="http://modernizr.com/">Modernizr</a> is usually included in my projects so that the handy <code>Modernizr.mq</code> function is mostly used to not initialize things that are not needed at all.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="c1">// only initialize the off-canvas </span>
</span><span class='line'><span class="c1">// navigation for smaller devices</span>
</span><span class='line'><span class="k">if</span> <span class="p">(</span> <span class="nx">Modernizr</span><span class="p">.</span><span class="nx">mq</span><span class="p">(</span> <span class="s1">&#39;(max-width: 50em)&#39;</span> <span class="p">)</span> <span class="p">)</span> <span class="p">{</span>
</span><span class='line'>  <span class="c1">// initialize Foundation&#39;s offcanvas</span>
</span><span class='line'>  <span class="nx">$document</span><span class="p">.</span><span class="nx">foundation</span><span class="p">(</span> <span class="s1">&#39;offcanvas&#39;</span> <span class="p">);</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<h3><code>Modernizr.mq</code> &ndash; how does it work?</h3>

<p>But let us have a look at how this function works. The functionality is defined in <a href="https://github.com/Modernizr/Modernizr/blob/master/src/mq.js">mq.js</a> and <a href="https://github.com/Modernizr/Modernizr/blob/master/src/testMediaQuery.js">testMediaQuery.js</a>.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="c1">// -&gt; testMediaQuery.js</span>
</span><span class='line'><span class="nx">define</span><span class="p">([</span><span class="s1">&#39;injectElementWithStyles&#39;</span><span class="p">],</span> <span class="kd">function</span><span class="p">(</span> <span class="nx">injectElementWithStyles</span> <span class="p">)</span> <span class="p">{</span>
</span><span class='line'>  <span class="c1">// adapted from matchMedia polyfill</span>
</span><span class='line'>  <span class="c1">// by Scott Jehl and Paul Irish</span>
</span><span class='line'>  <span class="c1">// gist.github.com/786768</span>
</span><span class='line'>  <span class="kd">var</span> <span class="nx">testMediaQuery</span> <span class="o">=</span> <span class="p">(</span><span class="kd">function</span> <span class="p">()</span> <span class="p">{</span>
</span><span class='line'>    <span class="kd">var</span> <span class="nx">matchMedia</span> <span class="o">=</span> <span class="nb">window</span><span class="p">.</span><span class="nx">matchMedia</span> <span class="o">||</span> <span class="nb">window</span><span class="p">.</span><span class="nx">msMatchMedia</span><span class="p">;</span>
</span><span class='line'>    <span class="k">if</span> <span class="p">(</span> <span class="nx">matchMedia</span> <span class="p">)</span> <span class="p">{</span>
</span><span class='line'>      <span class="k">return</span> <span class="kd">function</span> <span class="p">(</span> <span class="nx">mq</span> <span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="kd">var</span> <span class="nx">mql</span> <span class="o">=</span> <span class="nx">matchMedia</span><span class="p">(</span><span class="nx">mq</span><span class="p">);</span>
</span><span class='line'>        <span class="k">return</span> <span class="nx">mql</span> <span class="o">&amp;&amp;</span> <span class="nx">mql</span><span class="p">.</span><span class="nx">matches</span> <span class="o">||</span> <span class="kc">false</span><span class="p">;</span>
</span><span class='line'>      <span class="p">};</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">return</span> <span class="kd">function</span> <span class="p">(</span> <span class="nx">mq</span> <span class="p">)</span> <span class="p">{</span>
</span><span class='line'>      <span class="kd">var</span> <span class="nx">bool</span> <span class="o">=</span> <span class="kc">false</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>      <span class="nx">injectElementWithStyles</span><span class="p">(</span><span class="s1">&#39;@media &#39;</span> <span class="o">+</span> <span class="nx">mq</span> <span class="o">+</span> <span class="s1">&#39; { #modernizr { position: absolute; } }&#39;</span><span class="p">,</span> <span class="kd">function</span><span class="p">(</span> <span class="nx">node</span> <span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="nx">bool</span> <span class="o">=</span> <span class="p">(</span><span class="nb">window</span><span class="p">.</span><span class="nx">getComputedStyle</span> <span class="o">?</span>
</span><span class='line'>                <span class="nb">window</span><span class="p">.</span><span class="nx">getComputedStyle</span><span class="p">(</span><span class="nx">node</span><span class="p">,</span> <span class="kc">null</span><span class="p">)</span> <span class="o">:</span>
</span><span class='line'>                <span class="nx">node</span><span class="p">.</span><span class="nx">currentStyle</span><span class="p">)[</span><span class="s1">&#39;position&#39;</span><span class="p">]</span> <span class="o">==</span> <span class="s1">&#39;absolute&#39;</span><span class="p">;</span>
</span><span class='line'>      <span class="p">});</span>
</span><span class='line'>
</span><span class='line'>      <span class="k">return</span> <span class="nx">bool</span><span class="p">;</span>
</span><span class='line'>    <span class="p">};</span>
</span><span class='line'>  <span class="p">})();</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">return</span> <span class="nx">testMediaQuery</span><span class="p">;</span>
</span><span class='line'><span class="p">});</span>
</span></code></pre></td></tr></table></div></figure>


<p>As we see internally Modernizr uses the <code>matchMedia</code> function ( when available ), which is defined in the spec for the <a href="http://dev.w3.org/csswg/cssom-view">CSSOM View Module</a>. If <code>matchMedia</code> is not supported it provides a shim to achieve the same functionality.</p>

<h3><code>window.matchMedia</code> &ndash; so what?</h3>

<p><code>matchMedia</code> provides the functionality to check media queries on the JavaScript side. And the great thing about it is, that it is actual quite good supported according to <a href="http://caniuse.com/#feat=matchmedia">caniuse.com</a>.</p>

<p><code>Modernizr.mq</code> already gives us support to get the information whether the given media query is matching or not. One key thing to watch out here is, that <code>matchMedia</code> does not return a boolean value to work with. Instead it returns a <a href="http://dev.w3.org/csswg/cssom-view/#the-mediaquerylist-interface">MediaQueryList Interface</a>.</p>

<p>The information holding the information if the media query matches is stored inside of the property <code>matches</code>.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="p">(</span> <span class="kd">function</span><span class="p">(</span> <span class="nb">window</span><span class="p">,</span> <span class="nb">document</span> <span class="p">)</span> <span class="p">{</span>
</span><span class='line'>  <span class="c1">// get MediaQueryList Interface</span>
</span><span class='line'>  <span class="kd">var</span> <span class="nx">mql</span> <span class="o">=</span> <span class="nb">window</span><span class="p">.</span><span class="nx">matchMedia</span><span class="p">(</span> <span class="s1">&#39;(min-width:20em)&#39;</span> <span class="p">);</span>
</span><span class='line'>  <span class="c1">// get a container to do something with it depending </span>
</span><span class='line'>  <span class="c1">// on matching media query</span>
</span><span class='line'>  <span class="kd">var</span> <span class="nx">container</span> <span class="o">=</span> <span class="nb">document</span><span class="p">.</span><span class="nx">getElementById</span><span class="p">(</span> <span class="s1">&#39;container&#39;</span> <span class="p">);</span>
</span><span class='line'>  <span class="c1">// create new paragraph object</span>
</span><span class='line'>  <span class="kd">var</span> <span class="nx">paragraph</span> <span class="o">=</span> <span class="nb">document</span><span class="p">.</span><span class="nx">createElement</span><span class="p">(</span> <span class="s1">&#39;p&#39;</span> <span class="p">);</span>
</span><span class='line'>
</span><span class='line'>  <span class="c1">// set innerHTML depending on matching media query</span>
</span><span class='line'>  <span class="nx">paragraph</span><span class="p">.</span><span class="nx">innerHTML</span> <span class="o">=</span> <span class="nx">mql</span><span class="p">.</span><span class="nx">matches</span> <span class="o">?</span>
</span><span class='line'>    <span class="s1">&#39;Yeah - matching!&#39;</span> <span class="o">:</span>
</span><span class='line'>    <span class="s1">&#39;No - not matching!&#39;</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>  <span class="c1">// append element to container</span>
</span><span class='line'>  <span class="nx">container</span><span class="p">.</span><span class="nx">appendChild</span><span class="p">(</span> <span class="nx">paragraph</span> <span class="p">);</span>
</span><span class='line'><span class="p">}</span> <span class="p">)(</span> <span class="nb">window</span><span class="p">,</span> <span class="nb">document</span> <span class="p">);</span>
</span></code></pre></td></tr></table></div></figure>


<p>This is already great &ndash; because this way we can easily evaluate if a particular JavaScript module needs to be initialized or not. But what about the case of changing environments like a  changed viewport from portrait to landscape mode? This is something I am struggling with for a while already &ndash; and while reading Scott Jehl&rsquo;s book I just came across a super neat solution.</p>

<p>I already read a lot of articles about <code>matchMedia</code>, but I did not know before that it provides more than just the matches property.</p>

<p>The returned <code>MediaQueryList Interface</code> also provides the ability to attach listeners to the moment whenever the media query changes from matching to not matching or the other way around.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="p">(</span> <span class="kd">function</span><span class="p">(</span> <span class="nb">window</span><span class="p">,</span> <span class="nb">document</span> <span class="p">)</span> <span class="p">{</span>
</span><span class='line'>  <span class="c1">// get MediaQueryList Interface</span>
</span><span class='line'>  <span class="kd">var</span> <span class="nx">mql</span> <span class="o">=</span> <span class="nb">window</span><span class="p">.</span><span class="nx">matchMedia</span><span class="p">(</span> <span class="s1">&#39;(min-width:20em)&#39;</span> <span class="p">);</span>
</span><span class='line'>  <span class="c1">// get a container to do something with it depending </span>
</span><span class='line'>  <span class="c1">// on matching media query</span>
</span><span class='line'>  <span class="kd">var</span> <span class="nx">container</span> <span class="o">=</span> <span class="nb">document</span><span class="p">.</span><span class="nx">getElementById</span><span class="p">(</span> <span class="s1">&#39;container&#39;</span> <span class="p">);</span>
</span><span class='line'>  <span class="c1">// create new paragraph element</span>
</span><span class='line'>  <span class="kd">var</span> <span class="nx">paragraph</span> <span class="o">=</span> <span class="nb">document</span><span class="p">.</span><span class="nx">createElement</span><span class="p">(</span> <span class="s1">&#39;p&#39;</span> <span class="p">);</span>
</span><span class='line'>
</span><span class='line'>  <span class="c1">// set innerHTML depending on matching media query</span>
</span><span class='line'>  <span class="nx">paragraph</span><span class="p">.</span><span class="nx">innerHTML</span> <span class="o">=</span> <span class="nx">mql</span><span class="p">.</span><span class="nx">matches</span> <span class="o">?</span>
</span><span class='line'>    <span class="s1">&#39;Yeah - matching!&#39;</span> <span class="o">:</span>
</span><span class='line'>    <span class="s1">&#39;No - not matching!&#39;</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>  <span class="c1">// append element to container</span>
</span><span class='line'>  <span class="nx">container</span><span class="p">.</span><span class="nx">appendChild</span><span class="p">(</span> <span class="nx">paragraph</span> <span class="p">);</span>
</span><span class='line'>
</span><span class='line'>  <span class="c1">// attach event listener to changed state</span>
</span><span class='line'>  <span class="c1">// of the given media query</span>
</span><span class='line'>  <span class="nx">mql</span><span class="p">.</span><span class="nx">addListener</span><span class="p">(</span> <span class="kd">function</span><span class="p">(</span> <span class="nx">mql</span> <span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="c1">// create new paragraph element</span>
</span><span class='line'>    <span class="kd">var</span> <span class="nx">paragraph</span> <span class="o">=</span> <span class="nb">document</span><span class="p">.</span><span class="nx">createElement</span><span class="p">(</span> <span class="s1">&#39;p&#39;</span> <span class="p">);</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1">// set innerHTHML depending on matching media query</span>
</span><span class='line'>    <span class="nx">paragraph</span><span class="p">.</span><span class="nx">innerHTML</span> <span class="o">=</span> <span class="nx">mql</span><span class="p">.</span><span class="nx">matches</span> <span class="o">?</span>
</span><span class='line'>      <span class="s1">&#39;Yeah - changed to matching!&#39;</span> <span class="o">:</span>
</span><span class='line'>      <span class="s1">&#39;No - changed to not matching!&#39;</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1">// append element to container</span>
</span><span class='line'>    <span class="nx">container</span><span class="p">.</span><span class="nx">appendChild</span><span class="p">(</span> <span class="nx">paragraph</span> <span class="p">);</span>
</span><span class='line'>  <span class="p">}</span> <span class="p">);</span>
</span><span class='line'><span class="p">}</span> <span class="p">)(</span> <span class="nb">window</span><span class="p">,</span> <span class="nb">document</span> <span class="p">);</span>
</span></code></pre></td></tr></table></div></figure>


<p>This is exactly what I was looking for a while, because it gives an easy way to enhance an interface on changing environments on the fly and save resources at the beginning.</p>

<p>If you want to play around with it I created a <a href="http://codepen.io/stefanjudis/pen/qEaxKR">pen</a> for you to play around with.</p>

<p>And this is it for today &ndash; I hope you enjoyed the short read. Any ideas and comments on this are more than welcome. :)</p>
<div class='octopress-authorbox'>
	<div class="author-pic">
		<img src="http://www.gravatar.com/avatar/22725c2d3eb331146549bf0d5d3c050c" alt="Stefan Judis" />
	</div>
	
	<div class="author-about">
		<h3>Stefan Judis</h3>
		<p>Frontend lover</p>
		<ul class="author-links">
			
			<li>
			<a href="http://twitter.com/stefanjudis">@stefanjudis</a>
			</li>
			
			
		</ul>
	</div>
</div>]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[NPM 2.0 and how it helps avoiding global dependencies]]></title>
    <link href="http://4waisenkinder.github.io/blog/2014/10/18/npm-2-dot-0-and-the-much-better-star-npm-run-star-command/"/>
    <updated>2014-10-18T20:50:00+02:00</updated>
    <id>http://4waisenkinder.github.io/blog/2014/10/18/npm-2-dot-0-and-the-much-better-star-npm-run-star-command</id>
    <content type="html"><![CDATA[<p>Today I was listening to the NodeUp <a href="http://nodeup.com/seventy">episode 70</a>, which is all about the <a href="https://www.npmjs.org/package/npm">npm command line client</a>. And there is tons of useful information in this episode. It is all about where npm is at the moment and what the plans are for the future. Especially the recent changes inside of the command line client are a heavy discussed topic and I highly recommend to listen to this episode, when you are dealing with <a href="https://www.npmjs.org/">npm</a> on a daily basis.</p>

<p>One thing that is mentioned and really gets me excited is the change regarding the functionality to run scripts via npm which was introduced in the latest major version of npm &ndash; <a href="http://blog.npmjs.org/post/98131109725/npm-2-0-0">npm@2.0.0</a>.<!-- more --></p>

<p>So let us reassess how to run scripts via npm, have a look at what has changed in version 2.0.0 and check why this is such a big deal.</p>

<h3>Running scripts via npm</h3>

<p>The configuration file for any project based on node and npm is the <code>package.json</code>. This file includes meta information like name, version and author of the depending project, but also defines all dependencies, which need to be installed via calling <code>npm install</code>. If you are not familiar with this file, there is an excellent <a href="http://browsenpm.org/package.json">interactive cheat sheet</a> out there and you may want to check it out.</p>

<p>One thing to notice is that you can also run scripts and execute commands via npm. To do so you can define an optional object as the <code>scripts</code> property inside of the <code>package.json</code> and define your wished commands. <a href="https://twitter.com/substack">@substack</a> wrote a <a href="http://substack.net/task_automation_with_npm_run">great article</a> about how to use this functionality extensively.</p>

<p>There is not much magic about this.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='json'><span class='line'><span class="p">{</span>
</span><span class='line'>  <span class="nt">&quot;name&quot;</span><span class="p">:</span> <span class="s2">&quot;blog-npm-run-scripts&quot;</span><span class="p">,</span>
</span><span class='line'>  <span class="nt">&quot;version&quot;</span><span class="p">:</span> <span class="s2">&quot;1.0.0&quot;</span><span class="p">,</span>
</span><span class='line'>  <span class="nt">&quot;description&quot;</span><span class="p">:</span> <span class="s2">&quot;Show of the new npm run command&quot;</span><span class="p">,</span>
</span><span class='line'>  <span class="nt">&quot;scripts&quot;</span><span class="p">:</span> <span class="p">{</span>
</span><span class='line'>    <span class="nt">&quot;echo&quot;</span> <span class="p">:</span> <span class="s2">&quot;echo \&quot;Hello world\&quot;&quot;</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>And then you can use <code>npm run</code> to kick it off &ndash; pretty straight forward.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>&gt; npm run <span class="nb">echo</span>
</span><span class='line'>
</span><span class='line'>&gt; blog-npm-run-scripts@1.0.0 <span class="nb">echo</span> /Users/stefan/Sites/blog-npm-run-scripts
</span><span class='line'>&gt; <span class="nb">echo</span> <span class="s2">&quot;Hello world&quot;</span>
</span><span class='line'>
</span><span class='line'>Hello world
</span></code></pre></td></tr></table></div></figure>


<p>This functionality had one downside so far. It was not able to pass arguments to the <code>npm run</code> command. And that is why you had to hardcode the arguments, which made the whole thing less flexible and harder to use. The only solution for having similar commands with different arguments was to define specific named scripts inside of the <code>package.json</code> including different arguments.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='json'><span class='line'><span class="p">{</span>
</span><span class='line'>  <span class="nt">&quot;name&quot;</span><span class="p">:</span> <span class="s2">&quot;blog-npm-run-scripts&quot;</span><span class="p">,</span>
</span><span class='line'>  <span class="nt">&quot;version&quot;</span><span class="p">:</span> <span class="s2">&quot;1.0.0&quot;</span><span class="p">,</span>
</span><span class='line'>  <span class="nt">&quot;description&quot;</span><span class="p">:</span> <span class="s2">&quot;Show of the new npm run command&quot;</span><span class="p">,</span>
</span><span class='line'>  <span class="nt">&quot;scripts&quot;</span><span class="p">:</span> <span class="p">{</span>
</span><span class='line'>    <span class="nt">&quot;echo_helloWorld&quot;</span> <span class="p">:</span> <span class="s2">&quot;echo \&quot;Hello world\&quot;&quot;</span><span class="p">,</span>
</span><span class='line'>    <span class="nt">&quot;echo_foo&quot;</span> <span class="p">:</span> <span class="s2">&quot;echo \&quot;Foo\&quot;&quot;</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<h3>Passing arguments to <code>npm run</code></h3>

<p>Since version 2.0.0 it is now possible to pass arguments to the scripts defined in the <code>package.json</code>. And this is a big improvement on flexibility and makes the whole thing much more powerful. The <code>package.json</code> above including two scripts running the <code>echo</code> command can be combined into one and can accept the wished arguments.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='json'><span class='line'><span class="p">{</span>
</span><span class='line'>  <span class="nt">&quot;name&quot;</span><span class="p">:</span> <span class="s2">&quot;blog-npm-run-scripts&quot;</span><span class="p">,</span>
</span><span class='line'>  <span class="nt">&quot;version&quot;</span><span class="p">:</span> <span class="s2">&quot;1.0.0&quot;</span><span class="p">,</span>
</span><span class='line'>  <span class="nt">&quot;description&quot;</span><span class="p">:</span> <span class="s2">&quot;Show of the new npm run command&quot;</span><span class="p">,</span>
</span><span class='line'>  <span class="nt">&quot;scripts&quot;</span><span class="p">:</span> <span class="p">{</span>
</span><span class='line'>    <span class="nt">&quot;echo&quot;</span> <span class="p">:</span> <span class="s2">&quot;echo&quot;</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>The syntax to pass arguments to the defined scripts is as follows. You have to use <code>npm run</code> and then devided by two dashes(<code>--</code>) you can pass any arguments you like to the command.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>&gt; npm run <span class="nb">echo</span> -- <span class="s2">&quot;hello world&quot;</span>
</span><span class='line'>
</span><span class='line'>&gt; blog-npm-run-scripts@1.0.0 <span class="nb">echo</span> /Users/stefan/Sites/blog-npm-run-scripts
</span><span class='line'>&gt; <span class="nb">echo</span> <span class="s2">&quot;hello world&quot;</span>
</span><span class='line'>
</span><span class='line'>hello world
</span></code></pre></td></tr></table></div></figure>


<h3>Setting up Grunt and gulp without the global dependency</h3>

<p>Using the <code>echo</code> command might not seem really useful, but we will come to a much more useful example now. I am doing mostly frontend development and that is why in almost every project that I work on either <a href="http://gruntjs.com/">Grunt</a> or <a href="http://gulpjs.com/">gulp</a> is included. Grunt and gulp are task runners, that come with huge plugin registries to help automate any task you can think of.</p>

<p>When you check the getting started guide of both projects you will find the instruction to install them globally.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="c"># install gulp globally</span>
</span><span class='line'><span class="nv">$ </span>npm install -g gulp
</span><span class='line'><span class="c"># install grunt globally</span>
</span><span class='line'><span class="nv">$ </span>npm install -g grunt-cli
</span></code></pre></td></tr></table></div></figure>


<p>This is absolutely fine when you are working alone and these tools are only supposed to be executed on your machine. But when you work together with other colleagues on a project or your process includes a <a href="http://www.martinfowler.com/articles/continuousIntegration.html">continuous integration</a> system, then every global dependency can be quite troublesome. It simply moves the entry barrier a bit higher and increases the complexity to get everything up and running.</p>

<p>So let us have a look how to avoid that. First step is to install the needed modules in our project and not globally anymore.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="c"># install gulp in the project</span>
</span><span class='line'><span class="nv">$ </span>npm install gulp
</span><span class='line'><span class="c"># install grunt in the project</span>
</span><span class='line'><span class="nv">$ </span>npm install grunt-cli
</span></code></pre></td></tr></table></div></figure>


<p>By calling <code>npm install</code> npm will install the module and depending, if it has the <a href="http://browsenpm.org/package.json#bin"><code>bin</code></a> property defined, it will create a <code>.bin</code> folder inside of the <code>node_modules</code> folder. This means that this folder will include all defined command line interfaces of your installed modules. In this case the <code>.bin</code> folder includes the binaries <code>gulp</code> and <code>grunt</code>.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>node_modules
</span><span class='line'>  |_  .bin
</span><span class='line'>      |_ gulp
</span><span class='line'>      |_ grunt
</span></code></pre></td></tr></table></div></figure>


<p>If you want to use either Grunt or gulp via the <code>npm run</code> command now, you can set them up inside of your <code>package.json</code>.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='json'><span class='line'><span class="p">{</span>
</span><span class='line'>  <span class="nt">&quot;name&quot;</span><span class="p">:</span> <span class="s2">&quot;blog-npm-run-scripts&quot;</span><span class="p">,</span>
</span><span class='line'>  <span class="nt">&quot;version&quot;</span><span class="p">:</span> <span class="s2">&quot;1.0.0&quot;</span><span class="p">,</span>
</span><span class='line'>  <span class="nt">&quot;description&quot;</span><span class="p">:</span> <span class="s2">&quot;Show of the new npm run command&quot;</span><span class="p">,</span>
</span><span class='line'>  <span class="nt">&quot;scripts&quot;</span><span class="p">:</span> <span class="p">{</span>
</span><span class='line'>    <span class="nt">&quot;gulp&quot;</span> <span class="p">:</span> <span class="s2">&quot;./node_modules/.bin/gulp&quot;</span><span class="p">,</span>
</span><span class='line'>    <span class="nt">&quot;grunt&quot;</span> <span class="p">:</span> <span class="s2">&quot;./node_modules/.bin/grunt&quot;</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>And then you can easily run your defined tasks with npm.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="c"># run &#39;dev&#39; task with in project install grunt</span>
</span><span class='line'><span class="nv">$ </span>npm run grunt -- dev
</span><span class='line'><span class="c"># run &#39;dev&#39; task with in project install gulp</span>
</span><span class='line'><span class="nv">$ </span>npm run gulp -- dev
</span></code></pre></td></tr></table></div></figure>


<p><strong>But wait, it comes even better!</strong></p>

<p>To make it a bit nicer npm provides a nifty feature, when setting up custom scripts. It puts <code>./node_modules/.bin</code> in the <code>PATH</code> environment, when it executes the script.</p>

<p>This means, we can make the <code>package.json</code> a bit cleaner.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='json'><span class='line'><span class="p">{</span>
</span><span class='line'>  <span class="nt">&quot;name&quot;</span><span class="p">:</span> <span class="s2">&quot;blog-npm-run-scripts&quot;</span><span class="p">,</span>
</span><span class='line'>  <span class="nt">&quot;version&quot;</span><span class="p">:</span> <span class="s2">&quot;1.0.0&quot;</span><span class="p">,</span>
</span><span class='line'>  <span class="nt">&quot;description&quot;</span><span class="p">:</span> <span class="s2">&quot;Show of the new npm run command&quot;</span><span class="p">,</span>
</span><span class='line'>  <span class="nt">&quot;scripts&quot;</span><span class="p">:</span> <span class="p">{</span>
</span><span class='line'>    <span class="nt">&quot;gulp&quot;</span> <span class="p">:</span> <span class="s2">&quot;gulp&quot;</span><span class="p">,</span>
</span><span class='line'>    <span class="nt">&quot;grunt&quot;</span> <span class="p">:</span> <span class="s2">&quot;grunt&quot;</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p><strong>For me this is pure awesomeness!</strong></p>

<p>It means not only dropping a global dependency but rather simplifying the whole work and setup flow.</p>

<p>Getting everything up and running is not</p>

<ul>
<li>installing node (which will install npm also)</li>
<li>installing dependencies</li>
<li>installing global dependencies</li>
<li>and run e.g. Grunt</li>
</ul>


<p>anymore.</p>

<p>It becomes</p>

<ul>
<li>installing node</li>
<li>installing dependencies</li>
<li>and run everything via npm scripts</li>
</ul>


<p>only.</p>

<p>If you want to play around with this I set up an <a href="https://github.com/stefanjudis/npm2-run-scripts-tryout">example repository</a>, which includes Grunt and gulp ready to use without any global installation.</p>

<h3>Sum up</h3>

<p>For me it is clear, that I will drop any project required global dependency that can be installed via npm in the future, because having less global dependencies just means less troubles and quicker setup.</p>

<p>And that is it for now and if you have any comments or ideas on that, please let me know. I hope you enjoyed it. :)</p>
<div class='octopress-authorbox'>
	<div class="author-pic">
		<img src="http://www.gravatar.com/avatar/22725c2d3eb331146549bf0d5d3c050c" alt="Stefan Judis" />
	</div>
	
	<div class="author-about">
		<h3>Stefan Judis</h3>
		<p>Frontend lover</p>
		<ul class="author-links">
			
			<li>
			<a href="http://twitter.com/stefanjudis">@stefanjudis</a>
			</li>
			
			
		</ul>
	</div>
</div>]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Control your CSS animations with *animation-fill-mode*]]></title>
    <link href="http://4waisenkinder.github.io/blog/2014/10/13/control-your-css-animations-with-animation-fill-mode/"/>
    <updated>2014-10-13T20:39:00+02:00</updated>
    <id>http://4waisenkinder.github.io/blog/2014/10/13/control-your-css-animations-with-animation-fill-mode</id>
    <content type="html"><![CDATA[<p>Recently I had some time to play around with some CSS animations. Unfortunately I am not able to use them on a regular basis in my daily work and that is why I am really enjoying to do <em>#cssonly</em> stuff in my free time.</p>

<p>When using CSS animation there are two different (not technical) types of css animation.<!-- more --> There are the animations that has a starting set of set CSS properties which is exactly the same as the properties set at the end of the animation. You can check the example below.</p>

<h3>Same start and end CSS properties</h3>

<pre class="codepen" data-height="400" data-type="result" data-href="ALJef" data-user="stefanjudis"><code> </code></pre>


<script async src="http://codepen.io:/assets/embed/ei.js"></script>


<p>The animation defines a movement of the red square by using <code>translate</code> and moves the square to the left, to the right and ends in the center where it actually started.</p>

<p><em>If you are not familiar with CSS animations you might want to read something about it on <a href="https://developer.mozilla.org/de/docs/Web/CSS/animation">MDN</a>.</em></p>

<h3>Different start and end CSS properties</h3>

<p>But then there is the other type of animations that do not have the same properties as the applied styles when they finish. And these animations were always something I was struggling with.</p>

<p>So let us change the animation for the red square, so that it only moves to the right and has a different styling as applied before the animation kickes in.</p>

<pre class="codepen" data-height="400" data-type="result" data-href="fElaA" data-user="stefanjudis"><code> </code></pre>


<script async src="http://codepen.io:/assets/embed/ei.js"></script>


<p>As you see the animation finishes and the square jumps back to its position defined by the CSS that is not part of the animation.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
</pre></td><td class='code'><pre><code class='css'><span class='line'><span class="nc">.square</span> <span class="p">{</span>
</span><span class='line'>  <span class="o">//</span> <span class="n">some</span> <span class="n">more</span> <span class="n">stuff</span> <span class="n">here</span>
</span><span class='line'>  <span class="n">animation</span><span class="o">-</span><span class="n">name</span> <span class="o">:</span> <span class="n">move</span><span class="p">;</span>
</span><span class='line'>  <span class="n">animation</span><span class="o">-</span><span class="n">duration</span> <span class="o">:</span> <span class="m">1s</span><span class="p">;</span>
</span><span class='line'>  <span class="n">animation</span><span class="o">-</span><span class="n">iteration</span><span class="o">-</span><span class="n">count</span> <span class="o">:</span><span class="m">1</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">transform</span> <span class="o">:</span> <span class="n">translate</span><span class="p">(</span> <span class="m">0</span><span class="o">,</span> <span class="m">0</span> <span class="p">);</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="k">@keyframes</span> <span class="nt">move</span> <span class="p">{</span>
</span><span class='line'>  <span class="nt">0</span><span class="o">%</span> <span class="p">{</span>
</span><span class='line'>    <span class="n">transform</span> <span class="o">:</span> <span class="n">translate</span><span class="p">(</span> <span class="m">0</span><span class="o">,</span> <span class="m">0</span> <span class="p">);</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>  <span class="nt">100</span><span class="o">%</span> <span class="p">{</span>
</span><span class='line'>    <span class="n">transform</span> <span class="o">:</span> <span class="n">translate</span><span class="p">(</span> <span class="m">100</span><span class="o">%,</span> <span class="m">0</span> <span class="p">)</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>But, that is not what I wanted, I wanted the square to keep the properties defined in the last frame of the animation. So I googled a bit and landed on <a href="http://stackoverflow.com/questions/4359627/stopping-a-css3-animation-on-last-frame">stackoverflow</a>. The first answer you will find there, is to set up the base styling of the animated element to the end state of the animation.</p>

<pre class="codepen" data-height="400" data-type="result" data-href="GmCIf" data-user="stefanjudis"><code> </code></pre>


<script async src="http://codepen.io:/assets/embed/ei.js"></script>




<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
</pre></td><td class='code'><pre><code class='css'><span class='line'><span class="nc">.square</span> <span class="p">{</span>
</span><span class='line'>  <span class="o">//</span> <span class="n">some</span> <span class="n">more</span> <span class="n">stuff</span> <span class="n">here</span>
</span><span class='line'>  <span class="n">animation</span><span class="o">-</span><span class="n">name</span> <span class="o">:</span> <span class="n">move</span><span class="p">;</span>
</span><span class='line'>  <span class="n">animation</span><span class="o">-</span><span class="n">duration</span> <span class="o">:</span> <span class="m">1s</span><span class="p">;</span>
</span><span class='line'>  <span class="n">animation</span><span class="o">-</span><span class="n">iteration</span><span class="o">-</span><span class="n">count</span> <span class="o">:</span><span class="m">1</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>  <span class="o">//</span> <span class="n">set</span> <span class="n">it</span> <span class="n">initially</span> <span class="n">to</span> <span class="n">the</span> <span class="n">state</span> <span class="n">of</span> <span class="n">the</span> <span class="n">animation</span> <span class="n">end</span>
</span><span class='line'>  <span class="n">transform</span> <span class="o">:</span> <span class="n">translate</span><span class="p">(</span> <span class="m">100</span><span class="o">%,</span> <span class="m">0</span> <span class="p">);</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="k">@keyframes</span> <span class="nt">move</span> <span class="p">{</span>
</span><span class='line'>  <span class="nt">0</span><span class="o">%</span> <span class="p">{</span>
</span><span class='line'>    <span class="n">transform</span> <span class="o">:</span> <span class="n">translate</span><span class="p">(</span> <span class="m">0</span><span class="o">,</span> <span class="m">0</span> <span class="p">);</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>  <span class="nt">100</span><span class="o">%</span> <span class="p">{</span>
</span><span class='line'>    <span class="n">transform</span> <span class="o">:</span> <span class="n">translate</span><span class="p">(</span> <span class="m">100</span><span class="o">%,</span> <span class="m">0</span> <span class="p">)</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>This works kind of well, but I never liked this way and it felt like it is not the correct solution. And it turned out quickly, that it actually is not. When I was playing around with animations I used <code>animation-delay</code> a lot. So let us check if the last solution is working in combination with the usage of <code>transition-delay</code>.</p>

<pre class="codepen" data-height="400" data-type="result" data-href="xHavI" data-user="stefanjudis"><code> </code></pre>


<script async src="http://codepen.io:/assets/embed/ei.js"></script>




<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
</pre></td><td class='code'><pre><code class='css'><span class='line'><span class="nc">.square</span> <span class="p">{</span>
</span><span class='line'>  <span class="o">//</span> <span class="n">some</span> <span class="n">more</span> <span class="n">stuff</span> <span class="n">here</span>
</span><span class='line'>  <span class="n">animation</span><span class="o">-</span><span class="n">name</span> <span class="o">:</span> <span class="n">move</span><span class="p">;</span>
</span><span class='line'>  <span class="n">animation</span><span class="o">-</span><span class="n">duration</span> <span class="o">:</span> <span class="m">1s</span><span class="p">;</span>
</span><span class='line'>  <span class="n">animation</span><span class="o">-</span><span class="n">iteration</span><span class="o">-</span><span class="n">count</span> <span class="o">:</span><span class="m">1</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">transform</span> <span class="o">:</span> <span class="n">translate</span><span class="p">(</span> <span class="m">100</span><span class="o">%,</span> <span class="m">0</span> <span class="p">);</span>
</span><span class='line'>
</span><span class='line'>  <span class="o">@</span><span class="n">for</span> <span class="err">$</span><span class="n">i</span> <span class="n">from</span> <span class="m">0</span> <span class="n">through</span> <span class="m">3</span> <span class="err">{</span>
</span><span class='line'>    <span class="o">&amp;:</span><span class="n">nth</span><span class="o">-</span><span class="n">child</span><span class="p">(</span><span class="err">#{$</span><span class="n">i</span> <span class="o">+</span> <span class="m">1</span><span class="p">}</span><span class="o">)</span> <span class="p">{</span>
</span><span class='line'>      <span class="k">top</span> <span class="o">:</span> <span class="m">1</span> <span class="o">+</span> <span class="err">$</span><span class="n">i</span> <span class="o">*</span> <span class="m">6</span><span class="n">rem</span><span class="p">;</span>
</span><span class='line'>      <span class="n">animation</span><span class="o">-</span><span class="n">delay</span> <span class="o">:</span> <span class="err">#{$</span><span class="n">i</span><span class="p">}</span><span class="nt">s</span><span class="o">;</span>
</span><span class='line'>    <span class="err">}</span>
</span><span class='line'>  <span class="err">}</span>
</span><span class='line'><span class="err">}</span>
</span><span class='line'>
</span><span class='line'><span class="k">@keyframes</span> <span class="nt">move</span> <span class="p">{</span>
</span><span class='line'>  <span class="nt">0</span><span class="o">%</span> <span class="p">{</span>
</span><span class='line'>    <span class="n">transform</span> <span class="o">:</span> <span class="n">translate</span><span class="p">(</span> <span class="m">0</span><span class="o">,</span> <span class="m">0</span> <span class="p">);</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>  <span class="nt">100</span><span class="o">%</span> <span class="p">{</span>
</span><span class='line'>    <span class="n">transform</span> <span class="o">:</span> <span class="n">translate</span><span class="p">(</span> <span class="m">100</span><span class="o">%,</span> <span class="m">0</span> <span class="p">)</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>What I did was I implemented four elements, which have all the same animation but with different set <code>transition-delay</code> property. And as you see, the squares are not jumping back when the animation finishes, which is good, but they are jumping when the animation starts, because the base styling is matching the animation end.</p>

<p>That shows clearly, that setting the animation end styles to the elements you want to animate is not an option at all.</p>

<h3>animation-fill-mode for the rescue</h3>

<p>And basically there is a super easyIch komme solution to solve this problem (and I&rsquo;m still surprised that it is not popping up, when googling this problem). There is the CSS property <a href="https://developer.mozilla.org/de/docs/Web/CSS/animation-fill-mode">animation-fill-mode</a>, which lets you define, if styles included in your defined animation should be applied to the depending element before and/or after the animation.</p>

<p>This means by applying <code>animation-fill-mode : forwards</code> to the animated squares, the squares can still have the base styling which should be applied before the animation starts and afterwards the styles defined in the animation at <code>100%</code> or <code>to</code> will be applied to the element when the animation finishes.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
</pre></td><td class='code'><pre><code class='css'><span class='line'><span class="nc">.square</span> <span class="p">{</span>
</span><span class='line'>  <span class="o">//</span> <span class="n">some</span> <span class="n">more</span> <span class="n">stuff</span> <span class="n">here</span>
</span><span class='line'>  <span class="n">animation</span><span class="o">-</span><span class="n">name</span> <span class="o">:</span> <span class="n">move</span><span class="p">;</span>
</span><span class='line'>  <span class="n">animation</span><span class="o">-</span><span class="n">duration</span> <span class="o">:</span> <span class="m">1s</span><span class="p">;</span>
</span><span class='line'>  <span class="n">animation</span><span class="o">-</span><span class="n">iteration</span><span class="o">-</span><span class="n">count</span> <span class="o">:</span><span class="m">1</span><span class="p">;</span>
</span><span class='line'>  <span class="n">animation</span><span class="o">-</span><span class="n">fill</span><span class="o">-</span><span class="n">mode</span> <span class="o">:</span> <span class="n">forwards</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">transform</span> <span class="o">:</span> <span class="n">translate</span><span class="p">(</span> <span class="m">0</span><span class="o">,</span> <span class="m">0</span> <span class="p">);</span>
</span><span class='line'>
</span><span class='line'>  <span class="o">@</span><span class="n">for</span> <span class="err">$</span><span class="n">i</span> <span class="n">from</span> <span class="m">0</span> <span class="n">through</span> <span class="m">3</span> <span class="err">{</span>
</span><span class='line'>    <span class="o">&amp;:</span><span class="n">nth</span><span class="o">-</span><span class="n">child</span><span class="p">(</span><span class="err">#{$</span><span class="n">i</span> <span class="o">+</span> <span class="m">1</span><span class="p">}</span><span class="o">)</span> <span class="p">{</span>
</span><span class='line'>      <span class="k">top</span> <span class="o">:</span> <span class="m">1</span> <span class="o">+</span> <span class="err">$</span><span class="n">i</span> <span class="o">*</span> <span class="m">6</span><span class="n">rem</span><span class="p">;</span>
</span><span class='line'>      <span class="n">animation</span><span class="o">-</span><span class="n">delay</span> <span class="o">:</span> <span class="err">#{$</span><span class="n">i</span><span class="p">}</span><span class="nt">s</span><span class="o">;</span>
</span><span class='line'>    <span class="err">}</span>
</span><span class='line'>  <span class="err">}</span>
</span><span class='line'><span class="err">}</span>
</span><span class='line'>
</span><span class='line'><span class="k">@keyframes</span> <span class="nt">move</span> <span class="p">{</span>
</span><span class='line'>  <span class="nt">0</span><span class="o">%</span> <span class="p">{</span>
</span><span class='line'>    <span class="n">transform</span> <span class="o">:</span> <span class="n">translate</span><span class="p">(</span> <span class="m">0</span><span class="o">,</span> <span class="m">0</span> <span class="p">);</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>  <span class="nt">100</span><span class="o">%</span> <span class="p">{</span>
</span><span class='line'>    <span class="n">transform</span> <span class="o">:</span> <span class="n">translate</span><span class="p">(</span> <span class="m">100</span><span class="o">%,</span> <span class="m">0</span> <span class="p">)</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>And here is the working result:</p>

<pre class="codepen" data-height="400" data-type="result" data-href="CtoyH" data-user="stefanjudis"><code> </code></pre>


<script async src="http://codepen.io:/assets/embed/ei.js"></script>


<p><strong>It can be as easy as that!</strong></p>

<p>And that is it for now &ndash; problem solved. :)</p>

<p>I thought it might be worth sharing and I hope you enjoyed it. And as always feedback is very welcome. :)</p>
<div class='octopress-authorbox'>
	<div class="author-pic">
		<img src="http://www.gravatar.com/avatar/22725c2d3eb331146549bf0d5d3c050c" alt="Stefan Judis" />
	</div>
	
	<div class="author-about">
		<h3>Stefan Judis</h3>
		<p>Frontend lover</p>
		<ul class="author-links">
			
			<li>
			<a href="http://twitter.com/stefanjudis">@stefanjudis</a>
			</li>
			
			
		</ul>
	</div>
</div>]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Flatten your npm dependencies with dedupe]]></title>
    <link href="http://4waisenkinder.github.io/blog/2014/06/09/flatten-your-dependencies-with-npm-dedupe/"/>
    <updated>2014-06-09T21:52:00+02:00</updated>
    <id>http://4waisenkinder.github.io/blog/2014/06/09/flatten-your-dependencies-with-npm-dedupe</id>
    <content type="html"><![CDATA[<p>I use npm for a while now and it is heavily integrated in my daily workflow. One thing that always bothers me, is that a fresh <code>npm install</code> on your project will probably download the same packages over and over again. Let us imagine your project has multiple dependencies that all have one package defined as another dependency.<!-- more --></p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>a
</span><span class='line'>+-- b &lt;-- depends on c@1.0.x
</span><span class='line'>|   `-- c@1.0.10
</span><span class='line'>`-- d &lt;-- depends on c@~1.0.9
</span><span class='line'>    `-- c@1.0.10</span></code></pre></td></tr></table></div></figure>


<p>As you see above package <code>c</code> will be downloaded two times, although the dependencies <code>b</code> and <code>d</code> could use the same package. You might think now &ldquo;So? Not a big deal&hellip;&rdquo;, but depending on dependencies of your dependencies you end up with a much slower <code>npm install</code> process, because packages got downloaded multiple times. And if you deal with a big project with a lot of dependencies I am not talking about a few seconds. ;)</p>

<p>Additionally the installation process can become less stable. In my case I included the following dependencies in my <code>package.json</code>.</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>  "dependencies": {
</span><span class='line'>    "grunt": "~0.4.5",
</span><span class='line'>    "grunt-photobox": "~0.8.0",
</span><span class='line'>    "grunt-phantomas": "~0.7.1"
</span><span class='line'>  }</span></code></pre></td></tr></table></div></figure>


<p>The two grunt plugins either directly or one of their dependencies depend on <code>phantomjs</code>. This leads to the following output during the installation process.</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>&gt; phantomjs@1.9.7-8 install /Users/stefan/Sites/blog-npm-dedupe/node_modules/grunt-contrib-jasmine/node_modules/grunt-lib-phantomjs/node_modules/phantomjs
</span><span class='line'>&gt; node install.js
</span><span class='line'>
</span><span class='line'>PhantomJS detected, but wrong version 1.9.2 @ /opt/local/bin/phantomjs.
</span><span class='line'>Download already available at /var/folders/03/cgg2bwfd6j92tfllylt5b91m0000gn/T/phantomjs/phantomjs-1.9.7-macosx.zip
</span><span class='line'>Extracting zip contents
</span><span class='line'>Copying extracted folder /var/folders/03/cgg2bwfd6j92tfllylt5b91m0000gn/T/phantomjs/phantomjs-1.9.7-macosx.zip-extract-1402344467586/phantomjs-1.9.7-macosx -&gt; /Users/stefan/Sites/blog-npm-dedupe/node_modules/grunt-contrib-jasmine/node_modules/grunt-lib-phantomjs/node_modules/phantomjs/lib/phantom
</span><span class='line'>Writing location.js file
</span><span class='line'>Done. Phantomjs binary available at /Users/stefan/Sites/blog-npm-dedupe/node_modules/grunt-contrib-jasmine/node_modules/grunt-lib-phantomjs/node_modules/phantomjs/lib/phantom/bin/phantomjs
</span><span class='line'>
</span><span class='line'>&gt; phantomjs@1.9.7-8 install /Users/stefan/Sites/blog-npm-dedupe/node_modules/grunt-phantomas/node_modules/phantomas/node_modules/phantomjs
</span><span class='line'>&gt; node install.js
</span><span class='line'>
</span><span class='line'>PhantomJS detected, but wrong version 1.9.2 @ /opt/local/bin/phantomjs.
</span><span class='line'>Download already available at /var/folders/03/cgg2bwfd6j92tfllylt5b91m0000gn/T/phantomjs/phantomjs-1.9.7-macosx.zip
</span><span class='line'>Extracting zip contents
</span><span class='line'>Copying extracted folder /var/folders/03/cgg2bwfd6j92tfllylt5b91m0000gn/T/phantomjs/phantomjs-1.9.7-macosx.zip-extract-1402344475151/phantomjs-1.9.7-macosx -&gt; /Users/stefan/Sites/blog-npm-dedupe/node_modules/grunt-phantomas/node_modules/phantomas/node_modules/phantomjs/lib/phantom
</span><span class='line'>Writing location.js file
</span><span class='line'>Done. Phantomjs binary available at /Users/stefan/Sites/blog-npm-dedupe/node_modules/grunt-phantomas/node_modules/phantomas/node_modules/phantomjs/lib/phantom/bin/phantomjs</span></code></pre></td></tr></table></div></figure>


<p>Two times the same package is downloaded and unfortunately the <code>phantomjs</code> package downloads <code>phantomjs</code> via npm script functionality. It downloads and unzipps data itself. In my case I had to fight against an unstable network, which led to a bunch of failing intallation processes. Sometimes the first <code>phantomjs</code> download did not work. Sometimes the second. And all the time <code>npm install</code> failed. Especially <code>phantomjs</code> is a really popular dependency and I am sure a lot of projects download it much more often than only two times. ;)</p>

<p>After this experience I started digging around a bit and discovered <code>npm dedupe</code> &ndash; docs are <a href="https://www.npmjs.org/doc/cli/npm-dedupe.html">here</a>. It will check your installed dependencies and finally flatten the dependency structure by moving shared packages higher in the tree. Less duplicated packages &ndash; yay!!!</p>

<p>To show the difference &ndash; the old structure was:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>grunt-phantomas
</span><span class='line'>`-- phantomas
</span><span class='line'>    `-- phantomjs
</span><span class='line'>
</span><span class='line'>grunt-photobox
</span><span class='line'>`-- phantomjs</span></code></pre></td></tr></table></div></figure>


<p>And after using <code>dedupe</code> I ended up with:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>phantomjs
</span><span class='line'>
</span><span class='line'>// a lot of other shared
</span><span class='line'>// dependencies also here :)
</span><span class='line'>
</span><span class='line'>grunt-phantomas
</span><span class='line'>`-- phantomas
</span><span class='line'>
</span><span class='line'>grunt-photobox</span></code></pre></td></tr></table></div></figure>


<p>Super nice!</p>

<p>To make sure all your colleagues receive the same flattened dependency structure use <code>npm shrinkwrap</code> to really lock all packages including versions and hierarchy. In case you have not used <code>shrinkwrap</code> before I also wrote a <a href="http://4waisenkinder.de/blog/2013/07/10/why-you-should-use-npm-shrinkwrap-and-how-to-deal-with-a-dependency-fu-star-star-up/">post</a> about it.</p>

<p>To sum up, my workflow was the following:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ npm install
</span><span class='line'>
</span><span class='line'>$ npm dedupe
</span><span class='line'>
</span><span class='line'>$ npm shrinkwrap</span></code></pre></td></tr></table></div></figure>


<p><code>dedupe</code> is currently marked as experimental and unfortunately I made the experience, that it is not 100% stable at the moment. I filed already an issue <a href="https://github.com/npm/npm/issues/5448">here</a>. But we should really start using it, because it will make the installation of npm packages just quicker and safer. I am really looking forward to this feature and I am sure, that it will become stable soon.</p>

<p>Thanks for reading and all comments on this topic are as usual more than welcome. ;)</p>
<div class='octopress-authorbox'>
	<div class="author-pic">
		<img src="http://www.gravatar.com/avatar/22725c2d3eb331146549bf0d5d3c050c" alt="Stefan Judis" />
	</div>
	
	<div class="author-about">
		<h3>Stefan Judis</h3>
		<p>Frontend lover</p>
		<ul class="author-links">
			
			<li>
			<a href="http://twitter.com/stefanjudis">@stefanjudis</a>
			</li>
			
			
		</ul>
	</div>
</div>]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Using basic and tween transitions in d3.js]]></title>
    <link href="http://4waisenkinder.github.io/blog/2014/05/11/d3-dot-js-tween-in-detail/"/>
    <updated>2014-05-11T13:25:00+02:00</updated>
    <id>http://4waisenkinder.github.io/blog/2014/05/11/d3-dot-js-tween-in-detail</id>
    <content type="html"><![CDATA[<p>Playing around at <a href="http://codepen.io">CodePen</a> is one of my favourite activities, when doing &lsquo;nothing&rsquo; lately. Especially the combination of <a href="http://dribbble.com">dribbble</a> and CodePen is super nice. Browsing for beautiful designs and ideas on dribbble and putting them into code became a nice activity for me. There are a lot of great people hanging around at dribbble and you can get a lot of inspiration over there.</p>

<p>Over the last few month I started being interested in dashboards and how to analyze/visualize data. Unfortunately I am not a designer and this is why I really enjoy to just build dashboards according to a dribbble design.</p>

<!-- more -->


<h3>Dashboard examples</h3>

<p>Two example of these tryouts are the following. They include some basic <a href="d3js.org">d3.js</a> charting and make usage of a few different kinds of animation to make them look pretty and have some fun on my side.</p>

<h4>Example 1 &ndash; referenced as &ldquo;bright dashboard&rdquo; later on</h4>

<p><img class="center" src="http://4waisenkinder.github.io/images/blog/stefanjudis/d3TweenExample1.jpg" width="350" height="401" title="Example 1 of d3 dashboard tryout at CodePen" alt="Example 1 of d3 dashboard tryout at CodePen"></p>

<p>You can check the coded result <a href="http://codepen.io/stefanjudis/pen/gkHwJ">here</a> and the used design <a href="http://dribbble.com/shots/1252153-Charts-Inforgraphic-Templates/attachments/170613">here</a>.</p>

<h4>Example 2 &ndash; referenced as &ldquo;dark dashboard&rdquo; later on</h4>

<p><img class="center" src="http://4waisenkinder.github.io/images/blog/stefanjudis/d3TweenExample2.jpg" width="500" height="341" title="Example 2 of d3 dashboard tryout at CodePen" alt="Example 2 of d3 dashboard tryout at CodePen"></p>

<p>You can check the coded result <a href="http://codepen.io/stefanjudis/pen/jawGn">here</a> and the used design <a href="http://dribbble.com/shots/1244676-Cloud-Storage/attachments/168917">here</a>.</p>

<p>Last week I got a Tweet by <a href="https://twitter.com/jessicard">@jessicard</a> asking, if I may want to explain how the <code>tween</code> function in d3.js works, because it is used several times.</p>

<p>And here we are &ndash; let us dive into basic and <code>tween</code> transitions in d3. <em>I&rsquo;m really sorry for the delay by the way</em>&hellip;</p>

<h3>Basic animations in d3.js</h3>

<p>To achieve basic transition there is no big effort in d3.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="p">;(</span> <span class="kd">function</span><span class="p">(</span> <span class="nx">d3</span> <span class="p">)</span> <span class="p">{</span>
</span><span class='line'>  <span class="c1">// grab svg container</span>
</span><span class='line'>  <span class="kd">var</span> <span class="nx">d3container</span> <span class="o">=</span> <span class="nx">d3</span><span class="p">.</span><span class="nx">select</span><span class="p">(</span> <span class="s1">&#39;.container&#39;</span> <span class="p">);</span>
</span><span class='line'>  <span class="c1">// append svg</span>
</span><span class='line'>  <span class="kd">var</span> <span class="nx">svg</span> <span class="o">=</span> <span class="nx">d3container</span><span class="p">.</span><span class="nx">append</span><span class="p">(</span> <span class="s1">&#39;svg&#39;</span> <span class="p">);</span>
</span><span class='line'>  <span class="c1">// append group element to include some circles</span>
</span><span class='line'>  <span class="kd">var</span> <span class="nx">dots</span> <span class="o">=</span> <span class="nx">svg</span><span class="p">.</span><span class="nx">append</span><span class="p">(</span> <span class="s1">&#39;g&#39;</span> <span class="p">);</span>
</span><span class='line'>
</span><span class='line'>  <span class="c1">// create loop to append some circle</span>
</span><span class='line'>  <span class="k">for</span> <span class="p">(</span> <span class="kd">var</span> <span class="nx">i</span> <span class="o">=</span> <span class="mi">1</span><span class="p">;</span> <span class="nx">i</span> <span class="o">&lt;=</span> <span class="mi">5</span><span class="p">;</span> <span class="o">++</span><span class="nx">i</span> <span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="c1">// append circle</span>
</span><span class='line'>    <span class="nx">dots</span><span class="p">.</span><span class="nx">append</span><span class="p">(</span> <span class="s1">&#39;circle&#39;</span> <span class="p">)</span>
</span><span class='line'>        <span class="c1">// set radius to &#39;0&#39; because we want</span>
</span><span class='line'>        <span class="c1">// animate it later on</span>
</span><span class='line'>        <span class="p">.</span><span class="nx">attr</span><span class="p">(</span> <span class="s1">&#39;r&#39;</span><span class="p">,</span> <span class="mi">0</span> <span class="p">)</span>
</span><span class='line'>        <span class="c1">// kind of center it horizontally - I know it is not exactly in the middle ;)</span>
</span><span class='line'>        <span class="p">.</span><span class="nx">attr</span><span class="p">(</span> <span class="s1">&#39;cx&#39;</span><span class="p">,</span>  <span class="mi">150</span> <span class="p">)</span>
</span><span class='line'>        <span class="c1">// give different y position</span>
</span><span class='line'>        <span class="p">.</span><span class="nx">attr</span><span class="p">(</span> <span class="s1">&#39;cy&#39;</span><span class="p">,</span> <span class="nx">i</span> <span class="o">*</span> <span class="mi">25</span> <span class="p">)</span>
</span><span class='line'>        <span class="c1">// add event handler</span>
</span><span class='line'>        <span class="p">.</span><span class="nx">on</span><span class="p">(</span> <span class="s1">&#39;mouseenter&#39;</span><span class="p">,</span> <span class="kd">function</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>          <span class="c1">// select element in current context</span>
</span><span class='line'>          <span class="nx">d3</span><span class="p">.</span><span class="nx">select</span><span class="p">(</span> <span class="k">this</span> <span class="p">)</span>
</span><span class='line'>            <span class="c1">// add transition</span>
</span><span class='line'>            <span class="p">.</span><span class="nx">transition</span><span class="p">()</span>
</span><span class='line'>            <span class="c1">// change attribute</span>
</span><span class='line'>            <span class="p">.</span><span class="nx">attr</span><span class="p">(</span> <span class="s1">&#39;r&#39;</span><span class="p">,</span> <span class="mi">10</span> <span class="p">);</span>
</span><span class='line'>        <span class="p">}</span> <span class="p">)</span>
</span><span class='line'>        <span class="c1">// add event handler</span>
</span><span class='line'>        <span class="p">.</span><span class="nx">on</span><span class="p">(</span> <span class="s1">&#39;mouseleave&#39;</span><span class="p">,</span> <span class="kd">function</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>          <span class="c1">// select element in current context</span>
</span><span class='line'>          <span class="nx">d3</span><span class="p">.</span><span class="nx">select</span><span class="p">(</span> <span class="k">this</span> <span class="p">)</span>
</span><span class='line'>            <span class="c1">// add transition</span>
</span><span class='line'>            <span class="p">.</span><span class="nx">transition</span><span class="p">()</span>
</span><span class='line'>            <span class="c1">// change attribute</span>
</span><span class='line'>            <span class="p">.</span><span class="nx">attr</span><span class="p">(</span> <span class="s1">&#39;r&#39;</span><span class="p">,</span> <span class="mi">6</span> <span class="p">);</span>
</span><span class='line'>        <span class="p">}</span> <span class="p">)</span>
</span><span class='line'>        <span class="c1">// add transition for kick off</span>
</span><span class='line'>        <span class="p">.</span><span class="nx">transition</span><span class="p">()</span>
</span><span class='line'>        <span class="c1">// add delay so that it looks nice</span>
</span><span class='line'>        <span class="p">.</span><span class="nx">delay</span><span class="p">(</span> <span class="mi">200</span> <span class="o">*</span> <span class="nx">i</span> <span class="p">)</span>
</span><span class='line'>        <span class="c1">// set radius to wished size</span>
</span><span class='line'>        <span class="p">.</span><span class="nx">attr</span><span class="p">(</span> <span class="s1">&#39;r&#39;</span><span class="p">,</span> <span class="mi">6</span> <span class="p">);</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'><span class="p">}</span> <span class="p">)(</span> <span class="nx">d3</span> <span class="p">);</span>
</span></code></pre></td></tr></table></div></figure>


<p>There is not much magic going on there. <code>d3</code> does pretty much all the work for us. For more information you can visit the <a href="https://github.com/mbostock/d3/wiki/Transitions">transition page</a> of the <code>d3</code> <a href="https://github.com/mbostock/d3/wiki">wiki</a>. It is basically just setting an attribute to an element, creating a transition and changing the given attribute later on. It will be transitioned <em>magically</em>.</p>

<p>You can check the result of these lines of code below (you may have to press <em>replay</em> to see the initial animation in action).</p>

<pre class="codepen" data-height="400" data-type="result" data-href="dafDm" data-user="stefanjudis"><code> </code></pre>


<script async src="http://codepen.io:/assets/embed/ei.js"></script>


<p>That is already pretty nice, but let us dig a bit deeper. ;)</p>

<h3>Tween animations in d3.js</h3>

<p>There are some cases, where basic transitions will just not work. For example you can have a quick look at the following code, where I tried to animate <code>text</code> elements showing numbers from zero to 10.</p>

<pre class="codepen" data-height="400" data-type="result" data-href="xrGLy" data-user="stefanjudis"><code> </code></pre>


<script async src="http://codepen.io:/assets/embed/ei.js"></script>


<p>It is unfortunately not working with the usage of a basic transition. This is the use case for so called <code>tweens</code> in <code>d3</code>. The general documentation for <code>tweens</code> can be found <a href="https://github.com/mbostock/d3/wiki/Transitions#tween">here</a>.</p>

<p>The important facts about <code>transition.tween( name, factory )</code> are described as follows:</p>

<blockquote><p>Registers a custom tween for the specified name. When the transition starts, the specified factory function will be invoked for each selected element in the transition, being passed that element&rsquo;s data (d) and index (i) as arguments, with the element as the context (this). The factory should return the tween function to be called over the course of the transition. The tween function is then called repeatedly, being passed the current normalized time t in [0, 1]. If the factory returns null, then the tween is not run on the selected element.</p></blockquote>

<p>So, but what does that mean? Let us modifiy the not working text transition example and have a deeper look at the reworked example.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="p">;(</span> <span class="kd">function</span><span class="p">(</span> <span class="nx">d3</span> <span class="p">)</span> <span class="p">{</span>
</span><span class='line'>  <span class="kd">var</span> <span class="nx">d3container</span> <span class="o">=</span> <span class="nx">d3</span><span class="p">.</span><span class="nx">select</span><span class="p">(</span> <span class="s1">&#39;.container&#39;</span> <span class="p">);</span>
</span><span class='line'>  <span class="kd">var</span> <span class="nx">svg</span> <span class="o">=</span> <span class="nx">d3container</span><span class="p">.</span><span class="nx">append</span><span class="p">(</span> <span class="s1">&#39;svg&#39;</span> <span class="p">);</span>
</span><span class='line'>  <span class="kd">var</span> <span class="nx">dots</span> <span class="o">=</span> <span class="nx">svg</span><span class="p">.</span><span class="nx">append</span><span class="p">(</span> <span class="s1">&#39;g&#39;</span> <span class="p">);</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">for</span> <span class="p">(</span> <span class="kd">var</span> <span class="nx">i</span> <span class="o">=</span> <span class="mi">1</span><span class="p">;</span> <span class="nx">i</span> <span class="o">&lt;=</span> <span class="mi">5</span><span class="p">;</span> <span class="o">++</span><span class="nx">i</span> <span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="nx">dots</span><span class="p">.</span><span class="nx">append</span><span class="p">(</span> <span class="s1">&#39;text&#39;</span> <span class="p">)</span>
</span><span class='line'>        <span class="p">.</span><span class="nx">text</span><span class="p">(</span> <span class="mi">0</span> <span class="p">)</span>
</span><span class='line'>        <span class="p">.</span><span class="nx">attr</span><span class="p">(</span> <span class="s1">&#39;text-anchor&#39;</span><span class="p">,</span> <span class="s1">&#39;middle&#39;</span> <span class="p">)</span>
</span><span class='line'>        <span class="p">.</span><span class="nx">attr</span><span class="p">(</span> <span class="s1">&#39;x&#39;</span><span class="p">,</span>  <span class="mi">150</span> <span class="p">)</span>
</span><span class='line'>        <span class="p">.</span><span class="nx">attr</span><span class="p">(</span> <span class="s1">&#39;y&#39;</span><span class="p">,</span> <span class="nx">i</span> <span class="o">*</span> <span class="mi">25</span> <span class="p">)</span>
</span><span class='line'>        <span class="p">.</span><span class="nx">transition</span><span class="p">()</span>
</span><span class='line'>        <span class="p">.</span><span class="nx">delay</span><span class="p">(</span> <span class="mi">300</span> <span class="o">*</span> <span class="nx">i</span> <span class="p">)</span>
</span><span class='line'>        <span class="p">.</span><span class="nx">tween</span><span class="p">(</span> <span class="s1">&#39;text&#39;</span><span class="p">,</span> <span class="kd">function</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>          <span class="c1">// get current value as starting point for tween animation</span>
</span><span class='line'>          <span class="kd">var</span> <span class="nx">currentValue</span> <span class="o">=</span> <span class="o">+</span><span class="k">this</span><span class="p">.</span><span class="nx">textContent</span><span class="p">;</span>
</span><span class='line'>          <span class="c1">// create interpolator and do not show nasty floating numbers</span>
</span><span class='line'>          <span class="kd">var</span> <span class="nx">interpolator</span> <span class="o">=</span> <span class="nx">d3</span><span class="p">.</span><span class="nx">interpolateRound</span><span class="p">(</span> <span class="nx">currentValue</span><span class="p">,</span> <span class="mi">10</span> <span class="p">);</span>
</span><span class='line'>
</span><span class='line'>          <span class="c1">// this returned function will be called a couple</span>
</span><span class='line'>          <span class="c1">// of times to animate anything you want inside</span>
</span><span class='line'>          <span class="c1">// of your custom tween</span>
</span><span class='line'>          <span class="k">return</span> <span class="kd">function</span><span class="p">(</span> <span class="nx">t</span> <span class="p">)</span> <span class="p">{</span>
</span><span class='line'>            <span class="c1">// set new value to current text element</span>
</span><span class='line'>            <span class="k">this</span><span class="p">.</span><span class="nx">textContent</span> <span class="o">=</span> <span class="nx">interpolator</span><span class="p">(</span> <span class="nx">t</span> <span class="p">);</span>
</span><span class='line'>          <span class="p">};</span>
</span><span class='line'>        <span class="p">}</span> <span class="p">);</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'><span class="p">}</span> <span class="p">)(</span> <span class="nx">d3</span> <span class="p">);</span>
</span></code></pre></td></tr></table></div></figure>


<p>The first argument of the <code>tween</code> function represents the name of your new custom <code>tween</code>. The second argument is a function that should behave like a factory and return another function. The goal of this factory function is to create (and return) a function that is able to interpolate data and to calculate values depending on the <code>current normalized time</code>. The <code>current normalize time</code> are floating values from zero to one. Zero represents the starting point and one represents the end point of your tween animation.</p>

<p>This means that this return function must be able to do something depending on the <code>current normalized time</code>(see line 23).
<code>d3</code> already offers a lot of functions to solve exactly this problem &ndash; the so called <code>interpolators</code>. In this example I made usage of <code>interpolatorRound</code>. Let us check what that stands for and see what is actually doing by playing just a bit around in the JavaScript console.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="c1">// creating new interpolator</span>
</span><span class='line'><span class="kd">var</span> <span class="nx">i</span> <span class="o">=</span> <span class="nx">d3</span><span class="p">.</span><span class="nx">interpolateRound</span><span class="p">(</span> <span class="mi">0</span><span class="p">,</span> <span class="mi">100</span> <span class="p">);</span>
</span><span class='line'><span class="o">&gt;</span> <span class="kc">undefined</span>
</span><span class='line'><span class="c1">// using 0.25 as example for &#39;current normalized time&#39; -&gt; animation start</span>
</span><span class='line'><span class="nx">i</span><span class="p">(</span> <span class="mi">0</span> <span class="p">)</span>
</span><span class='line'><span class="o">&gt;</span> <span class="mi">0</span>
</span><span class='line'><span class="c1">// using 0.25 as example for &#39;current normalized time&#39;</span>
</span><span class='line'><span class="nx">i</span><span class="p">(</span> <span class="mf">0.25</span> <span class="p">)</span>
</span><span class='line'><span class="o">&gt;</span> <span class="mi">25</span>
</span><span class='line'><span class="c1">// using 0.5 as example for &#39;current normalized time&#39;</span>
</span><span class='line'><span class="nx">i</span><span class="p">(</span> <span class="mf">0.5</span> <span class="p">)</span>
</span><span class='line'><span class="o">&gt;</span> <span class="mi">50</span>
</span><span class='line'><span class="c1">// using 0.75 as example for &#39;current normalized time&#39;</span>
</span><span class='line'><span class="nx">i</span><span class="p">(</span> <span class="mf">0.75</span> <span class="p">)</span>
</span><span class='line'><span class="o">&gt;</span> <span class="mi">75</span>
</span><span class='line'><span class="c1">// using 1 as example for &#39;current normalized time&#39; -&gt; animation end</span>
</span><span class='line'><span class="nx">i</span><span class="p">(</span> <span class="mi">1</span> <span class="p">)</span>
</span><span class='line'><span class="o">&gt;</span> <span class="mi">100</span>
</span></code></pre></td></tr></table></div></figure>


<p><code>d3</code> offers a lot of different interpolators. In our case I used <code>interpolatorRound</code>, because it returns the nearest integer value and I do not want to see crazy floating values in our custom <code>tween</code>.</p>

<p>Available interpolators are:</p>

<ul>
<li><code>d3.interpolatNumber</code></li>
<li><code>d3.interpolatRound</code></li>
<li><code>d3.interpolatString</code></li>
<li><code>d3.interpolatRgb</code></li>
<li><code>d3.interpolatHsl</code></li>
<li><code>d3.interpolatLab</code></li>
<li><code>d3.interpolatHcl</code></li>
<li><code>d3.interpolatArray</code></li>
<li><code>d3.interpolatObject</code></li>
<li><code>d3.interpolatTransform</code></li>
<li><code>d3.interpolatZoom</code></li>
</ul>


<p>As you see there are quite a few and they will matched your needs in most of the cases. ;)</p>

<p>This works fine. The next step is to create a interpolator with the current text value as starting point and with our desired value as end point. This is easily achievable, because the factory is executed in the context of the depending element. That means, that we can easily get the current value by using <code>this.textContent</code>(see line 16).</p>

<p>But still the question remains, what is going on to animate this particalur text node.
To stick everything together <code>d3</code> will execute the <code>factory</code> once and is expecting a function as return value. This function will be executed with a ton of values from zero to one (argument <code>t</code> in the example) later during the <code>tween</code>. These values represent the current progress of the transition. This returned function will additionally be executed in the context of the particalur element(in our case the text node) and exactly this becomes really handy. So we can also set the value easily via <code>this.textContent</code>(see line 25).</p>

<p>To make our circles a bit more fun let us add a transition to the <code>mouseenter</code> and <code>mouseleave</code> events. For that we could duplicate the code which kicks off the transition at the beginning and set a different value to <code>d3.interpolateRound</code>, but code duplication is never a good idea. So let us implement a nice little helper function.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="p">;(</span> <span class="kd">function</span><span class="p">(</span> <span class="nx">d3</span> <span class="p">)</span> <span class="p">{</span>
</span><span class='line'>  <span class="kd">var</span> <span class="nx">d3container</span> <span class="o">=</span> <span class="nx">d3</span><span class="p">.</span><span class="nx">select</span><span class="p">(</span> <span class="s1">&#39;.container&#39;</span> <span class="p">);</span>
</span><span class='line'>  <span class="kd">var</span> <span class="nx">svg</span> <span class="o">=</span> <span class="nx">d3container</span><span class="p">.</span><span class="nx">append</span><span class="p">(</span> <span class="s1">&#39;svg&#39;</span> <span class="p">);</span>
</span><span class='line'>  <span class="kd">var</span> <span class="nx">dots</span> <span class="o">=</span> <span class="nx">svg</span><span class="p">.</span><span class="nx">append</span><span class="p">(</span> <span class="s1">&#39;g&#39;</span> <span class="p">);</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">for</span> <span class="p">(</span> <span class="kd">var</span> <span class="nx">i</span> <span class="o">=</span> <span class="mi">1</span><span class="p">;</span> <span class="nx">i</span> <span class="o">&lt;=</span> <span class="mi">5</span><span class="p">;</span> <span class="o">++</span><span class="nx">i</span> <span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="nx">dots</span><span class="p">.</span><span class="nx">append</span><span class="p">(</span> <span class="s1">&#39;text&#39;</span> <span class="p">)</span>
</span><span class='line'>        <span class="p">.</span><span class="nx">text</span><span class="p">(</span> <span class="mi">0</span> <span class="p">)</span>
</span><span class='line'>        <span class="p">.</span><span class="nx">attr</span><span class="p">(</span> <span class="s1">&#39;text-anchor&#39;</span><span class="p">,</span> <span class="s1">&#39;middle&#39;</span> <span class="p">)</span>
</span><span class='line'>        <span class="p">.</span><span class="nx">attr</span><span class="p">(</span> <span class="s1">&#39;x&#39;</span><span class="p">,</span>  <span class="mi">150</span> <span class="p">)</span>
</span><span class='line'>        <span class="p">.</span><span class="nx">attr</span><span class="p">(</span> <span class="s1">&#39;y&#39;</span><span class="p">,</span> <span class="nx">i</span> <span class="o">*</span> <span class="mi">25</span> <span class="p">)</span>
</span><span class='line'>        <span class="p">.</span><span class="nx">on</span><span class="p">(</span> <span class="s1">&#39;mouseenter&#39;</span><span class="p">,</span> <span class="kd">function</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>          <span class="nx">d3</span><span class="p">.</span><span class="nx">select</span><span class="p">(</span> <span class="k">this</span> <span class="p">)</span>
</span><span class='line'>            <span class="p">.</span><span class="nx">transition</span><span class="p">()</span>
</span><span class='line'>            <span class="p">.</span><span class="nx">tween</span><span class="p">(</span> <span class="s1">&#39;text&#39;</span><span class="p">,</span> <span class="nx">tweenText</span><span class="p">(</span> <span class="mi">50</span> <span class="p">)</span> <span class="p">);</span>
</span><span class='line'>        <span class="p">}</span> <span class="p">)</span>
</span><span class='line'>        <span class="p">.</span><span class="nx">on</span><span class="p">(</span> <span class="s1">&#39;mouseleave&#39;</span><span class="p">,</span> <span class="kd">function</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>          <span class="nx">d3</span><span class="p">.</span><span class="nx">select</span><span class="p">(</span> <span class="k">this</span> <span class="p">)</span>
</span><span class='line'>            <span class="p">.</span><span class="nx">transition</span><span class="p">()</span>
</span><span class='line'>            <span class="p">.</span><span class="nx">tween</span><span class="p">(</span> <span class="s1">&#39;text&#39;</span><span class="p">,</span> <span class="nx">tweenText</span><span class="p">(</span> <span class="mi">10</span> <span class="p">)</span> <span class="p">);</span>
</span><span class='line'>        <span class="p">}</span> <span class="p">)</span>
</span><span class='line'>        <span class="p">.</span><span class="nx">transition</span><span class="p">()</span>
</span><span class='line'>        <span class="p">.</span><span class="nx">delay</span><span class="p">(</span> <span class="mi">300</span> <span class="o">*</span> <span class="nx">i</span> <span class="p">)</span>
</span><span class='line'>        <span class="p">.</span><span class="nx">tween</span><span class="p">(</span> <span class="s1">&#39;text&#39;</span><span class="p">,</span> <span class="nx">tweenText</span><span class="p">(</span> <span class="mi">10</span> <span class="p">)</span> <span class="p">);</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>  <span class="cm">/**</span>
</span><span class='line'><span class="cm">   * Tween functions</span>
</span><span class='line'><span class="cm">   */</span>
</span><span class='line'>  <span class="kd">function</span> <span class="nx">tweenText</span><span class="p">(</span> <span class="nx">newValue</span> <span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">return</span> <span class="kd">function</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>      <span class="c1">// get current value as starting point for tween animation</span>
</span><span class='line'>      <span class="kd">var</span> <span class="nx">currentValue</span> <span class="o">=</span> <span class="o">+</span><span class="k">this</span><span class="p">.</span><span class="nx">textContent</span><span class="p">;</span>
</span><span class='line'>      <span class="c1">// create interpolator and do not show nasty floating numbers</span>
</span><span class='line'>      <span class="kd">var</span> <span class="nx">i</span> <span class="o">=</span> <span class="nx">d3</span><span class="p">.</span><span class="nx">interpolateRound</span><span class="p">(</span> <span class="nx">currentValue</span><span class="p">,</span> <span class="nx">newValue</span> <span class="p">);</span>
</span><span class='line'>
</span><span class='line'>      <span class="k">return</span> <span class="kd">function</span><span class="p">(</span><span class="nx">t</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="k">this</span><span class="p">.</span><span class="nx">textContent</span> <span class="o">=</span> <span class="nx">i</span><span class="p">(</span><span class="nx">t</span><span class="p">);</span>
</span><span class='line'>      <span class="p">};</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'><span class="p">}</span> <span class="p">)(</span> <span class="nx">d3</span> <span class="p">);</span>
</span></code></pre></td></tr></table></div></figure>


<p>This way it is relatively clean and we have no code duplication in our code. You can check the working result below.</p>

<pre class="codepen" data-height="400" data-type="result" data-href="HpFiz" data-user="stefanjudis"><code> </code></pre>


<script async src="http://codepen.io:/assets/embed/ei.js"></script>


<p>So far so good. Let us have a look at a bit more complicated looking <code>tween</code>. In both charts there are animated d3 areas, which I animated using <code>tween</code>, too.</p>

<h3>Animating areas with <code>attrTween</code></h3>

<pre class="codepen" data-height="400" data-type="result" data-href="nuagm" data-user="stefanjudis"><code> </code></pre>


<script async src="http://codepen.io:/assets/embed/ei.js"></script>


<p>So let us check the code for that. It basically works the same. ;)</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
<span class='line-number'>58</span>
<span class='line-number'>59</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="p">;(</span> <span class="kd">function</span><span class="p">(</span> <span class="nx">d3</span> <span class="p">)</span> <span class="p">{</span>
</span><span class='line'>  <span class="kd">var</span> <span class="nx">data</span> <span class="o">=</span> <span class="p">[</span>
</span><span class='line'>    <span class="p">{</span>
</span><span class='line'>      <span class="nx">date</span>  <span class="o">:</span> <span class="s1">&#39;2006-02-22&#39;</span><span class="p">,</span>
</span><span class='line'>      <span class="nx">value</span> <span class="o">:</span> <span class="mi">950</span>
</span><span class='line'>    <span class="p">},</span>
</span><span class='line'>    <span class="c1">// ...</span>
</span><span class='line'>    <span class="c1">// more data</span>
</span><span class='line'>    <span class="c1">// ...</span>
</span><span class='line'>    <span class="p">{</span>
</span><span class='line'>      <span class="nx">date</span>  <span class="o">:</span> <span class="s1">&#39;2006-08-22&#39;</span><span class="p">,</span>
</span><span class='line'>      <span class="nx">value</span> <span class="o">:</span> <span class="mi">1000</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>  <span class="p">];</span>
</span><span class='line'>
</span><span class='line'>  <span class="c1">//</span>
</span><span class='line'>  <span class="c1">// lot of setup code here</span>
</span><span class='line'>  <span class="c1">//</span>
</span><span class='line'>
</span><span class='line'>  <span class="c1">// set up value to start animation</span>
</span><span class='line'>  <span class="kd">var</span> <span class="nx">startData</span> <span class="o">=</span> <span class="nx">data</span><span class="p">.</span><span class="nx">map</span><span class="p">(</span> <span class="kd">function</span><span class="p">(</span> <span class="nx">datum</span> <span class="p">)</span> <span class="p">{</span>
</span><span class='line'>                    <span class="k">return</span> <span class="p">{</span>
</span><span class='line'>                      <span class="nx">date</span>  <span class="o">:</span> <span class="nx">datum</span><span class="p">.</span><span class="nx">date</span><span class="p">,</span>
</span><span class='line'>                      <span class="nx">value</span> <span class="o">:</span> <span class="mi">0</span>
</span><span class='line'>                    <span class="p">};</span>
</span><span class='line'>                  <span class="p">}</span> <span class="p">);</span>
</span><span class='line'>
</span><span class='line'>  <span class="c1">//</span>
</span><span class='line'>  <span class="c1">// a bit more stuff here :)</span>
</span><span class='line'>  <span class="c1">//</span>
</span><span class='line'>
</span><span class='line'>  <span class="c1">// Add the area path.</span>
</span><span class='line'>  <span class="nx">svg</span><span class="p">.</span><span class="nx">append</span><span class="p">(</span> <span class="s1">&#39;path&#39;</span> <span class="p">)</span>
</span><span class='line'>      <span class="c1">// set data</span>
</span><span class='line'>      <span class="p">.</span><span class="nx">datum</span><span class="p">(</span> <span class="nx">startData</span> <span class="p">)</span>
</span><span class='line'>      <span class="c1">// apply area depending on data</span>
</span><span class='line'>      <span class="p">.</span><span class="nx">attr</span><span class="p">(</span> <span class="s1">&#39;d&#39;</span><span class="p">,</span> <span class="nx">area</span> <span class="p">)</span>
</span><span class='line'>      <span class="c1">// create transition</span>
</span><span class='line'>      <span class="p">.</span><span class="nx">transition</span><span class="p">()</span>
</span><span class='line'>      <span class="c1">// set duration of transition</span>
</span><span class='line'>      <span class="p">.</span><span class="nx">duration</span><span class="p">(</span> <span class="mi">500</span> <span class="p">)</span>
</span><span class='line'>      <span class="c1">// define tween for attribute &#39;d&#39;</span>
</span><span class='line'>      <span class="p">.</span><span class="nx">attrTween</span><span class="p">(</span> <span class="s1">&#39;d&#39;</span><span class="p">,</span> <span class="kd">function</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>        <span class="c1">// create interpolator which will</span>
</span><span class='line'>        <span class="c1">// be able to handle `current normalized time`</span>
</span><span class='line'>        <span class="kd">var</span> <span class="nx">interpolator</span> <span class="o">=</span> <span class="nx">d3</span><span class="p">.</span><span class="nx">interpolateArray</span><span class="p">(</span> <span class="nx">startData</span><span class="p">,</span> <span class="nx">data</span> <span class="p">);</span>
</span><span class='line'>
</span><span class='line'>        <span class="c1">// function called several times</span>
</span><span class='line'>        <span class="c1">// with values from 0.0 to 1.0</span>
</span><span class='line'>        <span class="k">return</span> <span class="kd">function</span><span class="p">(</span> <span class="nx">t</span> <span class="p">)</span> <span class="p">{</span>
</span><span class='line'>          <span class="c1">// calculate needed values to</span>
</span><span class='line'>          <span class="c1">// represent &#39;area&#39; path with interpolated Array</span>
</span><span class='line'>          <span class="c1">//</span>
</span><span class='line'>          <span class="c1">// return it to set it directly to attribute &#39;d&#39;</span>
</span><span class='line'>          <span class="k">return</span> <span class="nx">area</span><span class="p">(</span> <span class="nx">interpolator</span><span class="p">(</span> <span class="nx">t</span> <span class="p">)</span> <span class="p">);</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>      <span class="p">}</span> <span class="p">);</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'><span class="p">}</span> <span class="p">)(</span> <span class="nx">d3</span> <span class="p">);</span>
</span></code></pre></td></tr></table></div></figure>


<p>Let us assume you already have set up an area and it is already shown in your SVG &ndash; I will not go into detail about this topic here, because it could fill its own blog post. This area is based on an Array representing the data. The solution for animating this I found so far is to duplicate the data via <code>map</code> and set all the values to zero(see line 21). It does not have to be zero though &ndash; these changed values will basically be the starting point of your animation.</p>

<p>In case of the example code you see <code>startData</code>, which represents the animation start and <code>data</code> which represents the animation end.</p>

<p>You have to define the transition and set a duration of 500ms. That is all to be ready to go and add our <code>tween</code>.</p>

<p>To animate everythings the <code>d3</code> method <code>attrTween</code> is used. <code>attrTween</code> works mostly the same as <code>tween</code> with one difference. The wished animated attribute is modified directly when using <code>attrTween</code>.</p>

<p><code>attrTween</code> expects the attribute, which should be animated, and a factory as arguments. This factory has to return a function that is able to deal with the <code>current normalized time</code>(values from <code>0.0</code> to <code>1.0</code>).</p>

<p>So how does this work with two Arrays?</p>

<p><code>d3</code> has already an interpolator for that integrated &ndash; <code>d3.interpolateArray</code>.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="kd">var</span> <span class="nx">i</span> <span class="o">=</span> <span class="nx">d3</span><span class="p">.</span><span class="nx">interpolateArray</span><span class="p">(</span> <span class="p">[</span> <span class="mi">0</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="mi">0</span> <span class="p">],</span> <span class="p">[</span> <span class="mi">100</span><span class="p">,</span> <span class="mi">100</span><span class="p">,</span> <span class="mi">100</span> <span class="p">]</span> <span class="p">);</span>
</span><span class='line'><span class="o">&gt;</span> <span class="kc">undefined</span>
</span><span class='line'><span class="nx">i</span> <span class="p">(</span> <span class="mi">0</span> <span class="p">)</span>
</span><span class='line'><span class="o">&gt;</span> <span class="p">[</span><span class="mi">0</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="mi">0</span><span class="p">]</span>
</span><span class='line'><span class="nx">i</span><span class="p">(</span> <span class="mf">0.25</span> <span class="p">)</span>
</span><span class='line'><span class="o">&gt;</span> <span class="p">[</span><span class="mi">25</span><span class="p">,</span> <span class="mi">25</span><span class="p">,</span> <span class="mi">25</span><span class="p">]</span>
</span><span class='line'><span class="nx">i</span><span class="p">(</span> <span class="mf">0.33</span> <span class="p">)</span>
</span><span class='line'><span class="o">&gt;</span> <span class="p">[</span><span class="mi">33</span><span class="p">,</span> <span class="mi">33</span><span class="p">,</span> <span class="mi">33</span><span class="p">]</span>
</span></code></pre></td></tr></table></div></figure>


<p>This returned function then has to return a value that represents the depending attribute(<code>d</code> in this case &ndash; see line 55). The returned value will be set to the attribute directly. This way there is no need to use <code>this</code> or to modify the element by yourself. You return the desired value and that is it. ;)</p>

<h3>Sum up</h3>

<p>Once you understood how the concept of <code>tweening</code> works, it not that hard. But the beginning is tough. I know that, in my case it took several runs to get it. ;)</p>

<p>Important things to remember are:</p>

<ul>
<li>use <code>tween</code> or <code>attrTween</code> to modify your elements</li>
<li>set up a <code>factory</code> correctly and pass it to the <code>tween</code> function</li>
<li>make sure the returned function works properly with passed in <code>current normalized time</code> values</li>
</ul>


<p>And that is it for today. Maybe this helps someone. This concept is really hard to describe, so I hope it is kind of understandable. You can play around with every example on CodePen and hopefully you will enjoy <code>tweening</code> as much as I do later on. Thanks for reading. :)</p>
<div class='octopress-authorbox'>
	<div class="author-pic">
		<img src="http://www.gravatar.com/avatar/22725c2d3eb331146549bf0d5d3c050c" alt="Stefan Judis" />
	</div>
	
	<div class="author-about">
		<h3>Stefan Judis</h3>
		<p>Frontend lover</p>
		<ul class="author-links">
			
			<li>
			<a href="http://twitter.com/stefanjudis">@stefanjudis</a>
			</li>
			
			
		</ul>
	</div>
</div>]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Import once in Sass the 'Foundation way']]></title>
    <link href="http://4waisenkinder.github.io/blog/2014/03/06/import-once-in-sass-the-foundation-way/"/>
    <updated>2014-03-06T22:52:00+01:00</updated>
    <id>http://4waisenkinder.github.io/blog/2014/03/06/import-once-in-sass-the-foundation-way</id>
    <content type="html"><![CDATA[<p>Currently I am working on a huge so called &ldquo;redesign&rdquo;, which means to make a big e-commerce plattform responsive. But it is not only about fiddling a few media queries into some existant CSS. For me that is the perfect opportunity to clean up everything and build up a nice and modular CSS architecture. Each component separated into its own file. Margins, paddings, widths, colors, etc. controlled by a main config file. Maintainable and easy to work with. The tech stack is quite modern, so that I had the perfect basement to do fancy stuff.<!-- more --></p>

<p>I decided to include the <a href="http://foundation.zurb.com/">Foundation front-end framework</a> into our stack and started playing around with it. No matter, if you want to use all their styles or just a few components (the <code>block-grid</code> is awesome by the way) the source code is really worth a look. It is highly configurable and easily to integrate next to your own components.</p>

<p>Any complex system consists of tons of little components. When starting to model them in a CSS architecture multiple dependencies come up rather quickly. <a href="https://twitter.com/brad_frost">Brad Frost</a> describes this principle really good in his article <a href="http://bradfrostweb.com/blog/post/atomic-web-design/">Atomic Design</a>. Basically it&rsquo;s really simple.</p>

<p>Let us say you build up a button, which is an in itself closed unit. Nice! After that you start building up widgets, that need the styles of that particular button. No problem &ndash; you can easily <code>import</code> it via the already included Sass function. But unfortunately it now becomes tricky, when you start developing your next wigdet, that also depends on your shiny button.</p>

<p>Here is some example code.</p>

<p>File : <em>components/buttons/_fancyButton.scss</em></p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='css'><span class='line'><span class="nc">.fancyButton</span> <span class="p">{</span>
</span><span class='line'>  <span class="k">color</span> <span class="o">:</span> <span class="nb">blue</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>File : <em>components/_widgetA.scss</em></p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='css'><span class='line'><span class="k">@import</span>
</span><span class='line'>  <span class="s2">&quot;components/buttons/fancyButton&quot;</span><span class="p">;</span>
</span></code></pre></td></tr></table></div></figure>


<p>File : <em>components/_widgetB.scss</em></p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='css'><span class='line'><span class="k">@import</span>
</span><span class='line'>  <span class="s2">&quot;components/buttons/fancyButton&quot;</span><span class="p">;</span>
</span></code></pre></td></tr></table></div></figure>


<p>File : <em>styles.scss</em></p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='css'><span class='line'><span class="k">@import</span>
</span><span class='line'>  <span class="s2">&quot;components/widgetA&quot;</span><span class="o">,</span>
</span><span class='line'>  <span class="s2">&quot;components/widgetB&quot;</span><span class="p">;</span>
</span></code></pre></td></tr></table></div></figure>


<p>Generated file : <em>styles.css</em></p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='css'><span class='line'><span class="nc">.fancyButton</span> <span class="p">{</span>
</span><span class='line'>  <span class="k">color</span><span class="o">:</span> <span class="nb">blue</span><span class="p">;</span> <span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="nc">.fancyButton</span> <span class="p">{</span>
</span><span class='line'>  <span class="k">color</span><span class="o">:</span> <span class="nb">blue</span><span class="p">;</span> <span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>Sass will now include the same file twice and you end up with a doubled set of CSS rules in your generated Stylesheet. The more components you have, the worse it gets. Talking about this problem my friend <a href="https://google.com/+TomaszStryjewski">Tomasz</a> pointed me to the direction of a <a href="https://github.com/zurb/foundation/blob/master/scss/foundation/_functions.scss#L8">Foundation mixin</a> solving exactly this use case.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
</pre></td><td class='code'><pre><code class='css'><span class='line'><span class="o">//</span> <span class="nt">IMPORT</span> <span class="nt">ONCE</span>
</span><span class='line'><span class="o">//</span> <span class="nt">We</span> <span class="nt">use</span> <span class="nt">this</span> <span class="nt">to</span> <span class="nt">prevent</span> <span class="nt">styles</span> <span class="nt">from</span> <span class="nt">being</span> <span class="nt">loaded</span> <span class="nt">multiple</span> <span class="nt">times</span> <span class="nt">for</span> <span class="nt">compenents</span> <span class="nt">that</span> <span class="nt">rely</span> <span class="nt">on</span> <span class="nt">other</span> <span class="nt">components</span><span class="o">.</span>
</span><span class='line'><span class="err">$</span><span class="nt">modules</span><span class="o">:</span> <span class="o">()</span> <span class="o">!</span><span class="nt">default</span><span class="o">;</span>
</span><span class='line'><span class="k">@mixin</span> <span class="nt">exports</span><span class="o">(</span><span class="err">$</span><span class="nt">name</span><span class="o">)</span> <span class="p">{</span>
</span><span class='line'>  <span class="o">//</span> <span class="nt">check</span> <span class="nt">if</span> <span class="nt">code</span> <span class="nt">with</span> <span class="nt">name</span> <span class="nt">is</span> <span class="nt">already</span> <span class="nt">stored</span> <span class="nt">inside</span> <span class="nt">of</span> <span class="err">$</span><span class="nt">modules</span>
</span><span class='line'>  <span class="k">@if</span> <span class="o">(</span><span class="nt">index</span><span class="o">(</span><span class="err">$</span><span class="nt">modules</span><span class="o">,</span> <span class="err">$</span><span class="nt">name</span><span class="o">)</span> <span class="o">==</span> <span class="nt">false</span><span class="o">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="o">//</span> <span class="nt">if</span> <span class="nt">not</span> <span class="nt">push</span> <span class="nt">it</span> <span class="nt">into</span> <span class="nt">the</span> <span class="nt">list</span>
</span><span class='line'>    <span class="err">$</span><span class="nt">modules</span><span class="o">:</span> <span class="nt">append</span><span class="o">(</span><span class="err">$</span><span class="nt">modules</span><span class="o">,</span> <span class="err">$</span><span class="nt">name</span><span class="o">);</span>
</span><span class='line'>    <span class="o">//</span> <span class="nt">include</span> <span class="nt">code</span> <span class="nt">that</span> <span class="nt">particular</span> <span class="nt">code</span>
</span><span class='line'>    <span class="k">@content</span><span class="p">;</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>The logic included here is not magically, but it shows a few really nice features of Sass, which I for example do not use on a daily basis. The first thing to notice is the assignment of a so called <code>List</code> with the variable named <code>$modules</code>. <a href="http://sass-lang.com/documentation/file.SASS_REFERENCE.html#lists">Lists in Sass</a> behave kind of like an Array with String values and are defined as follows:</p>

<blockquote><p>Lists are just a series of other values, separated by either spaces or commas.</p></blockquote>

<p>It is assigned with the <code>!default</code> flag to not overwrite an already existing <code>$modules</code> variable, which could easily happen, by importing the particular file twice.</p>

<p><strong>Side note</strong> : <em>Variables with null values are treated as unassigned by !default</em> and will be overwritten.</p>

<p>After that a <a href="http://sass-lang.com/documentation/file.SASS_REFERENCE.html#defining_a_mixin">mixin</a> with the name <code>exports</code> is defined. If you do not know mixins, they are according to Sass documentation defined as follows:</p>

<blockquote><p>Mixins allow you to define styles that can be re-used throughout the stylesheet without needing to resort to non-semantic classes like .float-left. Mixins can also contain full CSS rules, and anything else allowed elsewhere in a Sass document. They can even take arguments which allows you to produce a wide variety of styles with very few mixins.</p></blockquote>

<p>This mixin now accepts one argument which represents the actual name of the component. It is used to &ldquo;register&rdquo; new code.
First of all it checks if there was already a component (or whatever valid Sass code you like) with the same name included in <code>$modules</code>using the <a href="http://sass-lang.com/documentation/Sass/Script/Functions.html#index-instance_method">index</a> function provided by Sass lists.</p>

<p><strong>Side note</strong> : <code>index</code> either returns the index of the value or <code>false</code>.</p>

<p>If the name of the snippet is not included inside of the list it includes the particalar code and <a href="http://sass-lang.com/documentation/Sass/Script/Functions.html#append-instance_method">appends</a> a new value to <code>$modules</code>.
If the name is already inside of the <code>$modules</code> list it just ignores it and prevents including the same code multiple times by just doing nothing and going on.</p>

<p>The rebuilt version using this mixin looks then as follows.</p>

<p>File : <em>helpers/_functions.scss</em></p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='css'><span class='line'><span class="err">$</span><span class="nt">modules</span><span class="o">:</span> <span class="o">()</span> <span class="o">!</span><span class="nt">default</span><span class="o">;</span>
</span><span class='line'><span class="k">@mixin</span> <span class="nt">exports</span><span class="o">(</span><span class="err">$</span><span class="nt">name</span><span class="o">)</span> <span class="p">{</span>
</span><span class='line'>  <span class="k">@if</span> <span class="o">(</span><span class="nt">index</span><span class="o">(</span><span class="err">$</span><span class="nt">modules</span><span class="o">,</span> <span class="err">$</span><span class="nt">name</span><span class="o">)</span> <span class="o">==</span> <span class="nt">false</span><span class="o">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="err">$</span><span class="nt">modules</span><span class="o">:</span> <span class="nt">append</span><span class="o">(</span><span class="err">$</span><span class="nt">modules</span><span class="o">,</span> <span class="err">$</span><span class="nt">name</span><span class="o">)</span> <span class="o">!</span><span class="nt">global</span><span class="o">;</span>
</span><span class='line'>    <span class="k">@content</span><span class="p">;</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>File : <em>components/buttons/_fancyButton.scss</em></p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='css'><span class='line'><span class="k">@include</span> <span class="nt">exports</span><span class="o">(</span><span class="s2">&quot;fancyButton&quot;</span><span class="o">)</span> <span class="p">{</span>
</span><span class='line'>  <span class="nc">.fancyButton</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">color</span> <span class="o">:</span> <span class="nb">blue</span><span class="p">;</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>File : <em>components/_widgetA.scss</em></p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='css'><span class='line'><span class="k">@import</span>
</span><span class='line'>  <span class="s2">&quot;./buttons/fancyButton&quot;</span><span class="p">;</span>
</span></code></pre></td></tr></table></div></figure>


<p>File : <em>components/_widgetB.scss</em></p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='css'><span class='line'><span class="k">@import</span>
</span><span class='line'>  <span class="s2">&quot;./buttons/fancyButton&quot;</span><span class="p">;</span>
</span></code></pre></td></tr></table></div></figure>


<p>File : <em>styles.scss</em></p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='css'><span class='line'><span class="k">@import</span>
</span><span class='line'>  <span class="s2">&quot;helpers/functions&quot;</span><span class="o">,</span>
</span><span class='line'>  <span class="s2">&quot;components/widgetA&quot;</span><span class="o">,</span>
</span><span class='line'>  <span class="s2">&quot;components/widgetB&quot;</span><span class="p">;</span>
</span></code></pre></td></tr></table></div></figure>


<p>Generated file : <em>styles.css</em></p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='css'><span class='line'><span class="nc">.fancyButton</span> <span class="p">{</span>
</span><span class='line'>  <span class="k">color</span><span class="o">:</span> <span class="nb">blue</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>Problem solved. :)
I generally do not use Sass for logical mixins or similar, but this shows perfectly what is possible. I definitely have to dig deeper into that. ;)</p>

<p>In my case of the &ldquo;redesign&rdquo; I wrapped all my components using this mixin and it works pretty well with ~30 components included in different stylesheets. Maybe that will help someone dealing with a lot of components. ;)</p>

<p>So that is it and thanks for reading.</p>
<div class='octopress-authorbox'>
	<div class="author-pic">
		<img src="http://www.gravatar.com/avatar/22725c2d3eb331146549bf0d5d3c050c" alt="Stefan Judis" />
	</div>
	
	<div class="author-about">
		<h3>Stefan Judis</h3>
		<p>Frontend lover</p>
		<ul class="author-links">
			
			<li>
			<a href="http://twitter.com/stefanjudis">@stefanjudis</a>
			</li>
			
			
		</ul>
	</div>
</div>]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[How to measure frontend performance with Grunt]]></title>
    <link href="http://4waisenkinder.github.io/blog/2013/12/22/how-to-measure-frontend-performance-with-phantomas-and-grunt/"/>
    <updated>2013-12-22T23:28:00+01:00</updated>
    <id>http://4waisenkinder.github.io/blog/2013/12/22/how-to-measure-frontend-performance-with-phantomas-and-grunt</id>
    <content type="html"><![CDATA[<p>When you are a frontend developer, you are on the constant journey to find the right tool to measure the performance of your site. Sure, there are the Developer Tools of your choice, <a href="https://developers.google.com/speed/pagespeed/">Google Pagespeed</a> or <a href="http://webpagetest.org">webpagespeed.org</a> available. And those tools are great (if you do not know them, you should definitely check them out), but for me it was always &ldquo;just&rdquo; nice to use these tools. They provide lots of useful information and I check them on a regular basis, but as far as I know, these tools do not provide a kind of timeline view of my daily work. They only give useful information to a given time &ndash; that is it. What I want to know, is how the site evolved after my latest deploy to production &hellip; <!-- more --></p>

<p>Did the size of CSS / JavaScript decrease or increase? How many Ajax requests are made on page load? How many DOM queries are executed? And how did my latest changes effect the overall performance of the site?</p>

<p>Sure, I could answer all these questions manually and could keep track of them in some way, but that is not in the nature of a developer, right? ;)</p>

<p>That is definitely a task that belongs to an automated process and should be done right after the deployment to production, so that I can check right away, what happened and how the production site changed.</p>

<p>Well, ( <strong>attention shameless self promotion</strong> ) &ndash; I wrote a <a href="http://gruntjs.com">Grunt</a> plugin called <a href="https://npmjs.org/package/grunt-phantomas">grunt-phantomas</a> to solve exactly that problem (preview of generated example results <a href="http://stefanjudis.github.io/grunt-phantomas/gruntjs/">here</a>).</p>

<p>Two weeks ago I discovered a NPM module called <a href="https://github.com/macbre/phantomas">Phantomas</a> and it absolutely blew my mind. It is a command line tool, which scans any site you like via <a href="http://phantomjs.org/">PhantomJS</a>. You can easily install it via <code>npm install -g phantomas</code> and after that, you are ready to go. To show how powerful this tool is, let us have a look at the by Phantomas given statistics of the <a href="http://gruntjs.com">Grunt site</a> as an example.</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
<span class='line-number'>58</span>
<span class='line-number'>59</span>
<span class='line-number'>60</span>
<span class='line-number'>61</span>
<span class='line-number'>62</span>
<span class='line-number'>63</span>
<span class='line-number'>64</span>
<span class='line-number'>65</span>
<span class='line-number'>66</span>
<span class='line-number'>67</span>
<span class='line-number'>68</span>
<span class='line-number'>69</span>
<span class='line-number'>70</span>
<span class='line-number'>71</span>
<span class='line-number'>72</span>
<span class='line-number'>73</span>
<span class='line-number'>74</span>
<span class='line-number'>75</span>
<span class='line-number'>76</span>
<span class='line-number'>77</span>
<span class='line-number'>78</span>
<span class='line-number'>79</span>
<span class='line-number'>80</span>
<span class='line-number'>81</span>
<span class='line-number'>82</span>
<span class='line-number'>83</span>
<span class='line-number'>84</span>
<span class='line-number'>85</span>
<span class='line-number'>86</span>
<span class='line-number'>87</span>
<span class='line-number'>88</span>
<span class='line-number'>89</span>
<span class='line-number'>90</span>
<span class='line-number'>91</span>
<span class='line-number'>92</span>
<span class='line-number'>93</span>
<span class='line-number'>94</span>
<span class='line-number'>95</span>
<span class='line-number'>96</span>
<span class='line-number'>97</span>
<span class='line-number'>98</span>
<span class='line-number'>99</span>
<span class='line-number'>100</span>
<span class='line-number'>101</span>
<span class='line-number'>102</span>
<span class='line-number'>103</span>
<span class='line-number'>104</span>
<span class='line-number'>105</span>
<span class='line-number'>106</span>
<span class='line-number'>107</span>
<span class='line-number'>108</span>
<span class='line-number'>109</span>
<span class='line-number'>110</span>
<span class='line-number'>111</span>
<span class='line-number'>112</span>
<span class='line-number'>113</span>
<span class='line-number'>114</span>
<span class='line-number'>115</span>
<span class='line-number'>116</span>
<span class='line-number'>117</span>
<span class='line-number'>118</span>
<span class='line-number'>119</span>
<span class='line-number'>120</span>
<span class='line-number'>121</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ phantomas --url http://gruntjs.com
</span><span class='line'>
</span><span class='line'>phantomas v0.9.0 metrics for &lt;http://gruntjs.com&gt;:
</span><span class='line'>
</span><span class='line'>* requests: 29
</span><span class='line'>* gzipRequests: 3
</span><span class='line'>* postRequests: 0
</span><span class='line'>* httpsRequests: 0
</span><span class='line'>* redirects: 0
</span><span class='line'>* notFound: 0
</span><span class='line'>* timeToFirstByte: 807
</span><span class='line'>* timeToLastByte: 833
</span><span class='line'>* bodySize: 179021
</span><span class='line'>* contentLength: 311187
</span><span class='line'>* ajaxRequests: 0
</span><span class='line'>* htmlCount: 1
</span><span class='line'>* htmlSize: 1151
</span><span class='line'>* cssCount: 2
</span><span class='line'>* cssSize: 1630
</span><span class='line'>* jsCount: 5
</span><span class='line'>* jsSize: 41272
</span><span class='line'>* jsonCount: 0
</span><span class='line'>* jsonSize: 0
</span><span class='line'>* imageCount: 21
</span><span class='line'>* imageSize: 134968
</span><span class='line'>* webfontCount: 0
</span><span class='line'>* webfontSize: 0
</span><span class='line'>* base64Count: 0
</span><span class='line'>* base64Size: 0
</span><span class='line'>* otherCount: 0
</span><span class='line'>* otherSize: 0
</span><span class='line'>* cacheHits: 3
</span><span class='line'>* cacheMisses: 0
</span><span class='line'>* cachingNotSpecified: 4
</span><span class='line'>* cachingTooShort: 2
</span><span class='line'>* cachingDisabled: 20
</span><span class='line'>* domains: 6
</span><span class='line'>* maxRequestsPerDomain: 21
</span><span class='line'>* medianRequestsPerDomain: 2
</span><span class='line'>* DOMqueries: 7
</span><span class='line'>* DOMqueriesById: 4
</span><span class='line'>* DOMqueriesByClassName: 0
</span><span class='line'>* DOMqueriesByTagName: 3
</span><span class='line'>* DOMqueriesByQuerySelectorAll: 0
</span><span class='line'>* DOMinserts: 4
</span><span class='line'>* DOMqueriesDuplicated: 2
</span><span class='line'>* eventsBound: 0
</span><span class='line'>* headersCount: 368
</span><span class='line'>* headersSentCount: 86
</span><span class='line'>* headersRecvCount: 282
</span><span class='line'>* headersSize: 12025
</span><span class='line'>* headersSentSize: 2989
</span><span class='line'>* headersRecvSize: 9036
</span><span class='line'>* documentWriteCalls: 1
</span><span class='line'>* evalCalls: 0
</span><span class='line'>* jQueryVersion:
</span><span class='line'>* jQueryOnDOMReadyFunctions: 0
</span><span class='line'>* jQuerySizzleCalls: 0
</span><span class='line'>* jsErrors: 0
</span><span class='line'>* assetsNotGzipped: 5
</span><span class='line'>* assetsWithQueryString: 4
</span><span class='line'>* smallImages: 3
</span><span class='line'>* multipleRequests: 0
</span><span class='line'>* timeToFirstCss: 878
</span><span class='line'>* timeToFirstJs: 1054
</span><span class='line'>* timeToFirstImage: 1860
</span><span class='line'>* onDOMReadyTime: 1339
</span><span class='line'>* onDOMReadyTimeEnd: 1340
</span><span class='line'>* windowOnLoadTime: 2386
</span><span class='line'>* windowOnLoadTimeEnd: 2387
</span><span class='line'>* httpTrafficCompleted: 3285
</span><span class='line'>* windowAlerts: 0
</span><span class='line'>* windowConfirms: 0
</span><span class='line'>* windowPrompts: 0
</span><span class='line'>* consoleMessages: 0
</span><span class='line'>* cookiesSent: 0
</span><span class='line'>* cookiesRecv: 354
</span><span class='line'>* domainsWithCookies: 1
</span><span class='line'>* documentCookiesLength: 193
</span><span class='line'>* documentCookiesCount: 4
</span><span class='line'>* bodyHTMLSize: 10809
</span><span class='line'>* iframesCount: 0
</span><span class='line'>* imagesWithoutDimensions: 16
</span><span class='line'>* commentsSize: 53
</span><span class='line'>* hiddenContentSize: 61
</span><span class='line'>* whiteSpacesSize: 4
</span><span class='line'>* DOMelementsCount: 197
</span><span class='line'>* DOMelementMaxDepth: 10
</span><span class='line'>* nodesWithInlineCSS: 0
</span><span class='line'>* globalVariables: 57
</span><span class='line'>* localStorageEntries: 0
</span><span class='line'>* smallestResponse: 35
</span><span class='line'>* biggestResponse: 29652
</span><span class='line'>* fastestResponse: 27
</span><span class='line'>* slowestResponse: 1057
</span><span class='line'>* medianResponse: 517
</span><span class='line'>
</span><span class='line'>First css received in 878 ms: &lt;http://fonts.googleapis.com/css?family=Lato:400,700&gt;
</span><span class='line'>First js received in 1054 ms: &lt;http://gruntjs.com/js/vendor/lib/modernizr.min.js&gt;
</span><span class='line'>First image received in 1860 ms: &lt;http://gruntjs.com/img/grunt-logo.svg&gt;
</span><span class='line'>Requests per domain:
</span><span class='line'> gruntjs.com: 21 request(s)
</span><span class='line'> www.google-analytics.com: 2 request(s)
</span><span class='line'> static.adzerk.net: 2 request(s)
</span><span class='line'> engine.adzerk.net: 2 request(s)
</span><span class='line'> fonts.googleapis.com: 1 request(s)
</span><span class='line'> c.jslogger.com: 1 request(s)
</span><span class='line'>
</span><span class='line'>Duplicated DOM queries (2):
</span><span class='line'> id "#azk48893": 4 queries
</span><span class='line'> tag name "script": 3 queries
</span><span class='line'>
</span><span class='line'>JavaScript globals (57): JSLogger, Modernizr, _gaq, _gat, ados, adosResults, adosRun, ados_addInlinePlacement, ados_addPlacement, ados_addPlacementObject, ados_add_placement, ados_async_load, ados_execPassback, ados_findPassback, ados_frameLoaded, ados_load, ados_loadDiv, ados_loadFIframe, ados_loadInline, ados_loadPassback, ados_loadResults, ados_log, ados_passback, ados_passbackFilled, ados_passbackWritePixel, ados_passback_next, ados_passback_receiveMessage, ados_refresh, ados_setDomain, ados_setKeywordCookie, ados_setKeywords, ados_setNoTrack, ados_setWriteResults, ados_timeoutExpired, ados_writePixel, azHtmlLoad, azInitExtension, azLoad, azRegisterExtension, azScriptExtensionLoad, azScriptInlineLoad, azScriptSRCLoad, azk48893_html_98280, azk48893_html_command_17656, azk48893_pixel_64108, azk48893_pixel_command_60057, cssLinkLoad, cssLoad, d, gaGlobal, html5, jslogger, p, s, z, zItems, zshow
</span><span class='line'>
</span><span class='line'>The smallest response (0.03 kB): &lt;http://www.google-analytics.com/__utm.gif?utmwv=5.4.6&utms=1&utmn=265814781&utmhn=gruntjs.com&utmcs=UTF-8&utmsr=1920x1080&utmvp=1024x1280&utmsc=32-bit&utmul=de-de&utmje=0&utmfl=-&utmdt=Grunt%3A%20The%20JavaScript%20Task%20Runner&utmhid=319494337&utmr=-&utmp=%2F&utmht=1387753136010&utmac=UA-34623937-1&utmcc=__utma%3D221136078.1297690710.1387753136.1387753136.1387753136.1%3B%2B__utmz%3D221136078.1387753136.1.1.utmcsr%3D(direct)%7Cutmccn%3D(direct)%7Cutmcmd%3D(none)%3B&utmu=q~&gt;
</span><span class='line'>The biggest response (28.96 kB): &lt;http://gruntjs.com/img/grunt-logo.svg&gt;
</span><span class='line'>
</span><span class='line'>The fastest response (27 ms): &lt;http://www.google-analytics.com/__utm.gif?utmwv=5.4.6&utms=1&utmn=265814781&utmhn=gruntjs.com&utmcs=UTF-8&utmsr=1920x1080&utmvp=1024x1280&utmsc=32-bit&utmul=de-de&utmje=0&utmfl=-&utmdt=Grunt%3A%20The%20JavaScript%20Task%20Runner&utmhid=319494337&utmr=-&utmp=%2F&utmht=1387753136010&utmac=UA-34623937-1&utmcc=__utma%3D221136078.1297690710.1387753136.1387753136.1387753136.1%3B%2B__utmz%3D221136078.1387753136.1.1.utmcsr%3D(direct)%7Cutmccn%3D(direct)%7Cutmcmd%3D(none)%3B&utmu=q~&gt;
</span><span class='line'>The slowest response (1057 ms): &lt;http://gruntjs.com/img/logo-bitovi.jpg&gt;
</span><span class='line'>
</span><span class='line'>Time spent on backend / frontend: 25% / 75%</span></code></pre></td></tr></table></div></figure>


<p>When I saw these metrics for the first time I really had to dance for joy. They are by far the most powerful metrics I have seen. I thought about these metrics a bit more and descided that Phantomas is perfect for an automated process to keep track of all that after every deployment. Grunt is included in most of the projects I do, so it was not a big question how to create an automated task. That was the moment when <a href="https://npmjs.org/package/grunt-phantomas">grunt-phantomas</a> was born and that is what it looks like today:</p>

<p><img class="left" src="http://4waisenkinder.github.io/images/blog/stefanjudis/grunt-phantomas.png" width="1892" height="676" title="Example stats of grunt-phantomas" alt="Example stats of grunt-phantomas"></p>

<p>All you have to do is to integrate the plugin in your Grunt process and then you are ready to go. You just have to define a folder, where the generated <code>index.html</code> and needed files will take place, as well as the wished url to get metrics for. And then run it with <code>grunt phantomas</code>. Any more needed information can be found in the <a href="https://npmjs.org/package/grunt-phantomas">official documentation</a>.</p>

<p>Additional possible options are by now the following:</p>

<ul>
<li>number of runs &ndash;> Phantomas will be executed multiple times to make the data more reliable</li>
<li>raw phantomas arguments &ndash;> Phantomas has lots of options &ndash; it is for example possible to block external scripts, what can become extremely handy when you have to deal with lots of marketing stuff (check <a href="https://github.com/macbre/phantomas">Phantomas Docs</a> for more a complete list of options)</li>
</ul>


<p>We integrated it into our CI system in my company already, so that I can really check all that data right after deployment and I&rsquo;m really excited about that. In my opinion this can be an extremely valuable tool and any feedback on it is more than welcome.</p>

<p>And that is it. Thanks for reading and merry Christmas. :)</p>
<div class='octopress-authorbox'>
	<div class="author-pic">
		<img src="http://www.gravatar.com/avatar/22725c2d3eb331146549bf0d5d3c050c" alt="Stefan Judis" />
	</div>
	
	<div class="author-about">
		<h3>Stefan Judis</h3>
		<p>Frontend lover</p>
		<ul class="author-links">
			
			<li>
			<a href="http://twitter.com/stefanjudis">@stefanjudis</a>
			</li>
			
			
		</ul>
	</div>
</div>]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Journey of discovery - the global 'window.performance' object]]></title>
    <link href="http://4waisenkinder.github.io/blog/2013/11/10/discovery-of-window-dot-performance-dot-timing/"/>
    <updated>2013-11-10T13:37:00+01:00</updated>
    <id>http://4waisenkinder.github.io/blog/2013/11/10/discovery-of-window-dot-performance-dot-timing</id>
    <content type="html"><![CDATA[<p>A few days ago I was attending the <a href="http://www.developer-conference.eu/">Developer Conference Hamburg</a>. Topics of the talks were nearly everything you could think of ( from Java to PHP to JavaScript and much more ). For me only frontend related talks were important and that was why I attended the talk of <a href="https://twitter.com/AloisReitbauer">Alois Reitbauer</a> with the title &ldquo;W3C Web Performance &ndash; A detailed overview&rdquo; ( slides of his talk can be found <a href="http://de.slideshare.net/AloisReitbauer/w3c-web-performance-a-detailed-overview">here</a> ).</p>

<p>And well, what should I say? He introduced the <code>window.performance</code> object to the audience and that absolutely blew my mind, <!-- more -->because there is really a lot of useful stuff in there and I did not know, that there was such an object available in the global window scope.</p>

<p>The performance object includes three additional objects, which provide information for different use cases:</p>

<ul>
<li>timing // instanceof PerformanceTiming &ndash;> true</li>
<li>navigation // instanceof PerformanceNavigation &ndash;> true</li>
<li>memory // instanceof MemoryInfo &ndash;> true</li>
</ul>


<p>I tend to check out the particular specification for something I discovered, so let us have a first look inside of <a href="https://dvcs.w3.org/hg/webperf/raw-file/tip/specs/NavigationTiming/Overview.html">the spec</a> for the Navigation Timing API, which is the base for the <code>window.performance.timing</code> and <code>window.performance.navigation</code> object.</p>

<p>It turned out, that the spec for <em>Navigation Timing</em> is work in progress. So please be careful, when dealing with stuff described in it. It may change in the future without a warning.</p>

<p>According to <a href="http://caniuse.com/#search=performance">caniuse.com</a> the Navigation Timing API is unfortunately not completely supported ( Safari is missing ), but it is definitely something to play around with. ;)</p>

<p>So let us check it out&hellip;</p>

<h3>Specification for <em>window.performance.timing</em> &ndash; &ldquo;<a href="https://dvcs.w3.org/hg/webperf/raw-file/tip/specs/NavigationTiming/Overview.html#sec-navigation-timing-interface">interface PerformanceTiming</a>&rdquo;</h3>

<h4>&ndash;> getting general performance information of current document</h4>

<p>Quote from the <em>Navigation Timing</em> specification:</p>

<blockquote><p>To address the need for complete information on user experience, this document introduces the PerformanceTiming interfaces. This interface allows JavaScript mechanisms to provide complete client-side latency measurements within applications. [&hellip;] This specification introduces an interface that provides Web applications with timing-related information.</p></blockquote>

<p>For me that sounds really awesome. Accessing timing information of the current document via JavaScript can be become really useful for any optimization of your site. Especially when you are dealing with the goal of presenting your site / your web application to your customers in less than 1000ms every metric you can get, can help you succeed and compare current and improved versions.</p>

<p>Got curious? Let us check it out! :)</p>

<p><img class="center" src="http://4waisenkinder.github.io/images/blog/stefanjudis/window-performance-timing.png" width="604" height="375" title="window.performance.timing object" alt="window.performance.timing object"></p>

<p>As you can see <code>window.performance.timing</code> includes a bunch of data that is predefined by the <code>interface PerformanceTiming</code>. The W3C provides inside of the spec itself a nice graphic to figure out, what these values stand for.</p>

<p><img class="center" src="https://dvcs.w3.org/hg/webperf/raw-file/tip/specs/NavigationTiming/timing-overview.png" width="911" height="555" title="window.performance.timing metrics" alt="window.performance.timing metrics"></p>

<h4>Example usage of data included in <em>window.performance.timing</em></h4>

<p>Let us start simple and try to figure out how long a document needs to load.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="c1">// cache it for shorter lines</span>
</span><span class='line'><span class="kd">var</span> <span class="nx">timing</span> <span class="o">=</span> <span class="nb">window</span><span class="p">.</span><span class="nx">performance</span><span class="p">.</span><span class="nx">timing</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// actual calculation</span>
</span><span class='line'><span class="kd">var</span> <span class="nx">loadingTime</span> <span class="o">=</span> <span class="nx">timing</span><span class="p">.</span><span class="nx">loadEventEnd</span> <span class="o">-</span> <span class="nx">timing</span><span class="p">.</span><span class="nx">navigationStart</span><span class="p">;</span>
</span></code></pre></td></tr></table></div></figure>


<p>No magic in there. You may say now &ldquo;<em>Well I can get this information inside of the DevTools</em>&rdquo; and well&hellip; that is true. But the nice thing of that is, that you are able to access this information easily and you could ( or rather should? ) log it to get a better idea of the actual performance and user experience of your visitors in their browsers.</p>

<p>To show a bit more interesting information than <code>loadingTime</code> and to make the usage of this a bit clearer I created a little snippet ( can be found <a href="https://gist.github.com/stefanjudis/7399022">here</a> ), which you can <a href="https://developers.google.com/chrome-developer-tools/docs/authoring-development-workflow#snippets">save inside of your Chrome DevTools</a>. With the usage of that we can easily display the main document metrics, when dealing with performance, without even touching the Network panel inside of the DevTools.</p>

<p><img class="center" src="http://4waisenkinder.github.io/images/blog/stefanjudis/consoleMetrics.png" width="533" height="204" title="document performance metrics shown in console" alt="document performance metrics shown in console"></p>

<h3>Specification for <em>window.performance.navigation</em> &ndash; &ldquo;<a href="https://dvcs.w3.org/hg/webperf/raw-file/tip/specs/NavigationTiming/Overview.html#sec-navigation-info-interface">interface PerformanceNavigation</a>&rdquo;</h3>

<h4>&ndash;> getting information of navigation context</h4>

<p>According to the <a href="https://dvcs.w3.org/hg/webperf/raw-file/tip/specs/NavigationTiming/Overview.html#performancenavigation">specification</a> the object <code>window.performance.navigation</code> only has to include two values, which give you information about the &ldquo;<em>last non-redirect navigation in the current browsing context</em>&rdquo;. Maybe you are thinking &ldquo;<em>I do not get it</em>&rdquo; like I did one hour ago, but it is not really complicated as well.</p>

<p>Let us have a look at an example:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="c1">// enter a site directly by entering</span>
</span><span class='line'><span class="c1">// the particular URL</span>
</span><span class='line'><span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span> <span class="nb">window</span><span class="p">.</span><span class="nx">performance</span><span class="p">.</span><span class="nx">navigation</span><span class="p">.</span><span class="nx">type</span> <span class="p">)</span> <span class="c1">// &#39;0&#39;</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// reload the page</span>
</span><span class='line'><span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span> <span class="nb">window</span><span class="p">.</span><span class="nx">performance</span><span class="p">.</span><span class="nx">navigation</span><span class="p">.</span><span class="nx">type</span> <span class="p">)</span> <span class="c1">// &#39;1&#39;</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// go back in the history and come</span>
</span><span class='line'><span class="c1">// back by going &#39;forward&#39; in history</span>
</span><span class='line'><span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span> <span class="nb">window</span><span class="p">.</span><span class="nx">performance</span><span class="p">.</span><span class="nx">navigation</span><span class="p">.</span><span class="nx">type</span> <span class="p">)</span> <span class="c1">// &#39;2&#39;</span>
</span></code></pre></td></tr></table></div></figure>


<p>To sum up the possibilities of the <code>type</code> attribute, it can have the following values:</p>

<ul>
<li>0 &ndash; site was directly entered</li>
<li>1 &ndash; site was reloaded</li>
<li>2 &ndash; site was entered via history</li>
<li>255 &ndash; none of the first three options matches</li>
</ul>


<p>Additionally the object includes <code>redirectCount</code>, which will give you unfortunatelly only &ldquo;nearly&rdquo; the information you would expect. It will only count redirects from the same origin. That means if you want to check if there was a redirect via a URL shortener for example, <code>redirectCount</code> will still return <code>0</code>. I can not say, what is the exact reason for that decision, but it is defined in the spec this way. For redirects on your site it just works fine. ;)</p>

<h3><em>window.performance.memory</em> &ndash; unfortunately no spec found</h3>

<h4>&ndash;> getting general information of JavsScript memory usage</h4>

<p>Unfortunately I was not able to find any specification for this included object ( maybe you can ping <a href="https://twitter.com/stefanjudis">me</a> and point me into the correct direction &ndash; I really would like to read it ). Googling for &lsquo;interface MemoryInfo&rsquo; or &lsquo;jsHeapSizeLimit spec&rsquo; unfortunately did not give me any useful information.</p>

<p>But anyway&hellip; I have not played around with memory profiling of JavaScript yet, but information about the current document can be found there &ndash; only wanted to mention it because it is included. ;)</p>

<p>Example of the <code>window.performance.memory</code> object:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span> <span class="nb">window</span><span class="p">.</span><span class="nx">performance</span><span class="p">.</span><span class="nx">memory</span> <span class="p">);</span>
</span><span class='line'><span class="c1">// will log :</span>
</span><span class='line'><span class="c1">// {</span>
</span><span class='line'><span class="c1">//   jsHeapSizeLimit : 793000000,</span>
</span><span class='line'><span class="c1">//   usedJSHeapSize  : 60300000,</span>
</span><span class='line'><span class="c1">//   totalJSHeapSize : 97400000</span>
</span><span class='line'><span class="c1">// }</span>
</span></code></pre></td></tr></table></div></figure>


<h3>Specification for <em>window.performance</em> &ndash; &ldquo;<a href="http://www.w3.org/TR/performance-timeline/#sec-window.performance-attribute">interface Performance</a>&rdquo;</h3>

<h4>&ndash;> getting detailed information of in document included ressources</h4>

<p>By using the in <code>window.performance</code> included objects ( timing, navigation, memory ) it is easily possible to receive information of the current document. That can be really helpful to figure out if the particular document has any performance problems. If you want to dive into that in more detail, you probably need a bit more information:</p>

<ul>
<li>why needs the document so much time to finish loading?</li>
<li>which ressource takes the most of the loading time?</li>
<li>can I avoid loading problematic ressource at initial load?</li>
</ul>


<p>The <a href="http://www.w3.org/TR/performance-timeline/">spec</a> for the <em>Performance Timeline</em> describes the <code>interface Performance</code> to have the following functions, which help to figure out exactly, where performance problems can have their origin:</p>

<ul>
<li>getEntries()</li>
<li>getEntriesByType( DOMString entryType )</li>
<li>getEntriesByName( DOMString name, optional DOMString entryType )</li>
</ul>


<p>So let us check it out.</p>

<p><code>getEntries</code> is defined to return a <code>PerformanceEntryList</code>. A <code>PerformanceEntry</code> has to have the following values:</p>

<ul>
<li>name</li>
<li>entryType</li>
<li>startTime</li>
<li>duration</li>
</ul>


<p>That looks pretty handy for me. I created another JavaScript snippet ( can be found <a href="https://gist.github.com/stefanjudis/7399022">here</a> ) to make usage of that. The script fetches all entries by calling <code>getEntries</code> and sorts all the entries by the amount of duration beginning by the entry with the highest duration. The output for example for <a href="http://google.com">google.com</a> looks like that:</p>

<p><img class="center" src="http://4waisenkinder.github.io/images/blog/stefanjudis/detailedMetrics.png" width="1091" height="305" title="Sorted PerformanceEntries of google.com" alt="Sorted PerformanceEntries of google.com"></p>

<p>Especially this data can be extremely useful, when dealing with performance bottlenecks. Additionally there is to say, that all the entries have much more included information than the particular interface describes. It is definitely worth a look, if you want to dive deeper into this topic.</p>

<p>Data included in one <code>PerformanceEntry</code>:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span> <span class="nb">window</span><span class="p">.</span><span class="nx">performance</span><span class="p">.</span><span class="nx">getEntries</span><span class="p">()</span> <span class="p">);</span>
</span><span class='line'><span class="c1">// will log :</span>
</span><span class='line'><span class="c1">// [</span>
</span><span class='line'><span class="c1">//   {</span>
</span><span class='line'><span class="c1">//     connectEnd: 0</span>
</span><span class='line'><span class="c1">//     connectStart: 0</span>
</span><span class='line'><span class="c1">//     domainLookupEnd: 0</span>
</span><span class='line'><span class="c1">//     domainLookupStart: 0</span>
</span><span class='line'><span class="c1">//     duration: 501.9820000161417</span>
</span><span class='line'><span class="c1">//     entryType: &quot;resource&quot;</span>
</span><span class='line'><span class="c1">//     fetchStart: 437.753000005614</span>
</span><span class='line'><span class="c1">//     initiatorType: &quot;script&quot;</span>
</span><span class='line'><span class="c1">//     name: &quot;http://use.typekit.net/axj3cfp.js&quot;</span>
</span><span class='line'><span class="c1">//     redirectEnd: 0</span>
</span><span class='line'><span class="c1">//     redirectStart: 0</span>
</span><span class='line'><span class="c1">//     requestStart: 0</span>
</span><span class='line'><span class="c1">//     responseEnd: 939.7350000217557</span>
</span><span class='line'><span class="c1">//     responseStart: 0</span>
</span><span class='line'><span class="c1">//     secureConnectionStart: 0</span>
</span><span class='line'><span class="c1">//     startTime: 437.753000005614</span>
</span><span class='line'><span class="c1">//   },</span>
</span><span class='line'><span class="c1">//   // much more items</span>
</span><span class='line'><span class="c1">// ]</span>
</span></code></pre></td></tr></table></div></figure>


<p>I did not check the other to functions, because <code>getEntries</code> totally fits my needs right now, but if you have any good use cases for them, I would really like to know them.</p>

<h3>Sum up &ndash; <em>window.performance</em> FTW</h3>

<p><code>window.performance</code> includes a lot of useful information for creating a good user experience by focussing on performance ( remember &ldquo;Performance is a feature?&rdquo; ). Especially the information about the document in general and particular ressources can become really handy. For me it is clear, that I will use it a lot in the future to get a nice overview of what is really going on the sites I am responsible for.</p>

<p>I hope you will start playing around with it as well and that is it for today. Thx for reading and I hope you enjoyed it. ;)</p>
<div class='octopress-authorbox'>
	<div class="author-pic">
		<img src="http://www.gravatar.com/avatar/22725c2d3eb331146549bf0d5d3c050c" alt="Stefan Judis" />
	</div>
	
	<div class="author-about">
		<h3>Stefan Judis</h3>
		<p>Frontend lover</p>
		<ul class="author-links">
			
			<li>
			<a href="http://twitter.com/stefanjudis">@stefanjudis</a>
			</li>
			
			
		</ul>
	</div>
</div>]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[How to handle a bunch of requests using JS promises]]></title>
    <link href="http://4waisenkinder.github.io/blog/2013/11/01/how-promises-work-using-the-example-of-gruntjs-dot-com/"/>
    <updated>2013-11-01T14:00:00+01:00</updated>
    <id>http://4waisenkinder.github.io/blog/2013/11/01/how-promises-work-using-the-example-of-gruntjs-dot-com</id>
    <content type="html"><![CDATA[<p>Yesterday I procrastinated the stuff I wanted (and should) do and spent a lot of time browsing Github and checking what is going on in the JS world. I discoverd a <a href="https://github.com/gruntjs/grunt/issues/926">discussion</a> held by the grunt guys about how Grunt can be promoted better. That was quite a good read and it was really nice to see, that these people try to push Grunt forward to make tooling much better for everyone.</p>

<p>A lot of new issues were created at Github to push the project to the next level. It turns out that the <a href="http://gruntjs.com">Gruntjs.com</a> website is a <a href="https://github.com/gruntjs/gruntjs.com">seperate repository</a> whose code is available on Github (man, I really love that Open Source approach).</p>

<p>What else can I do than checking out the source? I mean the website of Grunt itself must include a lot of best practices and stuff to discover. I forked it and opened in my editor and there they were &ndash; a lot of JS promises&hellip;<!-- more --></p>

<p>Basically I know how promises work, but I have to admit that they still irritate me a bit. It is just another way of thinking and sometimes it takes me a while to understand what is going on when the code in front of me is promises based.</p>

<p>The Grunt website makes usage of the framework <a href="https://npmjs.org/package/q">Q</a>. There are a lot of promises frameworks out there, but Q is with over 10000 downloads a day according to NPM stats not a bad choice. ;)</p>

<p><strong>Handling of requests at <em>/plugins</em> </strong></p>

<p>There is not much functionality in the site (most of it is static content), so the most interessting part of it is probably the <code>plugins</code> site. It fetches all available Grunt plugins from &ldquo;somewhere&rdquo; &ndash; I will explain where it comes from, so keep reading ;) &ndash; and displays them. Let us check, what is going on there.</p>

<p>The fun part starts inside of a file called <code>server.js</code>.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="c1">// plugin list route</span>
</span><span class='line'><span class="nx">app</span><span class="p">.</span><span class="nx">get</span><span class="p">(</span><span class="s1">&#39;/plugin-list&#39;</span><span class="p">,</span> <span class="kd">function</span> <span class="p">(</span><span class="nx">req</span><span class="p">,</span> <span class="nx">res</span><span class="p">,</span> <span class="nx">next</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>  <span class="c1">// get the plugin list</span>
</span><span class='line'>  <span class="nx">pluginListEntity</span><span class="p">.</span><span class="nx">then</span><span class="p">(</span><span class="kd">function</span> <span class="p">(</span><span class="nx">entity</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="c1">// Allow Cross-origin resource sharing</span>
</span><span class='line'>    <span class="nx">res</span><span class="p">.</span><span class="nx">setHeader</span><span class="p">(</span><span class="s1">&#39;Access-Control-Allow-Origin&#39;</span><span class="p">,</span> <span class="s1">&#39;*&#39;</span><span class="p">);</span>
</span><span class='line'>    <span class="nx">res</span><span class="p">.</span><span class="nx">setHeader</span><span class="p">(</span><span class="s1">&#39;Content-Type&#39;</span><span class="p">,</span> <span class="s1">&#39;application/json&#39;</span><span class="p">);</span>
</span><span class='line'>    <span class="nx">res</span><span class="p">.</span><span class="nx">setHeader</span><span class="p">(</span><span class="s1">&#39;ETag&#39;</span><span class="p">,</span> <span class="nx">entity</span><span class="p">.</span><span class="nx">etag</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>    <span class="nx">res</span><span class="p">.</span><span class="nx">statusCode</span> <span class="o">=</span> <span class="mi">200</span><span class="p">;</span>
</span><span class='line'>    <span class="nx">res</span><span class="p">.</span><span class="nx">end</span><span class="p">(</span><span class="k">new</span> <span class="nx">Buffer</span><span class="p">(</span><span class="nx">entity</span><span class="p">.</span><span class="nx">json</span><span class="p">));</span>
</span><span class='line'>  <span class="p">}).</span><span class="nx">fail</span><span class="p">(</span><span class="kd">function</span> <span class="p">()</span> <span class="p">{</span>
</span><span class='line'>      <span class="nx">next</span><span class="p">();</span>
</span><span class='line'>  <span class="p">});</span>
</span><span class='line'><span class="p">});</span>
</span></code></pre></td></tr></table></div></figure>


<p>What we see here is a route definition for the <a href="http://expressjs.com/">Express Framework</a>. If you are not familiar with Express it describes itself as follows:</p>

<blockquote><p>Express is a minimal and flexible node.js web application framework, providing a robust set of features for building single and multi-page, and hybrid web applications.</p></blockquote>

<p>It is a quite handy framework and when you are into node.js it is definitely worth a try.</p>

<p>But anyway&hellip; The shown function will be called when a user enters the url <code>/plugin-list</code>. And there it is &ndash; the first promise <code>pluginListEntity</code>. You see that it is a promise, because an included function <code>then</code> gets called with an anonymous callback function. This is the basic pattern when dealing with promises.</p>

<p><strong>Comparing <em>callback</em> and <em>promise</em> way </strong></p>

<p>Particular functions return a promise object instead of the wished data. This becomes quite handy when you have to deal with asynchronous operations, because the &ldquo;normal&rdquo; way would be to implement a callback function that deals with wished data, when the operation succeeded.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="kd">var</span> <span class="nx">result</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// callback way</span>
</span><span class='line'><span class="nx">asyncOperation</span><span class="p">(</span> <span class="kd">function</span><span class="p">(</span> <span class="nx">data</span> <span class="p">)</span> <span class="p">{</span>
</span><span class='line'>  <span class="nx">result</span> <span class="o">=</span> <span class="nx">data</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span> <span class="p">);</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// promise way</span>
</span><span class='line'><span class="nx">result</span> <span class="o">=</span> <span class="nx">asyncOperation</span><span class="p">();</span>
</span><span class='line'><span class="nx">result</span><span class="p">.</span><span class="nx">then</span><span class="p">(</span> <span class="kd">function</span><span class="p">(</span> <span class="nx">data</span> <span class="p">)</span> <span class="p">{</span>
</span><span class='line'>  <span class="nx">result</span> <span class="o">=</span> <span class="nx">data</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span> <span class="p">);</span>
</span></code></pre></td></tr></table></div></figure>


<p><strong>Creating <em>pluginListEntity</em> </strong></p>

<p>So far so good &ndash; let us check where this variable <code>pluginListEntity</code> seen in the first code block comes from. It is basically the result of a function called <code>getPluginListEntity</code>.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="kd">function</span> <span class="nx">getPluginListEntity</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>  <span class="c1">// create new promise</span>
</span><span class='line'>  <span class="kd">var</span> <span class="nx">deferred</span> <span class="o">=</span> <span class="nx">Q</span><span class="p">.</span><span class="nx">defer</span><span class="p">();</span>
</span><span class='line'>
</span><span class='line'>  <span class="c1">// oh, another promise...</span>
</span><span class='line'>  <span class="nx">gruntPlugins</span><span class="p">.</span><span class="nx">fetchPluginList</span><span class="p">().</span><span class="nx">then</span><span class="p">(</span>
</span><span class='line'>    <span class="kd">function</span> <span class="p">(</span> <span class="nx">pluginList</span> <span class="p">)</span> <span class="p">{</span>
</span><span class='line'>      <span class="kd">var</span> <span class="nx">entity</span> <span class="o">=</span> <span class="p">{</span>
</span><span class='line'>        <span class="nx">json</span><span class="o">:</span><span class="nx">JSON</span><span class="p">.</span><span class="nx">stringify</span><span class="p">(</span> <span class="nx">pluginList</span> <span class="p">)</span>
</span><span class='line'>      <span class="p">};</span>
</span><span class='line'>      <span class="kd">var</span> <span class="nx">shasum</span> <span class="o">=</span> <span class="nx">crypto</span><span class="p">.</span><span class="nx">createHash</span><span class="p">(</span> <span class="s1">&#39;sha1&#39;</span> <span class="p">);</span>
</span><span class='line'>      <span class="nx">shasum</span><span class="p">.</span><span class="nx">update</span><span class="p">(</span> <span class="nx">entity</span><span class="p">.</span><span class="nx">json</span> <span class="p">);</span>
</span><span class='line'>      <span class="nx">entity</span><span class="p">.</span><span class="nx">etag</span> <span class="o">=</span> <span class="nx">shasum</span><span class="p">.</span><span class="nx">digest</span><span class="p">(</span> <span class="s1">&#39;hex&#39;</span> <span class="p">);</span>
</span><span class='line'>      <span class="nx">deferred</span><span class="p">.</span><span class="nx">resolve</span><span class="p">(</span> <span class="nx">entity</span> <span class="p">);</span>
</span><span class='line'>
</span><span class='line'>      <span class="c1">// update the entity</span>
</span><span class='line'>      <span class="nx">pluginListEntity</span> <span class="o">=</span> <span class="nx">deferred</span><span class="p">.</span><span class="nx">promise</span><span class="p">;</span>
</span><span class='line'>    <span class="p">}</span> <span class="p">).</span><span class="nx">fail</span><span class="p">(</span> <span class="kd">function</span> <span class="p">(</span> <span class="nx">e</span> <span class="p">)</span> <span class="p">{</span>
</span><span class='line'>      <span class="nx">deferred</span><span class="p">.</span><span class="nx">reject</span><span class="p">(</span> <span class="nx">e</span> <span class="p">);</span>
</span><span class='line'>    <span class="p">}</span> <span class="p">);</span>
</span><span class='line'>
</span><span class='line'>  <span class="c1">// return no values but rather a promise</span>
</span><span class='line'>  <span class="k">return</span> <span class="nx">deferred</span><span class="p">.</span><span class="nx">promise</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// set pluginListEntitry at initial start</span>
</span><span class='line'><span class="kd">var</span> <span class="nx">pluginListEntity</span> <span class="o">=</span> <span class="nx">getPluginListEntity</span><span class="p">();</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// Update function to keep everything fresh</span>
</span><span class='line'><span class="nx">setInterval</span><span class="p">(</span><span class="kd">function</span> <span class="p">()</span> <span class="p">{</span>
</span><span class='line'>  <span class="nx">getPluginListEntity</span><span class="p">();</span>
</span><span class='line'><span class="p">},</span> <span class="nx">UPDATE_INTERVAL_IN_SECONDS</span> <span class="o">*</span> <span class="mi">1000</span><span class="p">);</span>
</span></code></pre></td></tr></table></div></figure>


<p>What we see here is the actual &ldquo;kick off&rdquo; functionality for the plugin fetch process. It gets called at the initial start of the Express application. The most important thing is, that the variable <code>pluginListEntity</code> is set with a promise at initial start by calling <code>getPluginListEntity</code>.</p>

<p><code>getPluginListEntity</code> does two things when called. First of all it creates a new promise and returns it. Additionally it refreshes <code>pluginListEntity</code> with the created promise. That is actually really smart, because this way it is possible to update it automatically using <code>setInterval</code> constantly which is absolutely necessary, because <a href="http://gruntjs.com">gruntjs.com</a> should be up to date all the time.</p>

<p>But wait&hellip; you may have noticed that there is more promises stuff going on inside of <code>getPluginListEntity</code>. This line <code>gruntPlugins.fetchPluginList.then( ... )</code> hints to another object, that does the actual fetching job for the application and obviously return another promise.</p>

<p>Let us check it out.</p>

<p><strong>Fetching data from NPM</strong></p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="kd">function</span> <span class="nx">fetchPluginList</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>  <span class="c1">// return a promise to use it in &#39;getPluginListEntitry&#39;</span>
</span><span class='line'>  <span class="k">return</span> <span class="nx">Q</span><span class="p">.</span><span class="nx">fcall</span><span class="p">(</span> <span class="kd">function</span> <span class="nx">fetchPluginList</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>    <span class="kd">var</span> <span class="nx">deferred</span> <span class="o">=</span> <span class="nx">Q</span><span class="p">.</span><span class="nx">defer</span><span class="p">();</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1">// fetch all grunt plugins</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">return</span> <span class="nx">deferred</span><span class="p">.</span><span class="nx">promise</span><span class="p">;</span>
</span><span class='line'>  <span class="p">}</span> <span class="p">).</span><span class="nx">then</span><span class="p">(</span> <span class="kd">function</span> <span class="nx">getPlugin</span><span class="p">(</span> <span class="nx">list</span> <span class="p">)</span> <span class="p">{</span>
</span><span class='line'>      <span class="kd">var</span> <span class="nx">results</span> <span class="o">=</span> <span class="nx">_</span><span class="p">.</span><span class="nx">map</span><span class="p">(</span> <span class="nx">list</span><span class="p">,</span> <span class="kd">function</span><span class="p">(</span> <span class="nx">item</span> <span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="kd">var</span> <span class="nx">deferred</span> <span class="o">=</span> <span class="nx">Q</span><span class="p">.</span><span class="nx">defer</span><span class="p">();</span>
</span><span class='line'>
</span><span class='line'>        <span class="c1">// fetch plugin information for each plugin</span>
</span><span class='line'>
</span><span class='line'>        <span class="k">return</span> <span class="nx">deferred</span><span class="p">.</span><span class="nx">promise</span><span class="p">;</span>
</span><span class='line'>      <span class="p">}</span> <span class="p">);</span>
</span><span class='line'>      <span class="k">return</span> <span class="nx">Q</span><span class="p">.</span><span class="nx">all</span><span class="p">(</span> <span class="nx">results</span> <span class="p">);</span>
</span><span class='line'>  <span class="p">}</span> <span class="p">).</span><span class="nx">then</span><span class="p">(</span> <span class="kd">function</span> <span class="nx">getDownloads</span><span class="p">(</span> <span class="nx">results</span> <span class="p">)</span> <span class="p">{</span>
</span><span class='line'>      <span class="kd">var</span> <span class="nx">resultsWithDownloads</span> <span class="o">=</span> <span class="nx">_</span><span class="p">.</span><span class="nx">map</span><span class="p">(</span> <span class="nx">results</span><span class="p">,</span> <span class="kd">function</span><span class="p">(</span> <span class="nx">result</span> <span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="kd">var</span> <span class="nx">deferred</span> <span class="o">=</span> <span class="nx">Q</span><span class="p">.</span><span class="nx">defer</span><span class="p">();</span>
</span><span class='line'>
</span><span class='line'>        <span class="c1">// fetch download statistics for each plugin</span>
</span><span class='line'>
</span><span class='line'>        <span class="k">return</span> <span class="nx">deferred</span><span class="p">.</span><span class="nx">promise</span><span class="p">;</span>
</span><span class='line'>      <span class="p">}</span> <span class="p">);</span>
</span><span class='line'>
</span><span class='line'>      <span class="k">return</span> <span class="nx">Q</span><span class="p">.</span><span class="nx">all</span><span class="p">(</span> <span class="nx">resultsWithDownloads</span> <span class="p">);</span>
</span><span class='line'>  <span class="p">}</span> <span class="p">);</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>BAM!!! That is it &ndash; much more promises &ndash;, but let us break it into little pieces. :)</p>

<p>The needed functionality consists of really a lot of requests made to a <a href="http://couchdb.apache.org/">CouchDB</a>. NPM stores all its plugin inside of a CouchDB available at <a href="http://isaacs.iriscouch.com">http://isaacs.iriscouch.com</a>.</p>

<p>To wrap up what is needed to do:</p>

<ul>
<li>Fetch all plugins from database &lsquo;reqistry&rsquo; that include keyword &lsquo;gruntplugin&rsquo; &ndash; <strong> one call </strong></li>
<li>Fetch plugin details of all fetched grunt plugins from database &lsquo;registry&rsquo; &ndash; <strong> * calls </strong></li>
<li>Fetch download statistics of all fetched plugin &ndash; <strong> * calls </strong></li>
</ul>


<p>Just to make sure you understand to advantage of that, here is the callback way of doing it:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="nx">fetchPluginList</span><span class="p">(</span> <span class="kd">function</span> <span class="p">(</span> <span class="nx">plugins</span> <span class="p">)</span> <span class="p">{</span>
</span><span class='line'>  <span class="nx">getPlugin</span><span class="p">(</span> <span class="nx">plugins</span><span class="p">,</span> <span class="kd">function</span><span class="p">(</span> <span class="nx">pluginsWithDetails</span> <span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="nx">getDownloads</span><span class="p">(</span> <span class="nx">pluginsWithDetails</span><span class="p">,</span> <span class="kd">function</span><span class="p">(</span> <span class="nx">pluginsWithDownloadStats</span> <span class="p">)</span> <span class="p">{</span>
</span><span class='line'>      <span class="c1">// do something with &#39;pluginsWithDownladStats&#39;</span>
</span><span class='line'>    <span class="p">}</span> <span class="p">);</span>
</span><span class='line'>  <span class="p">}</span> <span class="p">);</span>
</span><span class='line'><span class="p">}</span> <span class="p">);</span>
</span></code></pre></td></tr></table></div></figure>


<p>Doing it like that is less readable and it is a perfect example of the so called &lsquo;callback hell&rsquo;. Additionally dealing with a lot asynchronous requests can be really tricky and keeping it in sync to call the next callback is not so easy like it sounds.</p>

<p>So what is really going on? The function <code>fetchPluginList</code> makes usage of <code>Q.fcall</code>. This gives us the possibility to return a new promise by this function. Following is a simplified version of this approach to make it clearer.</p>

<p><strong>Example for <em>Q.fcall</em> </strong></p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="kd">var</span> <span class="nx">Q</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span> <span class="s1">&#39;q&#39;</span> <span class="p">);</span>
</span><span class='line'>
</span><span class='line'><span class="kd">function</span> <span class="nx">getPromise</span> <span class="p">()</span> <span class="p">{</span>
</span><span class='line'>  <span class="k">return</span> <span class="nx">Q</span><span class="p">.</span><span class="nx">fcall</span><span class="p">(</span> <span class="kd">function</span> <span class="p">()</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">return</span> <span class="mi">10</span><span class="p">;</span>
</span><span class='line'>  <span class="p">}</span> <span class="p">).</span><span class="nx">then</span><span class="p">(</span> <span class="kd">function</span><span class="p">(</span> <span class="nx">value</span> <span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">return</span> <span class="nx">value</span> <span class="o">*</span> <span class="mi">2</span><span class="p">;</span>
</span><span class='line'>  <span class="p">}</span> <span class="p">).</span><span class="nx">then</span><span class="p">(</span> <span class="kd">function</span><span class="p">(</span> <span class="nx">value</span> <span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">return</span> <span class="nx">value</span> <span class="o">*</span> <span class="mi">3</span><span class="p">;</span>
</span><span class='line'>  <span class="p">}</span> <span class="p">);</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="kd">var</span> <span class="nx">a</span> <span class="o">=</span> <span class="nx">getPromise</span><span class="p">();</span>
</span><span class='line'>
</span><span class='line'><span class="nx">a</span><span class="p">.</span><span class="nx">then</span><span class="p">(</span> <span class="kd">function</span><span class="p">(</span> <span class="nx">returnValue</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>  <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span> <span class="nx">returnValue</span> <span class="p">);</span> <span class="c1">// will log &#39;60&#39;</span>
</span><span class='line'><span class="p">});</span>
</span></code></pre></td></tr></table></div></figure>


<p>This way we are able to stick a lot of functions together and avoid creating callback trees. The end result of a deep nested callback is then easily accessible using the <code>then</code> function of the particular promise.</p>

<p><strong>Example of <em>Q.defer</em> with one request</strong></p>

<p>Now starts the tricky part &ndash; in each step ( remember <code>fetchAll</code>, <code>fetchDetails</code>, <code>fetchDownloads</code>? ;) ) will be made an asynchronous request and this request is handled by &hellip;? Yeah, you are right &ndash; another promise.</p>

<p>Here is the complete first step to fetch all grunt plugins including one call to the CouchDB:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="kd">function</span> <span class="nx">fetchPluginList</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>  <span class="c1">// get new deffered object</span>
</span><span class='line'>  <span class="kd">var</span> <span class="nx">deferred</span> <span class="o">=</span> <span class="nx">Q</span><span class="p">.</span><span class="nx">defer</span><span class="p">();</span>
</span><span class='line'>  <span class="kd">var</span> <span class="nx">keyword</span> <span class="o">=</span> <span class="s1">&#39;gruntplugin&#39;</span><span class="p">;</span>
</span><span class='line'>  <span class="kd">var</span> <span class="nx">url</span> <span class="o">=</span> <span class="s1">&#39;http://isaacs.iriscouch.com/registry/_design/app/_view/byKeyword?startkey=[%22&#39;</span> <span class="o">+</span>
</span><span class='line'>    <span class="nx">keyword</span> <span class="o">+</span> <span class="s1">&#39;%22]&amp;endkey=[%22&#39;</span> <span class="o">+</span> <span class="nx">keyword</span> <span class="o">+</span> <span class="s1">&#39;%22,{}]&amp;group_level=3&#39;</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>  <span class="c1">// fetch all plugins</span>
</span><span class='line'>  <span class="nx">request</span><span class="p">(</span>
</span><span class='line'>    <span class="p">{</span> <span class="nx">url</span> <span class="o">:</span> <span class="nx">url</span><span class="p">,</span> <span class="nx">json</span> <span class="o">:</span> <span class="kc">true</span> <span class="p">},</span>
</span><span class='line'>    <span class="kd">function</span> <span class="nx">handlePluginList</span><span class="p">(</span> <span class="nx">error</span><span class="p">,</span> <span class="nx">response</span><span class="p">,</span> <span class="nx">body</span> <span class="p">)</span> <span class="p">{</span>
</span><span class='line'>      <span class="k">if</span><span class="p">(</span> <span class="o">!</span><span class="nx">error</span> <span class="o">&amp;&amp;</span> <span class="nx">response</span><span class="p">.</span><span class="nx">statusCode</span> <span class="o">===</span> <span class="mi">200</span> <span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="c1">// yeah - resolve it successfully</span>
</span><span class='line'>        <span class="nx">deferred</span><span class="p">.</span><span class="nx">resolve</span><span class="p">(</span> <span class="nx">body</span><span class="p">.</span><span class="nx">rows</span> <span class="p">);</span>
</span><span class='line'>      <span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
</span><span class='line'>        <span class="c1">// reject it in case of error</span>
</span><span class='line'>        <span class="nx">deferred</span><span class="p">.</span><span class="nx">reject</span><span class="p">(</span> <span class="k">new</span> <span class="nb">Error</span><span class="p">(</span> <span class="nx">error</span> <span class="p">)</span> <span class="p">);</span>
</span><span class='line'>      <span class="p">}</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>  <span class="p">);</span>
</span><span class='line'>
</span><span class='line'>  <span class="c1">// return no value but rather the deffered</span>
</span><span class='line'>  <span class="k">return</span> <span class="nx">deferred</span><span class="p">.</span><span class="nx">promise</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>A new promise is created by using <code>Q.defer</code>. <code>Q.defer</code> acts as an interface when you have to deal with callback based functions ( like <code>request</code> in this case ) and you want to do it the promise way. All you have to do is getting a new defer object by calling <code>Q.defer()</code> and then resolving/rejecting it inside of the asynchronous callback function. The response of the request is then easily accessible be calling <code>then</code>.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="kd">var</span> <span class="nx">allPlugins</span> <span class="o">=</span> <span class="nx">fetchPluginList</span><span class="p">();</span>
</span><span class='line'>
</span><span class='line'><span class="nx">allPlugins</span><span class="p">.</span><span class="nx">then</span><span class="p">(</span> <span class="kd">function</span><span class="p">(</span> <span class="nx">plugins</span> <span class="p">)</span> <span class="p">{</span>
</span><span class='line'>  <span class="nx">doSomething</span><span class="p">(</span> <span class="nx">plugins</span> <span class="p">);</span>
</span><span class='line'><span class="p">}</span> <span class="p">);</span>
</span></code></pre></td></tr></table></div></figure>


<p><strong>Example of <em>Q.defer</em> with multiple request</strong></p>

<p>If the first step is clear to you ( if not feel free to comment or ping me on <a href="twitter.com/stefanjudis">Twitter</a> ) let us check the second and third, because there is a bit more magic going on in it.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="kd">function</span> <span class="nx">getPlugin</span><span class="p">(</span> <span class="nx">list</span> <span class="p">)</span> <span class="p">{</span>
</span><span class='line'>  <span class="c1">// create array full of promises</span>
</span><span class='line'>  <span class="kd">var</span> <span class="nx">results</span> <span class="o">=</span> <span class="nx">_</span><span class="p">.</span><span class="nx">map</span><span class="p">(</span> <span class="nx">list</span><span class="p">,</span> <span class="kd">function</span><span class="p">(</span> <span class="nx">item</span> <span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="kd">var</span> <span class="nx">deferred</span> <span class="o">=</span> <span class="nx">Q</span><span class="p">.</span><span class="nx">defer</span><span class="p">();</span>
</span><span class='line'>    <span class="kd">var</span> <span class="nx">name</span> <span class="o">=</span> <span class="nx">item</span><span class="p">.</span><span class="nx">key</span><span class="p">[</span> <span class="mi">1</span> <span class="p">];</span>
</span><span class='line'>    <span class="kd">var</span> <span class="nx">url</span> <span class="o">=</span> <span class="s1">&#39;http://isaacs.iriscouch.com/registry/&#39;</span> <span class="o">+</span> <span class="nx">name</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1">// fetch plugin information</span>
</span><span class='line'>    <span class="nx">request</span><span class="p">(</span>
</span><span class='line'>      <span class="p">{</span> <span class="nx">url</span> <span class="o">:</span> <span class="nx">url</span><span class="p">,</span> <span class="nx">json</span><span class="o">:</span> <span class="kc">true</span> <span class="p">},</span>
</span><span class='line'>      <span class="kd">function</span> <span class="nx">handlePlugin</span><span class="p">(</span> <span class="nx">error</span><span class="p">,</span> <span class="nx">response</span><span class="p">,</span> <span class="nx">body</span> <span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="k">if</span><span class="p">(</span> <span class="o">!</span><span class="nx">error</span> <span class="o">&amp;&amp;</span> <span class="nx">response</span><span class="p">.</span><span class="nx">statusCode</span> <span class="o">===</span> <span class="mi">200</span> <span class="p">)</span> <span class="p">{</span>
</span><span class='line'>          <span class="c1">// yeah - resolve promise for this plugin</span>
</span><span class='line'>          <span class="nx">deferred</span><span class="p">.</span><span class="nx">resolve</span><span class="p">(</span> <span class="nx">condensePlugin</span><span class="p">(</span> <span class="nx">body</span> <span class="p">)</span> <span class="p">);</span>
</span><span class='line'>        <span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
</span><span class='line'>          <span class="c1">// reject promise for this plugin</span>
</span><span class='line'>          <span class="nx">deferred</span><span class="p">.</span><span class="nx">reject</span><span class="p">(</span> <span class="k">new</span> <span class="nb">Error</span><span class="p">(</span> <span class="nx">error</span> <span class="p">)</span> <span class="p">);</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>      <span class="p">}</span>
</span><span class='line'>    <span class="p">);</span>
</span><span class='line'>    <span class="k">return</span> <span class="nx">deferred</span><span class="p">.</span><span class="nx">promise</span><span class="p">;</span>
</span><span class='line'>  <span class="p">}</span> <span class="p">);</span>
</span><span class='line'>  <span class="c1">// &#39;results&#39; is an Array containing a lot of promises</span>
</span><span class='line'>  <span class="c1">// -&gt; returns a new promise that will be resolved</span>
</span><span class='line'>  <span class="c1">// -&gt; when all promises inside of results succeeded</span>
</span><span class='line'>  <span class="k">return</span> <span class="nx">Q</span><span class="p">.</span><span class="nx">all</span><span class="p">(</span><span class="nx">results</span><span class="p">);</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>This step does basically the same as the first step, but makes a lot of more requests. For each plugin a seperate request has to be made to fetch the plugin details. The function will be executed with an Array containing all information that was fetched in first call to get all grunt plugins.</p>

<p>This Array ( <code>list</code> ) will be transformed using the <code>map</code> function of <a href="http://lodash.com/">lo-dash</a>. Each item is replaced by a new deffered object which will be resolved, when the request for plugin information succeeded. Q provides the really nice function <code>Q.all</code> which gives us a lot of power to handle multiple requests.</p>

<p><code>Q.all</code> will return a new promise which will be resolved when all promises inside of the handed in Array will be resolved and enriched with detail information.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="c1">// response of first call to CouchDB</span>
</span><span class='line'><span class="kd">var</span> <span class="nx">list</span> <span class="o">=</span> <span class="p">[</span> <span class="p">{</span>
</span><span class='line'>  <span class="nx">key</span> <span class="o">:</span> <span class="p">[</span> <span class="s1">&#39;something&#39;</span><span class="p">,</span> <span class="s1">&#39;pluginName1&#39;</span> <span class="p">]</span>
</span><span class='line'><span class="p">},</span> <span class="p">{</span>
</span><span class='line'>  <span class="nx">key</span> <span class="o">:</span> <span class="p">[</span> <span class="s1">&#39;something&#39;</span><span class="p">,</span> <span class="s1">&#39;pluginName2&#39;</span> <span class="p">]</span>
</span><span class='line'><span class="p">}</span> <span class="p">];</span>
</span><span class='line'>
</span><span class='line'><span class="kd">var</span> <span class="nx">allPluginsWithDetails</span> <span class="o">=</span> <span class="nx">getPlugin</span><span class="p">(</span> <span class="nx">list</span> <span class="p">);</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// do something with plugins when they were</span>
</span><span class='line'><span class="c1">// enriched with detail information</span>
</span><span class='line'><span class="nx">allPluginsWithDetails</span><span class="p">.</span><span class="nx">then</span><span class="p">(</span> <span class="kd">function</span><span class="p">(</span> <span class="nx">plugins</span> <span class="p">)</span> <span class="p">{</span>
</span><span class='line'>  <span class="nx">doSomething</span><span class="p">(</span> <span class="nx">plugins</span> <span class="p">);</span>
</span><span class='line'><span class="p">}</span> <span class="p">);</span>
</span></code></pre></td></tr></table></div></figure>


<p><strong>Sticking promises together</strong></p>

<p>Now, we have created a lot of promises, so let us have another look where we started with a more detailed look and lots of comments. ;)</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
<span class='line-number'>58</span>
<span class='line-number'>59</span>
<span class='line-number'>60</span>
<span class='line-number'>61</span>
<span class='line-number'>62</span>
<span class='line-number'>63</span>
<span class='line-number'>64</span>
<span class='line-number'>65</span>
<span class='line-number'>66</span>
<span class='line-number'>67</span>
<span class='line-number'>68</span>
<span class='line-number'>69</span>
<span class='line-number'>70</span>
<span class='line-number'>71</span>
<span class='line-number'>72</span>
<span class='line-number'>73</span>
<span class='line-number'>74</span>
<span class='line-number'>75</span>
<span class='line-number'>76</span>
<span class='line-number'>77</span>
<span class='line-number'>78</span>
<span class='line-number'>79</span>
<span class='line-number'>80</span>
<span class='line-number'>81</span>
<span class='line-number'>82</span>
<span class='line-number'>83</span>
<span class='line-number'>84</span>
<span class='line-number'>85</span>
<span class='line-number'>86</span>
<span class='line-number'>87</span>
<span class='line-number'>88</span>
<span class='line-number'>89</span>
<span class='line-number'>90</span>
<span class='line-number'>91</span>
<span class='line-number'>92</span>
<span class='line-number'>93</span>
<span class='line-number'>94</span>
<span class='line-number'>95</span>
<span class='line-number'>96</span>
<span class='line-number'>97</span>
<span class='line-number'>98</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="kd">function</span> <span class="nx">fetchPluginList</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>  <span class="c1">// return a promise</span>
</span><span class='line'>  <span class="k">return</span> <span class="nx">Q</span><span class="p">.</span><span class="nx">fcall</span><span class="p">(</span> <span class="kd">function</span> <span class="nx">fetchPluginList</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>    <span class="c1">// fetch all grunt plugins with help of a deferred object</span>
</span><span class='line'>    <span class="kd">var</span> <span class="nx">deferred</span> <span class="o">=</span> <span class="nx">Q</span><span class="p">.</span><span class="nx">defer</span><span class="p">();</span>
</span><span class='line'>    <span class="kd">var</span> <span class="nx">keyword</span> <span class="o">=</span> <span class="s1">&#39;gruntplugin&#39;</span><span class="p">;</span>
</span><span class='line'>    <span class="kd">var</span> <span class="nx">url</span> <span class="o">=</span> <span class="s1">&#39;http://isaacs.iriscouch.com/registry/_design/app/_view/byKeyword?startkey=[%22&#39;</span> <span class="o">+</span>
</span><span class='line'>      <span class="nx">keyword</span> <span class="o">+</span> <span class="s1">&#39;%22]&amp;endkey=[%22&#39;</span> <span class="o">+</span> <span class="nx">keyword</span> <span class="o">+</span> <span class="s1">&#39;%22,{}]&amp;group_level=3&#39;</span><span class="p">;</span>
</span><span class='line'>    <span class="c1">// fetch all plugins</span>
</span><span class='line'>    <span class="nx">request</span><span class="p">(</span>
</span><span class='line'>      <span class="p">{</span> <span class="nx">url</span> <span class="o">:</span> <span class="nx">url</span><span class="p">,</span> <span class="nx">json</span> <span class="o">:</span> <span class="kc">true</span> <span class="p">},</span>
</span><span class='line'>      <span class="kd">function</span> <span class="nx">handlePluginList</span><span class="p">(</span> <span class="nx">error</span><span class="p">,</span> <span class="nx">response</span><span class="p">,</span> <span class="nx">body</span> <span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="k">if</span><span class="p">(</span> <span class="o">!</span><span class="nx">error</span> <span class="o">&amp;&amp;</span> <span class="nx">response</span><span class="p">.</span><span class="nx">statusCode</span> <span class="o">===</span> <span class="mi">200</span> <span class="p">)</span> <span class="p">{</span>
</span><span class='line'>          <span class="c1">// resolve deferred with response</span>
</span><span class='line'>          <span class="nx">deferred</span><span class="p">.</span><span class="nx">resolve</span><span class="p">(</span> <span class="nx">body</span><span class="p">.</span><span class="nx">rows</span> <span class="p">);</span>
</span><span class='line'>        <span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
</span><span class='line'>          <span class="nx">deferred</span><span class="p">.</span><span class="nx">reject</span><span class="p">(</span> <span class="k">new</span> <span class="nb">Error</span><span class="p">(</span> <span class="nx">error</span> <span class="p">)</span> <span class="p">);</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>      <span class="p">}</span>
</span><span class='line'>    <span class="p">);</span>
</span><span class='line'>    <span class="k">return</span> <span class="nx">deferred</span><span class="p">.</span><span class="nx">promise</span><span class="p">;</span>
</span><span class='line'>  <span class="p">}</span> <span class="p">)</span>
</span><span class='line'>  <span class="c1">// executed when the promise returned by &#39;fetchPluginList&#39; was resolved</span>
</span><span class='line'>  <span class="c1">// argument &#39;list&#39; === &#39;body.rows&#39; in line 15</span>
</span><span class='line'>  <span class="p">.</span><span class="nx">then</span><span class="p">(</span> <span class="kd">function</span> <span class="nx">getPlugin</span><span class="p">(</span> <span class="nx">list</span> <span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="c1">// transform Array with data to Array with promises</span>
</span><span class='line'>    <span class="kd">var</span> <span class="nx">results</span> <span class="o">=</span> <span class="nx">_</span><span class="p">.</span><span class="nx">map</span><span class="p">(</span> <span class="nx">list</span><span class="p">,</span> <span class="kd">function</span><span class="p">(</span> <span class="nx">item</span> <span class="p">)</span> <span class="p">{</span>
</span><span class='line'>      <span class="kd">var</span> <span class="nx">deferred</span> <span class="o">=</span> <span class="nx">Q</span><span class="p">.</span><span class="nx">defer</span><span class="p">();</span>
</span><span class='line'>      <span class="kd">var</span> <span class="nx">name</span> <span class="o">=</span> <span class="nx">item</span><span class="p">.</span><span class="nx">key</span><span class="p">[</span> <span class="mi">1</span> <span class="p">];</span>
</span><span class='line'>      <span class="kd">var</span> <span class="nx">url</span> <span class="o">=</span> <span class="s1">&#39;http://isaacs.iriscouch.com/registry/&#39;</span> <span class="o">+</span> <span class="nx">name</span><span class="p">;</span>
</span><span class='line'>      <span class="c1">// fetch plugin information</span>
</span><span class='line'>      <span class="nx">request</span><span class="p">(</span>
</span><span class='line'>        <span class="p">{</span> <span class="nx">url</span> <span class="o">:</span> <span class="nx">url</span><span class="p">,</span> <span class="nx">json</span> <span class="o">:</span> <span class="kc">true</span> <span class="p">},</span>
</span><span class='line'>        <span class="kd">function</span> <span class="nx">handlePlugin</span><span class="p">(</span> <span class="nx">error</span><span class="p">,</span> <span class="nx">response</span><span class="p">,</span> <span class="nx">body</span> <span class="p">)</span> <span class="p">{</span>
</span><span class='line'>          <span class="k">if</span><span class="p">(</span> <span class="o">!</span><span class="nx">error</span> <span class="o">&amp;&amp;</span> <span class="nx">response</span><span class="p">.</span><span class="nx">statusCode</span> <span class="o">===</span> <span class="mi">200</span> <span class="p">)</span> <span class="p">{</span>
</span><span class='line'>            <span class="c1">// resolve deferred with response</span>
</span><span class='line'>            <span class="nx">deferred</span><span class="p">.</span><span class="nx">resolve</span><span class="p">(</span> <span class="nx">condensePlugin</span><span class="p">(</span> <span class="nx">body</span> <span class="p">)</span> <span class="p">);</span>
</span><span class='line'>          <span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
</span><span class='line'>            <span class="nx">deferred</span><span class="p">.</span><span class="nx">reject</span><span class="p">(</span> <span class="k">new</span> <span class="nb">Error</span><span class="p">(</span> <span class="nx">error</span> <span class="p">)</span> <span class="p">);</span>
</span><span class='line'>          <span class="p">}</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>      <span class="p">);</span>
</span><span class='line'>      <span class="k">return</span> <span class="nx">deferred</span><span class="p">.</span><span class="nx">promise</span><span class="p">;</span>
</span><span class='line'>    <span class="p">}</span> <span class="p">);</span>
</span><span class='line'>    <span class="c1">// return a promise that will be resolved</span>
</span><span class='line'>    <span class="c1">// when all promises inside of &#39;results&#39; are resolved</span>
</span><span class='line'>    <span class="k">return</span> <span class="nx">Q</span><span class="p">.</span><span class="nx">all</span><span class="p">(</span> <span class="nx">results</span> <span class="p">);</span>
</span><span class='line'>  <span class="p">})</span>
</span><span class='line'>  <span class="c1">// executed when the promise returned by &#39;getPlugin was resolved&#39;</span>
</span><span class='line'>  <span class="c1">// argument &#39;results&#39; is an Array which now consists of plugin data</span>
</span><span class='line'>  <span class="c1">// with enriched plugin information</span>
</span><span class='line'>  <span class="p">.</span><span class="nx">then</span><span class="p">(</span> <span class="kd">function</span> <span class="nx">getDownloads</span><span class="p">(</span> <span class="nx">results</span> <span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="c1">// transform Array with data to Array with promises</span>
</span><span class='line'>    <span class="kd">var</span> <span class="nx">resultsWithDownloads</span> <span class="o">=</span> <span class="nx">_</span><span class="p">.</span><span class="nx">map</span><span class="p">(</span> <span class="nx">results</span><span class="p">,</span> <span class="kd">function</span><span class="p">(</span> <span class="nx">result</span> <span class="p">)</span> <span class="p">{</span>
</span><span class='line'>      <span class="kd">var</span> <span class="nx">deferred</span> <span class="o">=</span> <span class="nx">Q</span><span class="p">.</span><span class="nx">defer</span><span class="p">();</span>
</span><span class='line'>
</span><span class='line'>      <span class="kd">var</span> <span class="nx">today</span> <span class="o">=</span> <span class="nb">Date</span><span class="p">.</span><span class="nx">today</span><span class="p">();</span>
</span><span class='line'>      <span class="kd">var</span> <span class="nx">oneMonthAgo</span> <span class="o">=</span> <span class="nx">today</span><span class="p">.</span><span class="nx">clone</span><span class="p">().</span><span class="nx">add</span><span class="p">(</span> <span class="p">{</span> <span class="nx">months</span> <span class="o">:</span> <span class="o">-</span><span class="mi">1</span> <span class="p">}</span> <span class="p">);</span>
</span><span class='line'>
</span><span class='line'>      <span class="kd">var</span> <span class="nx">startKey</span> <span class="o">=</span> <span class="nx">JSON</span><span class="p">.</span><span class="nx">stringify</span><span class="p">(</span> <span class="p">[</span> <span class="nx">result</span><span class="p">.</span><span class="nx">name</span><span class="p">,</span> <span class="nx">oneMonthAgo</span><span class="p">.</span><span class="nx">toYMD</span><span class="p">()</span> <span class="p">]</span> <span class="p">);</span>
</span><span class='line'>      <span class="kd">var</span> <span class="nx">endKey</span> <span class="o">=</span> <span class="nx">JSON</span><span class="p">.</span><span class="nx">stringify</span><span class="p">(</span> <span class="p">[</span> <span class="nx">result</span><span class="p">.</span><span class="nx">name</span><span class="p">,</span> <span class="nx">today</span><span class="p">.</span><span class="nx">toYMD</span><span class="p">()</span> <span class="p">]</span> <span class="p">);</span>
</span><span class='line'>
</span><span class='line'>      <span class="kd">var</span> <span class="nx">url</span> <span class="o">=</span> <span class="s1">&#39;http://isaacs.iriscouch.com/downloads/_design/app/_view/pkg?startkey=&#39;</span> <span class="o">+</span> <span class="nx">startKey</span> <span class="o">+</span> <span class="s1">&#39;&amp;&#39;</span> <span class="o">+</span> <span class="s1">&#39;endkey=&#39;</span> <span class="o">+</span> <span class="nx">endKey</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>      <span class="c1">// fetch download information</span>
</span><span class='line'>      <span class="nx">request</span><span class="p">(</span>
</span><span class='line'>        <span class="p">{</span> <span class="nx">url</span> <span class="o">:</span> <span class="nx">url</span><span class="p">,</span> <span class="nx">json</span> <span class="o">:</span> <span class="kc">true</span> <span class="p">},</span>
</span><span class='line'>        <span class="kd">function</span> <span class="nx">handlePlugin</span><span class="p">(</span> <span class="nx">error</span><span class="p">,</span> <span class="nx">response</span><span class="p">,</span> <span class="nx">body</span> <span class="p">)</span> <span class="p">{</span>
</span><span class='line'>          <span class="k">if</span> <span class="p">(</span><span class="o">!</span><span class="nx">error</span> <span class="o">&amp;&amp;</span> <span class="nx">response</span><span class="p">.</span><span class="nx">statusCode</span> <span class="o">===</span> <span class="mi">200</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>            <span class="k">if</span> <span class="p">(</span> <span class="nx">body</span><span class="p">.</span><span class="nx">rows</span> <span class="o">&amp;&amp;</span> <span class="nx">body</span><span class="p">.</span><span class="nx">rows</span><span class="p">.</span><span class="nx">length</span> <span class="p">)</span> <span class="p">{</span>
</span><span class='line'>              <span class="nx">result</span><span class="p">.</span><span class="nx">downloads</span> <span class="o">=</span> <span class="nx">body</span><span class="p">.</span><span class="nx">rows</span><span class="p">[</span> <span class="mi">0</span> <span class="p">].</span><span class="nx">value</span><span class="p">;</span>
</span><span class='line'>            <span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
</span><span class='line'>              <span class="nx">result</span><span class="p">.</span><span class="nx">downloads</span> <span class="o">=</span> <span class="s1">&#39;N/A&#39;</span><span class="p">;</span>
</span><span class='line'>            <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>            <span class="c1">// resolve deffered with enriched result</span>
</span><span class='line'>            <span class="nx">deferred</span><span class="p">.</span><span class="nx">resolve</span><span class="p">(</span> <span class="nx">result</span> <span class="p">);</span>
</span><span class='line'>          <span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
</span><span class='line'>            <span class="nx">deferred</span><span class="p">.</span><span class="nx">reject</span><span class="p">(</span> <span class="k">new</span> <span class="nb">Error</span><span class="p">(</span> <span class="nx">error</span> <span class="p">)</span> <span class="p">);</span>
</span><span class='line'>          <span class="p">}</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>      <span class="p">);</span>
</span><span class='line'>      <span class="k">return</span> <span class="nx">deferred</span><span class="p">.</span><span class="nx">promise</span><span class="p">;</span>
</span><span class='line'>    <span class="p">});</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1">// return a promise the will be resolved</span>
</span><span class='line'>    <span class="c1">// when all promises inside of &#39;results&#39; are resolved</span>
</span><span class='line'>    <span class="k">return</span> <span class="nx">Q</span><span class="p">.</span><span class="nx">all</span><span class="p">(</span> <span class="nx">resultsWithDownloads</span> <span class="p">);</span>
</span><span class='line'>  <span class="p">});</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="kd">var</span> <span class="nx">plugins</span> <span class="o">=</span> <span class="nx">fetchPluginList</span><span class="p">();</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// working with result when all requests are down</span>
</span><span class='line'><span class="c1">// argument &#39;resultsWithDownloads&#39; is result of &#39;Q.all&#39; at line 89</span>
</span><span class='line'><span class="nx">plugins</span><span class="p">.</span><span class="nx">then</span><span class="p">(</span> <span class="kd">function</span><span class="p">(</span> <span class="nx">resultsWithDownloads</span> <span class="p">)</span> <span class="p">{</span>
</span><span class='line'>  <span class="nx">doSomething</span><span class="p">(</span> <span class="nx">resultsWithDownloads</span> <span class="p">);</span>
</span><span class='line'><span class="p">}</span> <span class="p">);</span>
</span></code></pre></td></tr></table></div></figure>


<p><strong>Conclusion</strong></p>

<p>The <code>fetchPluginList</code> function looks first really heavy, but when you understood the principle ( looking at you <a href="https://twitter.com/TeixeiraPedro">@TeixeiraPedro</a> ;) ) the code has much more structure and is much easier to read. Especially lots of asynchronous operations that has to be in sync at some point loose complexity by using <code>Q.all</code>, which absolutely blew my mind.</p>

<p>For me it is clear, that I will structure next projects with lots of requests definitely promises based like the Grunt guys do to make my life easier.</p>

<p>And that is it. I hope you enjoyed it and thanks. :)</p>
<div class='octopress-authorbox'>
	<div class="author-pic">
		<img src="http://www.gravatar.com/avatar/22725c2d3eb331146549bf0d5d3c050c" alt="Stefan Judis" />
	</div>
	
	<div class="author-about">
		<h3>Stefan Judis</h3>
		<p>Frontend lover</p>
		<ul class="author-links">
			
			<li>
			<a href="http://twitter.com/stefanjudis">@stefanjudis</a>
			</li>
			
			
		</ul>
	</div>
</div>]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Using Underscore/Lo-Dash and stopping reinvent the wheel]]></title>
    <link href="http://4waisenkinder.github.io/blog/2013/10/12/you-use-underscore-slash-lo-dash/"/>
    <updated>2013-10-12T12:00:00+02:00</updated>
    <id>http://4waisenkinder.github.io/blog/2013/10/12/you-use-underscore-slash-lo-dash</id>
    <content type="html"><![CDATA[<p>Many projects include utility libraries like <a href="http://underscorejs.org/">underscore</a>/<a href="http://lodash.com/">lo-dash</a> these days. The reasons for that can be different. Either a MV* framework like <a href="http://backbonejs.org/">Backbone.js</a> is on bord and has it as dependency or the developers just discovered how much value these utility libraries provide. They are able to improve your daily workflow heavily by giving you a bunch of useful functions and helpers that will work across all the common browsers. I am using underscore for quite a long time now and last week I had to discover, that I am still not using all the features and that I reinvent the wheel in some cases for stuff that could (and should) be done by these libraries. <!-- more -->It is not a big deal, if it works at the end, but if you load underscore/lo-dash you should get out all of it. Additionally there is to say, that these libraries are built to give you the best solution performance wise. So the chance is quite high, that your solution will not perform as well (and as quick) as the underscore/lo-dash implementation does. Performance is important, so let us go the &ldquo;quicker way&rdquo;!</p>

<p>I see this blog as a kind of ressource for myself to store and discover stuff, that I want to remember and not to forget. To get a bit better at using these libraries I decided to have a more detailed look at the functions I do not use and to figure out use cases to make my code better and my workflow quicker in the future.</p>

<p>So let us dive into that and imagine my friend and colleague Bob comes to my table and wants to solve a problem he has. ;)</p>

<p><em>Note: If you only have to support modern browsers, you are able to use native Array functions like <code>map</code>, <code>filter</code> and <code>reduce</code>. Then there is probably no need to use underscore/lo-dash for these. They are supported in IE9 and higher.</em></p>

<h3>_.each</h3>

<blockquote><p>Hey Stefan, I have got a list of persons. How can I <strong>make them all</strong> 5cm <strong>smaller</strong>?</p></blockquote>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="kd">var</span> <span class="nx">persons</span> <span class="o">=</span> <span class="p">[</span>
</span><span class='line'>  <span class="p">{</span>
</span><span class='line'>    <span class="nx">name</span>   <span class="o">:</span> <span class="s1">&#39;Bob&#39;</span><span class="p">,</span>
</span><span class='line'>    <span class="nx">height</span> <span class="o">:</span> <span class="mi">195</span>
</span><span class='line'>  <span class="p">},</span>
</span><span class='line'>  <span class="p">{</span>
</span><span class='line'>    <span class="nx">name</span>   <span class="o">:</span> <span class="s1">&#39;Stefan&#39;</span><span class="p">,</span>
</span><span class='line'>    <span class="nx">height</span> <span class="o">:</span> <span class="mi">183</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'><span class="p">]</span>
</span><span class='line'>
</span><span class='line'><span class="nx">_</span><span class="p">.</span><span class="nx">each</span><span class="p">(</span> <span class="nx">persons</span><span class="p">,</span> <span class="kd">function</span><span class="p">(</span> <span class="nx">person</span> <span class="p">)</span> <span class="p">{</span>
</span><span class='line'>  <span class="nx">person</span><span class="p">.</span><span class="nx">height</span> <span class="o">=</span> <span class="nx">person</span><span class="p">.</span><span class="nx">height</span> <span class="o">-</span> <span class="mi">5</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span> <span class="p">);</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// =&gt; [ { height: 190, name: &quot;Bob&quot; }, { height: 178, name: &quot;Stefan&quot; } ]    </span>
</span></code></pre></td></tr></table></div></figure>


<h3>_.pluck</h3>

<blockquote><p>Hey Stefan, I have got a list of persons. How can I get <strong>all their heights</strong>?</p></blockquote>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="kd">var</span> <span class="nx">persons</span> <span class="o">=</span> <span class="p">[</span>
</span><span class='line'>  <span class="p">{</span>
</span><span class='line'>    <span class="nx">name</span>   <span class="o">:</span> <span class="s1">&#39;Bob&#39;</span><span class="p">,</span>
</span><span class='line'>    <span class="nx">height</span> <span class="o">:</span> <span class="mi">195</span>
</span><span class='line'>  <span class="p">},</span>
</span><span class='line'>  <span class="p">{</span>
</span><span class='line'>    <span class="nx">name</span>   <span class="o">:</span> <span class="s1">&#39;Stefan&#39;</span><span class="p">,</span>
</span><span class='line'>    <span class="nx">height</span> <span class="o">:</span> <span class="mi">183</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'><span class="p">]</span>
</span><span class='line'>
</span><span class='line'><span class="nx">personsHeights</span> <span class="o">=</span> <span class="nx">_</span><span class="p">.</span><span class="nx">pluck</span><span class="p">(</span> <span class="nx">persons</span><span class="p">,</span> <span class="s1">&#39;height&#39;</span> <span class="p">);</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// =&gt; [ 195, 183 ]</span>
</span></code></pre></td></tr></table></div></figure>


<h3>_.reduce</h3>

<blockquote><p>Hey Stefan, I have got a list of persons. How can I get the <strong>sum of their heights</strong>?</p></blockquote>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="kd">var</span> <span class="nx">persons</span> <span class="o">=</span> <span class="p">[</span>
</span><span class='line'>  <span class="p">{</span>
</span><span class='line'>    <span class="nx">name</span>   <span class="o">:</span> <span class="s1">&#39;Bob&#39;</span><span class="p">,</span>
</span><span class='line'>    <span class="nx">height</span> <span class="o">:</span> <span class="mi">195</span>
</span><span class='line'>  <span class="p">},</span>
</span><span class='line'>  <span class="p">{</span>
</span><span class='line'>    <span class="nx">name</span>   <span class="o">:</span> <span class="s1">&#39;Stefan&#39;</span><span class="p">,</span>
</span><span class='line'>    <span class="nx">height</span> <span class="o">:</span> <span class="mi">183</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'><span class="p">]</span>
</span><span class='line'>
</span><span class='line'><span class="kd">var</span> <span class="nx">heightSum</span> <span class="o">=</span> <span class="nx">_</span><span class="p">.</span><span class="nx">reduce</span><span class="p">(</span> <span class="nx">persons</span><span class="p">,</span> <span class="kd">function</span><span class="p">(</span> <span class="nx">memo</span><span class="p">,</span> <span class="nx">person</span> <span class="p">)</span> <span class="p">{</span>
</span><span class='line'>  <span class="k">return</span> <span class="nx">memo</span> <span class="o">+</span> <span class="nx">person</span><span class="p">.</span><span class="nx">height</span><span class="p">;</span>
</span><span class='line'><span class="p">},</span> <span class="mi">0</span> <span class="p">);</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// =&gt; 378</span>
</span></code></pre></td></tr></table></div></figure>


<blockquote><p>Hey Stefan, I have got a list of persons. How can I get <strong>the biggest height</strong>?</p></blockquote>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="kd">var</span> <span class="nx">persons</span> <span class="o">=</span> <span class="p">[</span>
</span><span class='line'>  <span class="p">{</span>
</span><span class='line'>    <span class="nx">name</span>   <span class="o">:</span> <span class="s1">&#39;Bob&#39;</span><span class="p">,</span>
</span><span class='line'>    <span class="nx">height</span> <span class="o">:</span> <span class="mi">195</span>
</span><span class='line'>  <span class="p">},</span>
</span><span class='line'>  <span class="p">{</span>
</span><span class='line'>    <span class="nx">name</span>   <span class="o">:</span> <span class="s1">&#39;Stefan&#39;</span><span class="p">,</span>
</span><span class='line'>    <span class="nx">height</span> <span class="o">:</span> <span class="mi">183</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'><span class="p">]</span>
</span><span class='line'>
</span><span class='line'><span class="kd">var</span> <span class="nx">biggestHeight</span> <span class="o">=</span> <span class="nx">_</span><span class="p">.</span><span class="nx">reduce</span><span class="p">(</span> <span class="nx">persons</span><span class="p">,</span> <span class="kd">function</span><span class="p">(</span> <span class="nx">memo</span><span class="p">,</span> <span class="nx">person</span> <span class="p">)</span> <span class="p">{</span>
</span><span class='line'>  <span class="k">if</span> <span class="p">(</span> <span class="nx">memo</span> <span class="o">&gt;</span> <span class="nx">person</span><span class="p">.</span><span class="nx">height</span> <span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">return</span> <span class="nx">memo</span><span class="p">;</span>
</span><span class='line'>  <span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">return</span> <span class="nx">person</span><span class="p">.</span><span class="nx">height</span><span class="p">;</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'><span class="p">},</span> <span class="mi">0</span> <span class="p">);</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// =&gt; 195</span>
</span></code></pre></td></tr></table></div></figure>


<h3>_.where</h3>

<blockquote><p>Hey Stefan, I have got a list of persons. How can I get all entries <strong>where the name is &ldquo;Bob&rdquo;</strong>?</p></blockquote>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="kd">var</span> <span class="nx">persons</span> <span class="o">=</span> <span class="p">[</span>
</span><span class='line'>  <span class="p">{</span>
</span><span class='line'>    <span class="nx">name</span>   <span class="o">:</span> <span class="s1">&#39;Bob&#39;</span><span class="p">,</span>
</span><span class='line'>    <span class="nx">height</span> <span class="o">:</span> <span class="mi">195</span>
</span><span class='line'>  <span class="p">},</span>
</span><span class='line'>  <span class="p">{</span>
</span><span class='line'>    <span class="nx">name</span>   <span class="o">:</span> <span class="s1">&#39;Stefan&#39;</span><span class="p">,</span>
</span><span class='line'>    <span class="nx">height</span> <span class="o">:</span> <span class="mi">183</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'><span class="p">]</span>
</span><span class='line'>
</span><span class='line'><span class="kd">var</span> <span class="nx">personsNamedBob</span> <span class="o">=</span> <span class="nx">_</span><span class="p">.</span><span class="nx">where</span><span class="p">(</span> <span class="nx">persons</span><span class="p">,</span> <span class="p">{</span> <span class="nx">name</span> <span class="o">:</span> <span class="s1">&#39;Bob&#39;</span> <span class="p">}</span> <span class="p">);</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// =&gt; [ { name : &quot;Bob&quot;, height : 195 } ]</span>
</span></code></pre></td></tr></table></div></figure>


<h3>_.every</h3>

<blockquote><p>Hey Stefan, I have got a list of persons. How can I get to know if they are <strong>all taller than 1.90m</strong>?</p></blockquote>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="kd">var</span> <span class="nx">persons</span> <span class="o">=</span> <span class="p">[</span>
</span><span class='line'>  <span class="p">{</span>
</span><span class='line'>    <span class="nx">name</span>   <span class="o">:</span> <span class="s1">&#39;Bob&#39;</span><span class="p">,</span>
</span><span class='line'>    <span class="nx">height</span> <span class="o">:</span> <span class="mi">195</span>
</span><span class='line'>  <span class="p">},</span>
</span><span class='line'>  <span class="p">{</span>
</span><span class='line'>    <span class="nx">name</span>   <span class="o">:</span> <span class="s1">&#39;Stefan&#39;</span><span class="p">,</span>
</span><span class='line'>    <span class="nx">height</span> <span class="o">:</span> <span class="mi">183</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'><span class="p">]</span>
</span><span class='line'>
</span><span class='line'><span class="kd">var</span> <span class="nx">allPersonsTallerThan190</span> <span class="o">=</span> <span class="nx">_</span><span class="p">.</span><span class="nx">every</span><span class="p">(</span> <span class="nx">persons</span><span class="p">,</span> <span class="kd">function</span><span class="p">(</span> <span class="nx">person</span> <span class="p">)</span> <span class="p">{</span>
</span><span class='line'>  <span class="k">return</span> <span class="p">(</span> <span class="nx">person</span><span class="p">.</span><span class="nx">height</span> <span class="o">&gt;</span> <span class="mi">190</span> <span class="p">);</span>
</span><span class='line'><span class="p">}</span> <span class="p">);</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// =&gt; false</span>
</span></code></pre></td></tr></table></div></figure>


<h3>_.countBy</h3>

<blockquote><p>Hey Stefan, I have got a list of persons. How can I <strong>group and count</strong> them <strong>depending on their height</strong>?</p></blockquote>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="kd">var</span> <span class="nx">persons</span> <span class="o">=</span> <span class="p">[</span>
</span><span class='line'>  <span class="p">{</span>
</span><span class='line'>    <span class="nx">name</span>   <span class="o">:</span> <span class="s1">&#39;Bob&#39;</span><span class="p">,</span>
</span><span class='line'>    <span class="nx">height</span> <span class="o">:</span> <span class="mi">195</span>
</span><span class='line'>  <span class="p">},</span>
</span><span class='line'>  <span class="p">{</span>
</span><span class='line'>    <span class="nx">name</span>   <span class="o">:</span> <span class="s1">&#39;Stefan&#39;</span><span class="p">,</span>
</span><span class='line'>    <span class="nx">height</span> <span class="o">:</span> <span class="mi">183</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'><span class="p">]</span>
</span><span class='line'>
</span><span class='line'><span class="kd">var</span> <span class="nx">groupedAndCountedPersons</span> <span class="o">=</span> <span class="nx">_</span><span class="p">.</span><span class="nx">countBy</span><span class="p">(</span> <span class="nx">persons</span><span class="p">,</span> <span class="kd">function</span><span class="p">(</span> <span class="nx">person</span> <span class="p">)</span> <span class="p">{</span>
</span><span class='line'>  <span class="k">if</span> <span class="p">(</span> <span class="nx">person</span><span class="p">.</span><span class="nx">height</span> <span class="o">&gt;=</span> <span class="mi">180</span> <span class="o">&amp;&amp;</span> <span class="nx">person</span><span class="p">.</span><span class="nx">height</span> <span class="o">&lt;</span> <span class="mi">190</span> <span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">return</span> <span class="s1">&#39;180-189&#39;</span><span class="p">;</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">if</span> <span class="p">(</span> <span class="nx">person</span><span class="p">.</span><span class="nx">height</span> <span class="o">&gt;=</span> <span class="mi">190</span> <span class="o">&amp;&amp;</span> <span class="nx">person</span><span class="p">.</span><span class="nx">height</span> <span class="o">&lt;</span> <span class="mi">200</span> <span class="p">)</span> <span class="p">{</span>
</span><span class='line'>      <span class="k">return</span> <span class="s1">&#39;190-199&#39;</span><span class="p">;</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">return</span> <span class="s1">&#39;outOfRange&#39;</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span> <span class="p">);</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// =&gt; { 190-199: 1, 180-189: 1 }</span>
</span></code></pre></td></tr></table></div></figure>


<h3>_.size</h3>

<blockquote><p>Hey Stefan, how can I check <strong>how many attributes</strong> I <strong>set</strong> for a person?</p></blockquote>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="kd">var</span> <span class="nx">personA</span> <span class="o">=</span> <span class="p">{};</span>
</span><span class='line'>
</span><span class='line'><span class="nx">_</span><span class="p">.</span><span class="nx">size</span><span class="p">(</span> <span class="nx">personA</span> <span class="p">);</span> <span class="c1">// =&gt; 0</span>
</span><span class='line'>
</span><span class='line'><span class="kd">var</span> <span class="nx">personB</span> <span class="o">=</span> <span class="p">{</span>
</span><span class='line'>  <span class="nx">height</span> <span class="o">:</span> <span class="mi">200</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="nx">_</span><span class="p">.</span><span class="nx">size</span><span class="p">(</span> <span class="nx">personB</span> <span class="p">);</span> <span class="c1">// =&gt; 1</span>
</span></code></pre></td></tr></table></div></figure>


<h3>More complex use case &ndash; the power of chaining</h3>

<blockquote><p>Hey Stefan, I have got a list of persons including their incomes. How can I get <strong>the sum of all freelance incomes</strong>?</p></blockquote>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="kd">var</span> <span class="nx">persons</span> <span class="o">=</span> <span class="p">[</span>
</span><span class='line'>  <span class="p">{</span>
</span><span class='line'>    <span class="nx">name</span>   <span class="o">:</span> <span class="s1">&#39;Bob&#39;</span><span class="p">,</span>
</span><span class='line'>    <span class="nx">incomes</span> <span class="o">:</span> <span class="p">[</span> <span class="p">{</span>
</span><span class='line'>      <span class="nx">type</span>  <span class="o">:</span> <span class="s1">&#39;Daily work&#39;</span><span class="p">,</span>
</span><span class='line'>      <span class="nx">value</span> <span class="o">:</span> <span class="mi">2000</span>
</span><span class='line'>      <span class="p">},</span>
</span><span class='line'>      <span class="p">{</span>
</span><span class='line'>        <span class="nx">type</span>  <span class="o">:</span> <span class="s1">&#39;Freelance&#39;</span><span class="p">,</span>
</span><span class='line'>        <span class="nx">value</span> <span class="o">:</span> <span class="mi">1000</span>
</span><span class='line'>      <span class="p">},</span>
</span><span class='line'>      <span class="p">{</span>
</span><span class='line'>        <span class="nx">type</span>  <span class="o">:</span> <span class="s1">&#39;Freelance&#39;</span><span class="p">,</span>
</span><span class='line'>        <span class="nx">value</span> <span class="o">:</span> <span class="mi">500</span>
</span><span class='line'>      <span class="p">}</span>
</span><span class='line'>    <span class="p">]</span>
</span><span class='line'>  <span class="p">},</span>
</span><span class='line'>  <span class="p">{</span>
</span><span class='line'>    <span class="nx">name</span>   <span class="o">:</span> <span class="s1">&#39;Stefan&#39;</span><span class="p">,</span>
</span><span class='line'>    <span class="nx">incomes</span> <span class="o">:</span> <span class="p">[</span>
</span><span class='line'>      <span class="p">{</span>
</span><span class='line'>        <span class="nx">type</span>  <span class="o">:</span> <span class="s1">&#39;Daily Work&#39;</span><span class="p">,</span>
</span><span class='line'>        <span class="nx">value</span> <span class="o">:</span> <span class="mi">750</span>
</span><span class='line'>      <span class="p">},</span>
</span><span class='line'>      <span class="p">{</span>
</span><span class='line'>        <span class="nx">type</span>  <span class="o">:</span> <span class="s1">&#39;Freelance&#39;</span><span class="p">,</span>
</span><span class='line'>        <span class="nx">value</span> <span class="o">:</span> <span class="mi">2000</span>
</span><span class='line'>      <span class="p">}</span>
</span><span class='line'>    <span class="p">]</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'><span class="p">];</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// use the power of chaining - underscore version :)</span>
</span><span class='line'><span class="c1">// underscore &amp; lo-dash behave slightly different in chaining case</span>
</span><span class='line'><span class="kd">var</span> <span class="nx">freelanceIncomes</span> <span class="o">=</span> <span class="nx">_</span><span class="p">.</span><span class="nx">chain</span><span class="p">(</span> <span class="nx">persons</span> <span class="p">)</span>
</span><span class='line'>                        <span class="p">.</span><span class="nx">pluck</span><span class="p">(</span> <span class="s1">&#39;incomes&#39;</span> <span class="p">)</span>
</span><span class='line'>                        <span class="p">.</span><span class="nx">flatten</span><span class="p">()</span>
</span><span class='line'>                        <span class="p">.</span><span class="nx">where</span><span class="p">(</span> <span class="p">{</span> <span class="nx">type</span><span class="o">:</span> <span class="s1">&#39;Freelance&#39;</span> <span class="p">}</span> <span class="p">)</span>
</span><span class='line'>                        <span class="p">.</span><span class="nx">reduce</span><span class="p">(</span> <span class="kd">function</span><span class="p">(</span> <span class="nx">memo</span><span class="p">,</span> <span class="nx">income</span> <span class="p">){</span> <span class="k">return</span> <span class="nx">memo</span> <span class="o">+</span> <span class="nx">income</span><span class="p">.</span><span class="nx">value</span> <span class="p">},</span> <span class="mi">0</span> <span class="p">)</span>
</span><span class='line'>                        <span class="p">.</span><span class="nx">value</span><span class="p">();</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// =&gt; 3500</span>
</span></code></pre></td></tr></table></div></figure>


<p><a href="https://twitter.com/eskimobloood">Andreas KÃ¶berle</a> commented this article saying that the my first approach for the last example can be done much more readable using chaining. And well, he was absolutely right.</p>

<p>Underscore/lo-dash gives you the possibility to <code>chain</code> the collection functions and that really rocks! You can just stick multiple operation after each other and have to call <code>value</code> at the end. No magic, but much more readability. Thanks for the tip. :)</p>

<h3>Conclusion</h3>

<p>Especially the last example shows the power of utility libraries (or Array functions). There are no foreach loops and no if-statements needed &ndash; no needed extra code to write. A kind of complex operation is done by 4 lines of underscore/lo-dash code. There are always multiple ways to solve a given problem, but doing it with the help of underscore/lo-dash (when it is available) is never a bad choice.</p>

<p>For me that means, especially when I have to deal with Arrays, I will always have a first look inside of the documentation of my utility library and check if the author provides me a way to solve my problem. Solving problems that are already solved should not be my job and <strong>I really should not reinvent the wheel</strong>. ;)</p>

<p>And that is it for today. Thx for reading and ideas/improvement on that are really welcome.</p>
<div class='octopress-authorbox'>
	<div class="author-pic">
		<img src="http://www.gravatar.com/avatar/22725c2d3eb331146549bf0d5d3c050c" alt="Stefan Judis" />
	</div>
	
	<div class="author-about">
		<h3>Stefan Judis</h3>
		<p>Frontend lover</p>
		<ul class="author-links">
			
			<li>
			<a href="http://twitter.com/stefanjudis">@stefanjudis</a>
			</li>
			
			
		</ul>
	</div>
</div>]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Getting started with web components and polymer.js - II]]></title>
    <link href="http://4waisenkinder.github.io/blog/2013/10/05/getting-started-with-web-components-and-polymer-dot-js-ii/"/>
    <updated>2013-10-05T18:36:00+02:00</updated>
    <id>http://4waisenkinder.github.io/blog/2013/10/05/getting-started-with-web-components-and-polymer-dot-js-ii</id>
    <content type="html"><![CDATA[<p><strong>This article describes still rarely supported Shadow DOM features. If you want to see them in action, make sure you use Chrome Canary with turned on &ldquo;Experimental web platform features&rdquo; found at <code>about:flags</code>.</strong></p>

<p>This is the second article of a tutorial series (I do not know yet how many articles will follow, but let us call it a series) about how to get started with web components and <a href="http://www.polymer-project.org/">polymer.js</a>. In case you missed the first article you can check it <a href="http://4waisenkinder.de/blog/2013/09/21/getting-started-with-web-components-and-polymer-dot-js/">here</a>. This article will describe things to improve the checkbox component, that got built up in the last article. By improving I mean making the web component more configurable and making it stylable from the &ldquo;outside&rdquo;. Additionally it will cover some mistakes that were made in first place, but let us just dive into it. ;)</p>

<!-- more -->


<p><strong>First of all I got a lot of feedback on the first article and I really want to thank everyone who read it, commented it, retweeted it and &ldquo;whatever&rdquo; it. Thank you &ndash; that was really awesome!</strong></p>

<h3>Bugs discovered in last article</h3>

<p>In the last article I discovered two bugs inside of polymer.js library:</p>

<ul>
<li>events are bubbling out of the &ldquo;Shadow DOM&rdquo; in polyfill</li>
<li>using ID&rsquo;s can lead to misbehaviour in polyfill</li>
</ul>


<p>In my case the first bug was, that the <code>change</code> event bubbled out of the custom element provided by polymer (<a href="https://github.com/Polymer/polymer/issues/296">bug</a> is already reported). After noticing this, I checked out the spec for Shadow DOM and had to discover something interesting. According to the <a href="http://www.w3.org/TR/shadow-dom/#events-that-are-always-stopped#events-that-are-always-stopped">spec</a> there are only specific events defined, that are not allowed to bubble out of the element&rsquo;s Shadow DOM.</p>

<blockquote><p>&ldquo;The following events must always be stopped at the nearest shadow boundary:</p>

<ul>
<li>abort</li>
<li>error</li>
<li>select</li>
<li>change</li>
<li>load</li>
<li>reset</li>
<li>resize</li>
<li>scroll</li>
<li>selectstart&#8221;</li>
</ul>
</blockquote>

<p>I do not know, what is the base for this event definition, but when dealing with input fields for example it is really good to know, that events like <code>keypress</code> are supposed to bubble up and for example the <code>change</code> event is not.</p>

<p>For me that means, when I will build up custom elements, I will stick to custom events to avoid misbehaviour in first plase. It feels a bit strange to me that I am &ldquo;allowed&rdquo; to attach listener to the <code>keypress</code> event and not to the <code>change</code> event (which I would personally prefer), but I guess I have to deal with it. ;)</p>

<p>The second bug is about ID handling inside of the polymer polyfill. There is no solution for ID handling yet. It is not a big deal, when you want to use your new custom element only once (or you only have to support Chrome canary ;)), but if you want to have multiple elements of the same custom element in one document, you will end up with duplicate ID&rsquo;s and in specific cases (using <code>label-for-relation</code>) with misbehaviour. It doesn&rsquo;t look like there will be a solution for that soon (<a href="https://github.com/Polymer/polymer/issues/295">bug ticket</a>), but I described a workaround in the <a href="http://4waisenkinder.de/blog/2013/09/21/getting-started-with-web-components-and-polymer-dot-js/">first article</a>.</p>

<h3>@host rule and defining styles for host element</h3>

<p>There was on thing I did not notice when developing the first web component version of my checkbox. It had no width and height.</p>

<p><img class="left" src="http://4waisenkinder.github.io/images/blog/stefanjudis/componentHeightWidthZero.png" width="527" height="249" title="Custom element with width & height equal 0px" alt="Custom element with width & height equal 0px"></p>

<p>The reason for that is, that when defining new custom elements they are defined to be <code>display : inline</code> per default. To solve this issue the custom element itself needs to be styled. The web components spec defines a <code>@host</code> rule for this purpose (read spec <a href="http://www.w3.org/TR/2013/WD-components-intro-20130606/#css-and-shadow-dom">here</a>).</p>

<p>The old checkbox markup up was the following:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>&lt;template&gt;
</span><span class='line'>  &lt;style&gt;
</span><span class='line'>    /* lot of styles here */
</span><span class='line'>  &lt;/style&gt;
</span><span class='line'>  &lt;div class="switch "&gt;
</span><span class='line'>    &lt;div class="switch__circle"&gt;
</span><span class='line'>      &lt;input id="" class="switch__input" type="checkbox" on-change="changeHandler"checked="checked"&gt;
</span><span class='line'>      &lt;div class="switch__innerCircles"&gt;&lt;/div&gt;
</span><span class='line'>      &lt;label class="switch__label" for=""&gt;Switch me!!!&lt;/label&gt;
</span><span class='line'>    &lt;/div&gt;
</span><span class='line'>  &lt;/div&gt;
</span><span class='line'>&lt;/template&gt;</span></code></pre></td></tr></table></div></figure>


<p>It implemented a container, that had the class <code>switch</code>. This container included all the checkbox markup which got styled and represented the actual checkbox. By using the <code>@host</code> rule I was able to get rid of this container (because the host element itself takes the function as a container). Inside of it, it is possible to set the custom element to <code>display : block</code>, which leads to a proper width and height.</p>

<p>According to the spec, you have to use a <code>:scope</code> selector to apply your styling to the shadow host. <code>:scope</code> is a bit redundant in this case, but I already saw some people complaining about that, so I guess, the spec will change later on. For now you have to use it.</p>

<p>After cleaning up and using <code>@host</code> rule I ended up with this:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>&lt;polymer-element name="sj-checkbox" attributes="size fallbackId"&gt;
</span><span class='line'>  &lt;template&gt;
</span><span class='line'>    &lt;style&gt;
</span><span class='line'>      @host {
</span><span class='line'>        :scope {
</span><span class='line'>          /* no width and height set */
</span><span class='line'>          /* you wonder why? */
</span><span class='line'>          /* Keep on reading. ;) */
</span><span class='line'>          position: relative;
</span><span class='line'>          display: block;
</span><span class='line'>          background-color: #baf0d8;
</span><span class='line'>          border-radius: 20%;
</span><span class='line'>          overflow-x: hidden;
</span><span class='line'>          -webkit-box-shadow: 0 0.333em 0.75em #393939;
</span><span class='line'>          -moz-box-shadow: 0 0.333em 0.75em #393939;
</span><span class='line'>          box-shadow: 0 0.333em 0.75em #393939;
</span><span class='line'>          z-index: 0;
</span><span class='line'>        }
</span><span class='line'>  
</span><span class='line'>      /* more host styles here */
</span><span class='line'>      
</span><span class='line'>      /* defining preset sizes */
</span><span class='line'>        :scope.small {
</span><span class='line'>          width: 50px;
</span><span class='line'>          height: 50px;
</span><span class='line'>          font-size: 0.5em;
</span><span class='line'>        }
</span><span class='line'>        
</span><span class='line'>        /* more size presets here */
</span><span class='line'>      }
</span><span class='line'>      
</span><span class='line'>    /* other styles here */
</span><span class='line'>  
</span><span class='line'>    &lt;/style&gt;
</span><span class='line'>    &lt;div class="switch__circle" pseudo="x-sj-circle"&gt;
</span><span class='line'>        &lt;input id="" class="switch__input" type="checkbox" on-change="changeHandler"checked="checked"&gt;
</span><span class='line'>        &lt;div class="switch__innerCircles" pseudo="x-sj-inner-circles"&gt;&lt;/div&gt;
</span><span class='line'>        &lt;label class="switch__label" for="" pseudo="x-sj-label"&gt;Switch me!!!&lt;/label&gt;
</span><span class='line'>    &lt;/div&gt;
</span><span class='line'>  &lt;/template&gt;
</span><span class='line'>&lt;/polymer-element&gt;</span></code></pre></td></tr></table></div></figure>


<p>The template now includes one div less and the CSS rules that were applied to the old div container moved into <code>@host :scope</code>. I really liked that, because it is always nice to have less markup for the same result. ;)</p>

<p>After that I decided to set no width and height for the custom element <code>sj-checkbox</code> at default, but provided three default sizes, which will be applied when setting a given class to the custom element. This way the custom element is configurable by just adding a class to it. That makes the web component easier to handle and it is relatively clear, what is going on, when looking at the markup for the dependent custom element.</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>&lt;li&gt;&lt;sj-checkbox class="big" fallbackId="checkboxBigStyled"&gt;&lt;/sj-checkbox&gt;
</span><span class='line'>&lt;li&gt;&lt;sj-checkbox class="medium" fallbackId="checkboxMediumStyled"&gt;&lt;/sj-checkbox&gt;
</span><span class='line'>&lt;li&gt;&lt;sj-checkbox class="small" fallbackId="checkboxSmallStyled"&gt;&lt;/sj-checkbox&gt;</span></code></pre></td></tr></table></div></figure>


<p>The reason why I set no default width and height is the following. If you want to define your desired styling to the custom element and it already has defined the rules for the element host you want to set, it will not work. Here are few examples what will work and what not:</p>

<p>Not working:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>&lt;style&gt;
</span><span class='line'>#switchesComponentsStyled .customWidth {
</span><span class='line'>  width: 80px;
</span><span class='line'>  height: 80px;
</span><span class='line'>}
</span><span class='line'>&lt;/style&gt;
</span><span class='line'>
</span><span class='line'>/* sj checkbox has width and height defined in '@host :scope' */
</span><span class='line'>&lt;li&gt;&lt;sj-checkbox class="customWidth" fallbackId="checkboxCustomStyled"&gt;&lt;/sj-checkbox&gt;
</span></code></pre></td></tr></table></div></figure>


<p>Kind of working, but I try always to avoid usage of <code>!important</code>:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>&lt;style&gt;
</span><span class='line'>#switchesComponentsStyled .customWidth {
</span><span class='line'>  width: 80px !important;
</span><span class='line'>  height: 80px !important;
</span><span class='line'>}
</span><span class='line'>&lt;/style&gt;
</span><span class='line'>
</span><span class='line'>/* sj checkbox has width and height defined in '@host :scope' */
</span><span class='line'>&lt;li&gt;&lt;sj-checkbox class="customWidth" fallbackId="checkboxCustomStyled"&gt;&lt;/sj-checkbox&gt;</span></code></pre></td></tr></table></div></figure>


<p>Working:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>&lt;style&gt;
</span><span class='line'>#switchesComponentsStyled .customWidth {
</span><span class='line'>  width: 80px;
</span><span class='line'>  height: 80px;
</span><span class='line'>}
</span><span class='line'>&lt;/style&gt;
</span><span class='line'>
</span><span class='line'>/* sj checkbox has no width and height defined in '@host :scope' */
</span><span class='line'>&lt;li&gt;&lt;sj-checkbox class="customWidth" fallbackId="checkboxCustomStyled"&gt;&lt;/sj-checkbox&gt;</span></code></pre></td></tr></table></div></figure>


<p>For me the third option is the best solution. The user is forced to define the width and height of the custom element by himself/herself or set a given class to use predefined rules. This way he/she has always to decide, what is wished and can implement it easily.</p>

<p>By defining <code>@host</code> styles (including rules for <code>display</code>, <code>width</code> and <code>height</code>) the custom element now has a proper width and height. :)</p>

<p><img class="left" src="http://4waisenkinder.github.io/images/blog/stefanjudis/componentProperWidthHeight.png" width="447" height="223" title="Custom element with proper width and height" alt="Custom element with proper width and height"></p>

<h3>Making it configurable using pseudo attributes | part pseudo elements</h3>

<p>I really like the way the checkbox is styled, but we are in the era of &ldquo;Flat Design&rdquo; now, right? So I decided to make it a bit more flexible and give the user of this component the possibility to remove the shadows, if he/she want to. This can be done by defining so called pseudo ID&rsquo;s or part pseudo elements.</p>

<h4>Using pseudo ID&rsquo;s</h4>

<p>By defining pseudo ID&rsquo;s the creator of the web component gives the user the possibility to set styles to elements, that are hidden inside of the Shadow DOM. Everybody who styled a default input element probably noticed that already.</p>

<p>The tricky part about them is, that they have to be prefixed with <code>x-</code>. According to the <a href="http://www.w3.org/TR/shadow-dom/#custom-pseudo-elements">spec</a> custom pseudo-element values must be considered invalid, if they are not prefixed the correct way.</p>

<blockquote><p>&ldquo;The custom pseudo-element value must be considered valid if it starts with a U+0078 LATIN SMALL LETTER X, followed by U+002D HYPHEN-MINUS. Otherwise, the custom pseudo-element value must be considered invalid.&rdquo;</p></blockquote>

<p>After implementation of the pseudo ID&rsquo;s the template for checkbox looks like this:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>&lt;template&gt;
</span><span class='line'>  &lt;style&gt;
</span><span class='line'>  /* lot of styles here */
</span><span class='line'>  &lt;/style&gt;
</span><span class='line'>  /* new pseudo ID's implemented */
</span><span class='line'>  &lt;div class="switch__circle" pseudo="x-sj-circle"&gt;
</span><span class='line'>    &lt;input id="" class="switch__input" type="checkbox" on-change="changeHandler"checked="checked"&gt;
</span><span class='line'>    &lt;div class="switch__innerCircles" pseudo="x-sj-inner-circles"&gt;&lt;/div&gt;
</span><span class='line'>    &lt;label class="switch__label" for="" pseudo="x-sj-label"&gt;Switch me!!!&lt;/label&gt;
</span><span class='line'>  &lt;/div&gt;
</span><span class='line'>&lt;/template&gt;</span></code></pre></td></tr></table></div></figure>


<p>Now it is possible to remove all the shadows, because the dependent elements are stylable from the &ldquo;outside&rdquo; with the following rules:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
</pre></td><td class='code'><pre><code class='css'><span class='line'><span class="c">/**</span>
</span><span class='line'><span class="c"> * Styling with pseudo ID&#39;s</span>
</span><span class='line'><span class="c"> */</span>
</span><span class='line'>
</span><span class='line'><span class="c">/* style for native shadow DOM support */</span>
</span><span class='line'><span class="nf">#switchesComponentsStyled</span> <span class="nt">sj-checkbox</span><span class="o">:</span><span class="nd">:x-sj-circle:after</span> <span class="p">{</span>
</span><span class='line'>  <span class="o">-</span><span class="n">webkit</span><span class="o">-</span><span class="n">box</span><span class="o">-</span><span class="n">shadow</span><span class="o">:</span> <span class="k">none</span><span class="p">;</span>
</span><span class='line'>  <span class="o">-</span><span class="n">moz</span><span class="o">-</span><span class="n">box</span><span class="o">-</span><span class="n">shadow</span><span class="o">:</span> <span class="k">none</span><span class="p">;</span>
</span><span class='line'>  <span class="n">box</span><span class="o">-</span><span class="n">shadow</span><span class="o">:</span> <span class="k">none</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="c">/* style for polifill */</span>
</span><span class='line'><span class="nf">#switchesComponentsStyled</span> <span class="nt">sj-checkbox</span> <span class="o">[</span><span class="nt">pseudo</span><span class="o">=</span><span class="nt">x-sj-circle</span><span class="o">]</span><span class="nd">:after</span> <span class="p">{</span>
</span><span class='line'>  <span class="o">-</span><span class="n">webkit</span><span class="o">-</span><span class="n">box</span><span class="o">-</span><span class="n">shadow</span><span class="o">:</span> <span class="k">none</span><span class="p">;</span>
</span><span class='line'>  <span class="o">-</span><span class="n">moz</span><span class="o">-</span><span class="n">box</span><span class="o">-</span><span class="n">shadow</span><span class="o">:</span> <span class="k">none</span><span class="p">;</span>
</span><span class='line'>  <span class="n">box</span><span class="o">-</span><span class="n">shadow</span><span class="o">:</span> <span class="k">none</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="c">/* all the other ID&#39;s here */</span>
</span></code></pre></td></tr></table></div></figure>


<p>About that is to say, that I really try the component to behave and look the same in shadow DOM supporting and not supporting browsers. That is why I implemented two rules. The first rule shows how to access elements with given pseudo ID&rsquo;s. The second one is for the polyfill. We can just access the dependent element via the attribute CSS selector, because there is no &ldquo;real&rdquo; shadow DOM, where it could be hidden in. The polyfill just renders HTML inside of a custom element, which makes it really easy to select needed elements.</p>

<h4>Using part pseudo elements</h4>

<p>When implementing this ID solution, I did basically the same for all the elements. Reseting the styles for three different ID&rsquo;s. I thought about that and it is the perfect use case for a class or something like that to achieve the goal. Remember the coding principle DRY (<em>Do not repeat yourself</em>)? ;)</p>

<p>The spec defines something called <a href="https://dvcs.w3.org/hg/webcomponents/raw-file/tip/spec/shadow/index.html#part-pseudo-elements">part pseudo-elements</a> for that situation.</p>

<p>All you have to do for that is to give all elements a <code>part</code>-attribute.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class='css'><span class='line'><span class="o">&lt;</span><span class="nt">template</span><span class="o">&gt;</span>
</span><span class='line'>  <span class="o">&lt;</span><span class="nt">style</span><span class="o">&gt;</span>
</span><span class='line'>  <span class="c">/* lot of styles here */</span>
</span><span class='line'>  <span class="o">&lt;/</span><span class="nt">style</span><span class="o">&gt;</span>
</span><span class='line'>  <span class="c">/* new part attributes implemented */</span>
</span><span class='line'>  <span class="o">&lt;</span><span class="nt">div</span> <span class="nt">class</span><span class="o">=</span><span class="s2">&quot;switch__circle&quot;</span> <span class="nt">part</span><span class="o">=</span><span class="s2">&quot;shadow&quot;</span><span class="o">&gt;</span>
</span><span class='line'>    <span class="o">&lt;</span><span class="nt">input</span> <span class="nt">id</span><span class="o">=</span><span class="s2">&quot;&quot;</span> <span class="nt">class</span><span class="o">=</span><span class="s2">&quot;switch__input&quot;</span> <span class="nt">type</span><span class="o">=</span><span class="s2">&quot;checkbox&quot;</span> <span class="nt">on-change</span><span class="o">=</span><span class="s2">&quot;changeHandler&quot;</span><span class="nt">checked</span><span class="o">=</span><span class="s2">&quot;checked&quot;</span><span class="o">&gt;</span>
</span><span class='line'>    <span class="o">&lt;</span><span class="nt">div</span> <span class="nt">class</span><span class="o">=</span><span class="s2">&quot;switch__innerCircles&quot;</span> <span class="nt">part</span><span class="o">=</span><span class="s2">&quot;shadow&quot;</span><span class="o">&gt;&lt;/</span><span class="nt">div</span><span class="o">&gt;</span>
</span><span class='line'>    <span class="o">&lt;</span><span class="nt">label</span> <span class="nt">class</span><span class="o">=</span><span class="s2">&quot;switch__label&quot;</span> <span class="nt">for</span><span class="o">=</span><span class="s2">&quot;&quot;</span> <span class="nt">part</span><span class="o">=</span><span class="s2">&quot;shadow&quot;</span><span class="o">&gt;</span><span class="nt">Switch</span> <span class="nt">me</span><span class="o">!!!&lt;/</span><span class="nt">label</span><span class="o">&gt;</span>
</span><span class='line'>  <span class="o">&lt;/</span><span class="nt">div</span><span class="o">&gt;</span>
</span><span class='line'><span class="o">&lt;/</span><span class="nt">template</span><span class="o">&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<p>After implementing the new attributes, you can use the part pseudo element selector to style the matching elements.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
</pre></td><td class='code'><pre><code class='css'><span class='line'><span class="c">/**</span>
</span><span class='line'><span class="c"> * Styling with part pseudo elements</span>
</span><span class='line'><span class="c"> */</span>
</span><span class='line'>
</span><span class='line'><span class="c">/* style for native shadow DOM support */</span>
</span><span class='line'><span class="c">/* fancy selector isn&#39;t it? :) */</span>
</span><span class='line'><span class="nt">sj-checkbox-part</span><span class="o">:</span><span class="nd">:part</span><span class="o">(</span><span class="nt">shadow</span><span class="o">),</span>
</span><span class='line'><span class="nt">sj-checkbox-part</span><span class="o">:</span><span class="nd">:part</span><span class="o">(</span><span class="nt">shadow</span><span class="o">)</span><span class="nd">:before</span><span class="o">,</span>
</span><span class='line'><span class="nt">sj-checkbox-part</span><span class="o">:</span><span class="nd">:part</span><span class="o">(</span><span class="nt">shadow</span><span class="o">)</span><span class="nd">:after</span> <span class="p">{</span>
</span><span class='line'>  <span class="o">-</span><span class="n">webkit</span><span class="o">-</span><span class="n">box</span><span class="o">-</span><span class="n">shadow</span><span class="o">:</span> <span class="k">none</span><span class="p">;</span>
</span><span class='line'>  <span class="o">-</span><span class="n">moz</span><span class="o">-</span><span class="n">box</span><span class="o">-</span><span class="n">shadow</span><span class="o">:</span> <span class="k">none</span><span class="p">;</span>
</span><span class='line'>  <span class="n">box</span><span class="o">-</span><span class="n">shadow</span><span class="o">:</span> <span class="k">none</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="c">/* style for polifill */</span>
</span><span class='line'><span class="nt">sj-checkbox-part</span> <span class="o">[</span><span class="nt">part</span><span class="o">=</span><span class="nt">shadow</span><span class="o">],</span>
</span><span class='line'><span class="nt">sj-checkbox-part</span> <span class="o">[</span><span class="nt">part</span><span class="o">=</span><span class="nt">shadow</span><span class="o">]</span><span class="nd">:before</span><span class="o">,</span>
</span><span class='line'><span class="nt">sj-checkbox-part</span> <span class="o">[</span><span class="nt">part</span><span class="o">=</span><span class="nt">shadow</span><span class="o">]</span><span class="nd">:after</span> <span class="p">{</span>
</span><span class='line'>  <span class="o">-</span><span class="n">webkit</span><span class="o">-</span><span class="n">box</span><span class="o">-</span><span class="n">shadow</span><span class="o">:</span> <span class="k">none</span><span class="p">;</span>
</span><span class='line'>  <span class="o">-</span><span class="n">moz</span><span class="o">-</span><span class="n">box</span><span class="o">-</span><span class="n">shadow</span><span class="o">:</span> <span class="k">none</span><span class="p">;</span>
</span><span class='line'>  <span class="n">box</span><span class="o">-</span><span class="n">shadow</span><span class="o">:</span> <span class="k">none</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>That looks much better. After using part pseudo attributes there is only one rule needed to give three elements the wished styling.</p>

<p>I implemented again two rules, to make it work for supporting and not supporting browsers. We have to be friendly to everyone, right? ;)</p>

<p>By using the part pseudo element we can provide the option to apply the same styling for a lot of elements. I really like that. It makes everything much cleaner.</p>

<h3>Stuff to be careful with and keep in mind</h3>

<ul>
<li>think of prefixing pseudo ID&rsquo;s with &lsquo;x-&rsquo;</li>
<li>think of browsers that will not support the new fancy shadow DOM stuff</li>
</ul>


<p>And that is it for today. You can find the actual implementation <a href="http://stefanjudis.github.io/webComponents-tutorial-II/">here</a>. Next steps will be to implement some functionality via JavaScript to the checkbox and to use the content of the custom element to place it inside of the shadow DOM. A friend and I are also planning to build up a complete audio player web component, but let us make small steps first. :)</p>

<p>I hope you enjoyed the article and feedback is as always really welcome.</p>

<p>Thx for reading. :)</p>
<div class='octopress-authorbox'>
	<div class="author-pic">
		<img src="http://www.gravatar.com/avatar/22725c2d3eb331146549bf0d5d3c050c" alt="Stefan Judis" />
	</div>
	
	<div class="author-about">
		<h3>Stefan Judis</h3>
		<p>Frontend lover</p>
		<ul class="author-links">
			
			<li>
			<a href="http://twitter.com/stefanjudis">@stefanjudis</a>
			</li>
			
			
		</ul>
	</div>
</div>]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Using SVG gradients and filters with d3.js]]></title>
    <link href="http://4waisenkinder.github.io/blog/2013/09/28/using-gradient-and-shadows-with-d3-dot-js/"/>
    <updated>2013-09-28T21:53:00+02:00</updated>
    <id>http://4waisenkinder.github.io/blog/2013/09/28/using-gradient-and-shadows-with-d3-dot-js</id>
    <content type="html"><![CDATA[<p>I play around with the <a href="http://d3js.org/">d3.js</a> library for a while now and I always thought that stuff like gradients and shadows are not so easy to create with SVG and that it is simply not made for that. The reason for that is, that when I&rsquo;m browsing through the d3 <a href="https://github.com/mbostock/d3/wiki/Gallery">example gallery</a> there is so much awesome data visulation, but shadows and gradients are not really present. I know, we are inside of the &ldquo;flat design era&rdquo; right now, so who should care about that, but I really like shadows, when they are at the correct places. Gradients on the other hand make very often the tiny tiny difference of a good design and a great design.</p>

<!-- more -->


<p>I started working on a nice design I found at <a href="http://dribbble.com/shots/1244676-Cloud-Storage/attachments/168917">dribbble</a> (I know it&rsquo;s not pixel perfect) and came to the point to implement some nice d3 animations rather quickly. And here is the <a href="http://codepen.io/stefanjudis/full/jawGn">final result</a>.</p>

<p><img class="left" src="http://4waisenkinder.github.io/images/blog/stefanjudis/cloudStorageUi.jpg" width="740" height="473" title="Cloud storage user interface at codepen" alt="Cloud storage user interface at codepen"></p>

<p>The timeline diagram and the three circles are made in SVG. Both diagram types are supposed by the design to include multiple shadows and gradients. So let&rsquo;s have a look how that works.</p>

<p>Shadows and gradients are so called graphical objects in terms of SVG. Depending on their type they won&rsquo;t be rendered. For gradients and filters (shadows are filters basically) is that the case. If you are interested and want to dive more into that, here are the general specs:</p>

<ul>
<li><a href="http://www.w3.org/TR/SVG/intro.html#TermGradientElement">spec for gradients</a></li>
<li><a href="http://www.w3.org/TR/SVG/filters.html#FilterElement">spec for filters</a></li>
</ul>


<p>The way this works is, that you have to define these elements first and then reference them via id inside of the element you want to use them. Pretty straight forward. The spec recommends that all elements that will be referenced should be defined inside of a <code>defs</code> element.</p>

<p>So let&rsquo;s start with that and see some d3 code! :)</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'><span class="c1">// append new svg</span>
</span><span class='line'><span class="c1">// and center it</span>
</span><span class='line'><span class="kd">var</span> <span class="nx">svg</span> <span class="o">=</span> <span class="nx">d3container</span><span class="p">.</span><span class="nx">append</span><span class="p">(</span> <span class="s1">&#39;svg&#39;</span> <span class="p">)</span>
</span><span class='line'>                     <span class="p">.</span><span class="nx">attr</span><span class="p">(</span> <span class="s1">&#39;width&#39;</span><span class="p">,</span> <span class="nx">width</span> <span class="p">)</span>
</span><span class='line'>                     <span class="p">.</span><span class="nx">attr</span><span class="p">(</span> <span class="s1">&#39;height&#39;</span><span class="p">,</span> <span class="nx">height</span> <span class="p">)</span>
</span><span class='line'>                     <span class="p">.</span><span class="nx">append</span><span class="p">(</span> <span class="s1">&#39;g&#39;</span> <span class="p">)</span>
</span><span class='line'>                     <span class="p">.</span><span class="nx">attr</span><span class="p">(</span>
</span><span class='line'>                       <span class="s1">&#39;transform&#39;</span><span class="p">,</span>
</span><span class='line'>                       <span class="s1">&#39;translate(&#39;</span> <span class="o">+</span> <span class="nx">width</span> <span class="o">/</span> <span class="mi">2</span> <span class="o">+</span> <span class="s1">&#39;,&#39;</span> <span class="o">+</span> <span class="nx">height</span> <span class="o">/</span> <span class="mi">2</span> <span class="o">+</span> <span class="s1">&#39;)&#39;</span>
</span><span class='line'>                     <span class="p">);</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// filter stuff</span>
</span><span class='line'><span class="cm">/* For the shadow filter... */</span>
</span><span class='line'><span class="c1">// everything that will be referenced</span>
</span><span class='line'><span class="c1">// should be defined inside of a &lt;defs&gt; element ;)</span>
</span><span class='line'><span class="kd">var</span> <span class="nx">defs</span> <span class="o">=</span> <span class="nx">svg</span><span class="p">.</span><span class="nx">append</span><span class="p">(</span> <span class="s1">&#39;defs&#39;</span> <span class="p">);</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// append filter element</span>
</span><span class='line'><span class="kd">var</span> <span class="nx">filter</span> <span class="o">=</span> <span class="nx">defs</span><span class="p">.</span><span class="nx">append</span><span class="p">(</span> <span class="s1">&#39;filter&#39;</span> <span class="p">)</span>
</span><span class='line'>                 <span class="p">.</span><span class="nx">attr</span><span class="p">(</span> <span class="s1">&#39;id&#39;</span><span class="p">,</span> <span class="s1">&#39;dropshadow&#39;</span> <span class="p">)</span> <span class="c1">/// !!! important - define id to reference it later</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// append gaussian blur to filter</span>
</span><span class='line'><span class="nx">filter</span><span class="p">.</span><span class="nx">append</span><span class="p">(</span> <span class="s1">&#39;feGaussianBlur&#39;</span> <span class="p">)</span>
</span><span class='line'>      <span class="p">.</span><span class="nx">attr</span><span class="p">(</span> <span class="s1">&#39;in&#39;</span><span class="p">,</span> <span class="s1">&#39;SourceAlpha&#39;</span> <span class="p">)</span>
</span><span class='line'>      <span class="p">.</span><span class="nx">attr</span><span class="p">(</span> <span class="s1">&#39;stdDeviation&#39;</span><span class="p">,</span> <span class="mi">3</span> <span class="p">)</span> <span class="c1">// !!! important parameter - blur</span>
</span><span class='line'>      <span class="p">.</span><span class="nx">attr</span><span class="p">(</span> <span class="s1">&#39;result&#39;</span><span class="p">,</span> <span class="s1">&#39;blur&#39;</span> <span class="p">);</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// append offset filter to result of gaussion blur filter</span>
</span><span class='line'><span class="nx">filter</span><span class="p">.</span><span class="nx">append</span><span class="p">(</span> <span class="s1">&#39;feOffset&#39;</span> <span class="p">)</span>
</span><span class='line'>      <span class="p">.</span><span class="nx">attr</span><span class="p">(</span> <span class="s1">&#39;in&#39;</span><span class="p">,</span> <span class="s1">&#39;blur&#39;</span> <span class="p">)</span>
</span><span class='line'>      <span class="p">.</span><span class="nx">attr</span><span class="p">(</span> <span class="s1">&#39;dx&#39;</span><span class="p">,</span> <span class="mi">2</span> <span class="p">)</span> <span class="c1">// !!! important parameter - x-offset</span>
</span><span class='line'>      <span class="p">.</span><span class="nx">attr</span><span class="p">(</span> <span class="s1">&#39;dy&#39;</span><span class="p">,</span> <span class="mi">3</span> <span class="p">)</span> <span class="c1">// !!! important parameter - y-offset</span>
</span><span class='line'>      <span class="p">.</span><span class="nx">attr</span><span class="p">(</span> <span class="s1">&#39;result&#39;</span><span class="p">,</span> <span class="s1">&#39;offsetBlur&#39;</span> <span class="p">);</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// merge result with original image</span>
</span><span class='line'><span class="kd">var</span> <span class="nx">feMerge</span> <span class="o">=</span> <span class="nx">filter</span><span class="p">.</span><span class="nx">append</span><span class="p">(</span> <span class="s1">&#39;feMerge&#39;</span> <span class="p">);</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// first layer result of blur and offset</span>
</span><span class='line'><span class="nx">feMerge</span><span class="p">.</span><span class="nx">append</span><span class="p">(</span> <span class="s1">&#39;feMergeNode&#39;</span> <span class="p">)</span>
</span><span class='line'>       <span class="p">.</span><span class="nx">attr</span><span class="p">(</span> <span class="s1">&#39;in&quot;, &quot;offsetBlur&#39;</span> <span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// original image on top</span>
</span><span class='line'><span class="nx">feMerge</span><span class="p">.</span><span class="nx">append</span><span class="p">(</span> <span class="s1">&#39;feMergeNode&#39;</span> <span class="p">)</span>
</span><span class='line'>       <span class="p">.</span><span class="nx">attr</span><span class="p">(</span> <span class="s1">&#39;in&#39;</span><span class="p">,</span> <span class="s1">&#39;SourceGraphic&#39;</span> <span class="p">);</span>
</span><span class='line'><span class="c1">// end filter stuff</span>
</span></code></pre></td></tr></table></div></figure>


<p>Applying a shadow to an element in the world of SVG needs a bit more than doing it CSS, but I have to admit, that the documentation for SVG filters is really good. The W3C provides a lot of example including one for <a href="http://www.w3.org/TR/SVG/filters.html#AnExample">shadows</a>. Developers that are used to work with CSS mostly care only about three parameters &ndash; x-offset, y-offset and blur. I marked them inside of the code example.</p>

<p>The fourth parameter that is configurable in CSS is unfortunately not so easy to set. As long we are setting filters to a given element, it seems to me relatively hard to achieve a completely different color as a shadow color &ndash; but if anyone knows a way to do that, I would really like to know.</p>

<p>To sum up, what basically happens here are three steps:</p>

<ol>
<li>create gaussion blur on alpha channel &ndash; <code>feGaussianBlur</code> | <a href="http://www.w3.org/TR/SVG/filters.html#feGaussianBlurElement">spec</a></li>
<li>move result of gaussian blur to wished position &ndash; <code>feOffset</code> | <a href="http://www.w3.org/TR/SVG/filters.html#feOffsetElement">spec</a></li>
<li>define output result by merge (original source graphic over result of offset operation)&ndash; <code>feMerge</code> | <a href="http://www.w3.org/TR/SVG/filters.html#feMergeElement">spec</a></li>
</ol>


<p>And that is the result of the d3 operations inside of the SVG:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class='xml'><span class='line'><span class="nt">&lt;defs&gt;</span>
</span><span class='line'>  <span class="nt">&lt;filter</span> <span class="na">id=</span><span class="s">&quot;dropshadow&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>    <span class="nt">&lt;feGaussianBlur</span> <span class="na">in=</span><span class="s">&quot;SourceAlpha&quot;</span> <span class="na">stdDeviation=</span><span class="s">&quot;2&quot;</span> <span class="na">result=</span><span class="s">&quot;blur&quot;</span><span class="nt">&gt;&lt;/feGaussianBlur&gt;</span>
</span><span class='line'>    <span class="nt">&lt;feOffset</span> <span class="na">in=</span><span class="s">&quot;blur&quot;</span> <span class="na">dx=</span><span class="s">&quot;2&quot;</span> <span class="na">dy=</span><span class="s">&quot;3&quot;</span> <span class="na">result=</span><span class="s">&quot;offsetBlur&quot;</span><span class="nt">&gt;&lt;/feOffset&gt;</span>
</span><span class='line'>    <span class="nt">&lt;feMerge&gt;</span>
</span><span class='line'>      <span class="nt">&lt;feMergeNode&gt;&lt;/feMergeNode&gt;</span>
</span><span class='line'>      <span class="nt">&lt;feMergeNode</span> <span class="na">in=</span><span class="s">&quot;SourceGraphic&quot;</span><span class="nt">&gt;&lt;/feMergeNode&gt;</span>
</span><span class='line'>    <span class="nt">&lt;/feMerge&gt;</span>
</span><span class='line'>  <span class="nt">&lt;/filter&gt;</span>
</span><span class='line'><span class="nt">&lt;/defs&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<p>And that is it for defining a shadow filter in SVG. After that we only need to reference it inside of our wished elements.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'><span class="kd">var</span> <span class="nx">meter</span> <span class="o">=</span> <span class="nx">svg</span><span class="p">.</span><span class="nx">append</span><span class="p">(</span> <span class="s1">&#39;g&#39;</span> <span class="p">)</span>
</span><span class='line'>               <span class="p">.</span><span class="nx">attr</span><span class="p">(</span> <span class="s1">&#39;class&#39;</span><span class="p">,</span> <span class="s1">&#39;progress-meter&#39;</span> <span class="p">);</span>
</span><span class='line'>
</span><span class='line'><span class="nx">meter</span><span class="p">.</span><span class="nx">append</span><span class="p">(</span> <span class="s1">&#39;title&#39;</span> <span class="p">)</span>
</span><span class='line'>     <span class="p">.</span><span class="nx">text</span><span class="p">(</span> <span class="s1">&#39;Progress meter showing amount of space used for &#39;</span> <span class="o">+</span> <span class="nx">type</span> <span class="p">);</span>
</span><span class='line'>
</span><span class='line'><span class="nx">meter</span><span class="p">.</span><span class="nx">data</span><span class="p">(</span> <span class="p">[</span> <span class="p">{</span> <span class="nx">value</span> <span class="o">:</span> <span class="p">.</span><span class="mi">0</span><span class="p">,</span>  <span class="nx">index</span> <span class="o">:</span> <span class="p">.</span><span class="mi">5</span> <span class="p">}</span> <span class="p">]</span> <span class="p">)</span>
</span><span class='line'>     <span class="p">.</span><span class="nx">append</span><span class="p">(</span> <span class="s1">&#39;path&#39;</span> <span class="p">)</span>
</span><span class='line'>     <span class="p">.</span><span class="nx">attr</span><span class="p">(</span> <span class="s1">&#39;class&#39;</span><span class="p">,</span> <span class="s1">&#39;ui__downloadList__backgroundCircle&#39;</span> <span class="p">)</span>
</span><span class='line'>     <span class="p">.</span><span class="nx">attr</span><span class="p">(</span> <span class="s1">&#39;d&#39;</span><span class="p">,</span> <span class="nx">arcBackground</span> <span class="p">)</span>
</span><span class='line'>     <span class="p">.</span><span class="nx">attr</span><span class="p">(</span> <span class="s1">&#39;filter&#39;</span><span class="p">,</span> <span class="s1">&#39;url(#dropshadow)&#39;</span> <span class="p">)</span> <span class="c1">// !!! important - set id of predefined filter</span>
</span><span class='line'>     <span class="p">.</span><span class="nx">transition</span><span class="p">()</span>
</span><span class='line'>     <span class="p">.</span><span class="nx">duration</span><span class="p">(</span> <span class="nx">duration</span> <span class="p">)</span>
</span><span class='line'>     <span class="p">.</span><span class="nx">attrTween</span><span class="p">(</span> <span class="s1">&#39;d&#39;</span><span class="p">,</span> <span class="nx">tweenArcBackground</span><span class="p">(</span> <span class="p">{</span> <span class="nx">value</span> <span class="o">:</span> <span class="mi">1</span> <span class="p">}</span> <span class="p">)</span> <span class="p">);</span>
</span></code></pre></td></tr></table></div></figure>


<p>And here is the result with applied shadow filter to two <code>text</code> elements and two <code>path</code> elements:</p>

<p><img class="left" src="http://4waisenkinder.github.io/images/blog/stefanjudis/shadowResult.png" width="160" height="166" title="Result of SVG shadow filter" alt="Result of SVG shadow filter"></p>

<p>Gradients are quite similar to achieve. Let us check the needed d3 code to define a gradient element:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'><span class="kd">var</span> <span class="nx">gradientForegroundPurple</span> <span class="o">=</span> <span class="nx">defs</span><span class="p">.</span><span class="nx">append</span><span class="p">(</span> <span class="s1">&#39;linearGradient&#39;</span> <span class="p">)</span>
</span><span class='line'>                                   <span class="p">.</span><span class="nx">attr</span><span class="p">(</span> <span class="s1">&#39;id&#39;</span><span class="p">,</span> <span class="s1">&#39;gradientForegroundPurple&#39;</span> <span class="p">)</span>
</span><span class='line'>                                   <span class="p">.</span><span class="nx">attr</span><span class="p">(</span> <span class="s1">&#39;x1&#39;</span><span class="p">,</span> <span class="s1">&#39;0&#39;</span> <span class="p">)</span>
</span><span class='line'>                                   <span class="p">.</span><span class="nx">attr</span><span class="p">(</span> <span class="s1">&#39;x2&#39;</span><span class="p">,</span> <span class="s1">&#39;0&#39;</span> <span class="p">)</span>
</span><span class='line'>                                   <span class="p">.</span><span class="nx">attr</span><span class="p">(</span> <span class="s1">&#39;y1&#39;</span><span class="p">,</span> <span class="s1">&#39;0&#39;</span> <span class="p">)</span>
</span><span class='line'>                                   <span class="p">.</span><span class="nx">attr</span><span class="p">(</span> <span class="s1">&#39;y2&#39;</span><span class="p">,</span> <span class="s1">&#39;1&#39;</span> <span class="p">);</span>
</span><span class='line'>
</span><span class='line'><span class="nx">gradientForegroundPurple</span><span class="p">.</span><span class="nx">append</span><span class="p">(</span> <span class="s1">&#39;stop&#39;</span> <span class="p">)</span>
</span><span class='line'>                        <span class="p">.</span><span class="nx">attr</span><span class="p">(</span> <span class="s1">&#39;class&#39;</span><span class="p">,</span> <span class="s1">&#39;purpleForegroundStop1&#39;</span> <span class="p">)</span>
</span><span class='line'>                        <span class="p">.</span><span class="nx">attr</span><span class="p">(</span> <span class="s1">&#39;offset&#39;</span><span class="p">,</span> <span class="s1">&#39;0%&#39;</span> <span class="p">);</span>
</span><span class='line'>
</span><span class='line'><span class="nx">gradientForegroundPurple</span><span class="p">.</span><span class="nx">append</span><span class="p">(</span> <span class="s1">&#39;stop&#39;</span> <span class="p">)</span>
</span><span class='line'>                        <span class="p">.</span><span class="nx">attr</span><span class="p">(</span> <span class="s1">&#39;class&#39;</span><span class="p">,</span> <span class="s1">&#39;purpleForegroundStop2&#39;</span> <span class="p">)</span>
</span><span class='line'>                        <span class="p">.</span><span class="nx">attr</span><span class="p">(</span> <span class="s1">&#39;offset&#39;</span><span class="p">,</span> <span class="s1">&#39;100%&#39;</span> <span class="p">);</span>
</span></code></pre></td></tr></table></div></figure>


<p>Defining of the <code>gradient</code> element is not as complicated as the <code>filter</code> element. I decided to use a <code>linearGradient</code> (spec <a href="http://www.w3.org/TR/SVG/pservers.html#LinearGradientElement">here</a>). All we have to do is give it an id (we need to reference it later). Per default the linear gradient is a horizontal one. I wanted to have a vertical one and that is why there are coordinates set inside of the code example. The coordinates describe a vector which represents the gradient.</p>

<p>By appending two <code>stop</code> elements we are able to define which color should be set where. This gradient is a really basic one defining colours from start to end point. Much more complicated things are possible and Mozilla has a few really good examples at <a href="https://developer.mozilla.org/en-US/docs/Web/SVG/Tutorial/Gradients">MDN</a>.</p>

<p>And that is the result of the d3 operations inside of the SVG:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='xml'><span class='line'><span class="nt">&lt;defs&gt;</span>
</span><span class='line'>  <span class="nt">&lt;linearGradient</span> <span class="na">id=</span><span class="s">&quot;gradientForegroundPurple&quot;</span> <span class="na">x1=</span><span class="s">&quot;0&quot;</span> <span class="na">x2=</span><span class="s">&quot;0&quot;</span> <span class="na">y1=</span><span class="s">&quot;0&quot;</span> <span class="na">y2=</span><span class="s">&quot;1&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>    <span class="nt">&lt;stop</span> <span class="na">class=</span><span class="s">&quot;purpleForegroundStop1&quot;</span> <span class="na">offset=</span><span class="s">&quot;0%&quot;</span><span class="nt">&gt;&lt;/stop&gt;</span>
</span><span class='line'>    <span class="nt">&lt;stop</span> <span class="na">class=</span><span class="s">&quot;purpleForegroundStop2&quot;</span> <span class="na">offset=</span><span class="s">&quot;100%&quot;</span><span class="nt">&gt;&lt;/stop&gt;</span>
</span><span class='line'>  <span class="nt">&lt;/linearGradient&gt;</span>
</span><span class='line'><span class="nt">&lt;/defs&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<p>The nice thing about gradients is, that it is possible to define the colors inside of a stylesheet. I really like that, because everything related to colours belongs exactly there. That makes the whole thing much better maintainable.</p>

<p>The <code>stop</code> points for the gradient include the class elements, which I can reference inside of my stylesheet (I prefer using <a href="http://compass-style.org/">Compass</a> by the way).</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='css'><span class='line'><span class="o">//</span> <span class="err">$</span><span class="nt">c-cyanBright</span> <span class="o">=</span> <span class="nt">predefined</span> <span class="nt">colour</span> <span class="nt">variable</span>
</span><span class='line'><span class="o">//</span> <span class="nt">adjust-lightness</span> <span class="o">=</span> <span class="nt">helper</span> <span class="nt">function</span> <span class="nt">included</span> <span class="nt">in</span> <span class="nt">compass</span>
</span><span class='line'><span class="nc">.cyanBackgroundStop1</span> <span class="p">{</span> <span class="n">stop</span><span class="o">-</span><span class="k">color</span><span class="o">:</span> <span class="n">adjust</span><span class="o">-</span><span class="n">lightness</span><span class="p">(</span> <span class="err">$</span><span class="n">c</span><span class="o">-</span><span class="n">cyanBright</span><span class="o">,</span> <span class="m">7</span> <span class="p">);</span> <span class="p">}</span>
</span><span class='line'><span class="nc">.cyanBackgroundStop2</span> <span class="p">{</span> <span class="n">stop</span><span class="o">-</span><span class="k">color</span><span class="o">:</span> <span class="err">$</span><span class="n">c</span><span class="o">-</span><span class="n">cyanBright</span><span class="p">;</span> <span class="p">}</span>
</span><span class='line'><span class="nc">.cyanForegroundStop1</span> <span class="p">{</span> <span class="n">stop</span><span class="o">-</span><span class="k">color</span><span class="o">:</span> <span class="n">adjust</span><span class="o">-</span><span class="n">lightness</span><span class="p">(</span> <span class="err">$</span><span class="n">c</span><span class="o">-</span><span class="n">cyanBright</span><span class="o">,</span> <span class="m">29</span> <span class="p">);</span> <span class="p">}</span>
</span><span class='line'><span class="nc">.cyanForegroundStop2</span> <span class="p">{</span> <span class="n">stop</span><span class="o">-</span><span class="k">color</span><span class="o">:</span> <span class="n">adjust</span><span class="o">-</span><span class="n">lightness</span><span class="p">(</span> <span class="err">$</span><span class="n">c</span><span class="o">-</span><span class="n">cyanBright</span><span class="o">,</span> <span class="m">15</span> <span class="p">);</span> <span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>The last step is to set the gradient to the wished element. This is done by referencing it inside of the stylesheet by its id.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='css'><span class='line'><span class="o">//</span> <span class="nt">yup</span><span class="o">,</span> <span class="nt">I</span><span class="err">&#39;</span><span class="nt">m</span> <span class="nt">trying</span> <span class="nt">out</span> <span class="nt">this</span> <span class="nt">fancy</span> <span class="nt">BEM</span> <span class="nt">way</span> <span class="o">;)</span>
</span><span class='line'><span class="nc">.ui__downloadList__item.cyan</span> <span class="nc">.ui__downloadList__backgroundCircle</span> <span class="p">{</span>
</span><span class='line'>  <span class="n">fill</span><span class="o">:</span> <span class="sx">url(#gradientBackgroundCyan)</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>And here is the result:</p>

<p><img class="left" src="http://4waisenkinder.github.io/images/blog/stefanjudis/gradientResult.png" width="158" height="166" title="Result of SVG shadow filter" alt="Result of SVG shadow filter"></p>

<p>And that&rsquo;s it. If you want to play around with it check out the <a href="http://codepen.io/stefanjudis/pen/jawGn">pen</a> ad Codepen. Feedback is as always welcome and I hope you have as much fun playin around with d3 as I have. :)</p>
<div class='octopress-authorbox'>
	<div class="author-pic">
		<img src="http://www.gravatar.com/avatar/22725c2d3eb331146549bf0d5d3c050c" alt="Stefan Judis" />
	</div>
	
	<div class="author-about">
		<h3>Stefan Judis</h3>
		<p>Frontend lover</p>
		<ul class="author-links">
			
			<li>
			<a href="http://twitter.com/stefanjudis">@stefanjudis</a>
			</li>
			
			
		</ul>
	</div>
</div>]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Getting started with web components and polymer.js]]></title>
    <link href="http://4waisenkinder.github.io/blog/2013/09/21/getting-started-with-web-components-and-polymer-dot-js/"/>
    <updated>2013-09-21T18:35:00+02:00</updated>
    <id>http://4waisenkinder.github.io/blog/2013/09/21/getting-started-with-web-components-and-polymer-dot-js</id>
    <content type="html"><![CDATA[<p><strong>This article describes still rarely supported Shadow DOM features. If you want to see them in action, make sure you use Chrome Canary with turned on &ldquo;Experimental web platform features&rdquo; found at <code>about:flags</code>.</strong></p>

<p>I spent a lot of time on <a href="http://codepen.io">codepen</a> the last days to train my CSS skills and to relax a bit (it is really awesome to just play around there while watching a movie). One thing I created was a styled checkbox. And while doing that, the idea came to me, that this checkbox is a perfect use case to start playing around with this magic thing called &ldquo;web components&rdquo;, that is heavily around since a few month and is probably the &ldquo;next big thing&rdquo; in web development.</p>

<!-- more -->


<p>Web components are basically small encapsuled units inside of a website or web application(like for example the HTML5 video element). They include their own styling (CSS) and their own behaviour (JS). And this is the biggest advantage of them. Imagine little pieces inside of your web app, that are not influenced by the global stylesheet and whose children are not affected by any written JavaScript function. This way you end up with a box of bricks and the only thing to do is putting them together easily. Additionally you can use them whereever you want, because they include everything they need to look awesome and to behave awesome. Sounds really like a dream to me. :)</p>

<p>If you are interested in that topic, recommended ressources are the following:</p>

<ul>
<li><a href="http://html5-demos.appspot.com/static/webcomponents/index.html">slides about web components created by Google</a></li>
<li><a href="http://www.youtube.com/watch?v=U45e-zq4bTs&amp;feature=youtu.be">talk about web components at CSSconf.eu </a></li>
<li><a href="http://www.w3.org/TR/2013/WD-components-intro-20130606/">W3C working draft about web components</a></li>
</ul>


<p>I started looking around and decided to use <a href="http://www.polymer-project.org">polymer.js</a> (written by the Google guys) to play around with the principle of web components. Unfortunately they are rarely supported these days and this library gives me the opportunity to use this technique already today by providing needed polyfills.</p>

<p>So, here is my checkbox! Let&rsquo;s make a &ldquo;real&rdquo; new fancy web component out of it.</p>

<pre class="codepen" data-height="400" data-type="result" data-href="ojDif" data-user="stefanjudis"><code> </code></pre>


<script async src="http://codepen.io:/assets/embed/ei.js"></script>


<p>I started by downloading the basic stuff from <a href="http://html5boilerplate.com">HTML5BOILERPLATE</a> and the polymer component library. The first things to start using it are implementing the polymer script inside of the <code>head</code> of the document and loading your first web component file. Web components need to include a hyphen inside of their name defined by the specs to avoid conflicts with existing elements.</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>&lt;!-- @start Polymer stuff --&gt;
</span><span class='line'>&lt;script src="js/vendor/polymer.min.js"&gt;&lt;/script&gt;
</span><span class='line'>
</span><span class='line'>&lt;link rel="import" href="components/sj-checkbox.html"&gt;
</span><span class='line'>&lt;!-- @end Polymer stuff --&gt;</span></code></pre></td></tr></table></div></figure>


<p>Next step is to create this component html file, that will define the new web component. I created a new folder for my web components and created the file <code>sj-checkbox.html</code>. Inside of that file I started to implement the new component regarding the polymer documentation.</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>&lt;polymer-element name="sj-checkbox"&gt;
</span><span class='line'>  &lt;template&gt;
</span><span class='line'>    hello world
</span><span class='line'>  &lt;/template&gt;
</span><span class='line'>  &lt;script&gt;
</span><span class='line'>    Polymer( 'sj-checkbox', {} );
</span><span class='line'>  &lt;/script&gt;
</span><span class='line'>&lt;/polymer-element&gt;</span></code></pre></td></tr></table></div></figure>


<p>That is all you need. Wrap everything in the <code>polymer-element</code> tag, set a name as attribute, use the new HTML5 template element to define your markup, call the Polymer constructor inside of a <code>script</code> tag and you are done. After that, you can use a new custom element inside of your &#8220;Ã¬ndex.html&#8220;`.</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>&lt;ul id="switchesComponents"&gt;
</span><span class='line'>  &lt;li&gt;&lt;sj-checkbox&gt;&lt;/sj-checkbox&gt;
</span><span class='line'>  &lt;li&gt;&lt;sj-checkbox&gt;&lt;/sj-checkbox&gt;
</span><span class='line'>  &lt;li&gt;&lt;sj-checkbox&gt;&lt;/sj-checkbox&gt;
</span><span class='line'>&lt;/ul&gt;</span></code></pre></td></tr></table></div></figure>


<p>When you inspect this in a current version of Chrome Canary and you enabled the needed flags (look <a href="http://html5-demos.appspot.com/static/webcomponents/index.html#69">here</a>) you will see the power of this technique.</p>

<p><img class="left" src="http://4waisenkinder.github.io/images/blog/stefanjudis/simpleComponent.jpg" width="244" height="239" title="First simple web component" alt="First simple web component"></p>

<p>Our little &lsquo;hello world&rsquo; message is visible on our screen and it is encapsulated inside of the <a href="http://www.html5rocks.com/en/tutorials/webcomponents/shadowdom/">shadow DOM</a>. I mean, how awesome is that?</p>

<p>After this success I started implementing the actual new checkbox markup and the needed styles.</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>&lt;polymer-element name="sj-checkbox"&gt;
</span><span class='line'>  &lt;template&gt;
</span><span class='line'>    &lt;style&gt;
</span><span class='line'>      /* all my styles here */
</span><span class='line'>    &lt;/style&gt;
</span><span class='line'>    &lt;div class="switch"&gt;
</span><span class='line'>      &lt;div class="switch__circle"&gt;
</span><span class='line'>          &lt;input id="switcher" class="switch__input" type="checkbox"&gt;
</span><span class='line'>          &lt;div class="switch__innerCircles"&gt;&lt;/div&gt;
</span><span class='line'>          &lt;label class="switch__label" for="switcher"&gt;Switch me!!!&lt;/label&gt;
</span><span class='line'>        &lt;/div&gt;
</span><span class='line'>      &lt;/div&gt;
</span><span class='line'>    &lt;/div&gt;
</span><span class='line'>  &lt;/template&gt;
</span><span class='line'>  &lt;script&gt;
</span><span class='line'>    Polymer( 'sj-checkbox', {});
</span><span class='line'>  &lt;/script&gt;
</span><span class='line'>&lt;/polymer-element&gt;
</span></code></pre></td></tr></table></div></figure>


<p>That worked actually on first try and I saw the new checkbox and its &ldquo;hidden&rdquo; markup inside of the shadow DOM tree. I prepared the checkbox to be configurable easily so that it is possible to get it in three different sizes by just adding the class &ldquo;small&rdquo;, &ldquo;medium&rdquo; or &ldquo;big&rdquo; to the <code>switch</code>container. To achieve that, you can easily add custom attributes to your new created web component.</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>&lt;ul id="switchesComponents"&gt;
</span><span class='line'>  &lt;li&gt;&lt;sj-checkbox size="big"&gt;&lt;/sj-checkbox&gt;
</span><span class='line'>  &lt;li&gt;&lt;sj-checkbox size="medium"&gt;&lt;/sj-checkbox&gt;
</span><span class='line'>  &lt;li&gt;&lt;sj-checkbox size="small"&gt;&lt;/sj-checkbox&gt;
</span><span class='line'>&lt;/ul&gt;</span></code></pre></td></tr></table></div></figure>


<p>Additionally you have to define inside of your component html file (remember <code>components/sj-checkbox.html</code>) that this value is readable. This is done by setting a new attribute <code>attributes</code> to the <code>polymer-element</code> element defining the given values. It is also possible to set default value for the size attribute then. You can then access the value by calling the attribute name wrapped into two curly braces inside of your component html.</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>&lt;!-- define attributes here -->
</span><span class='line'>&lt;polymer-element name="sj-checkbox" attributes="size">
</span><span class='line'>  &lt;template>
</span><span class='line'>    &lt;style>
</span><span class='line'>    /* all my styles here */
</span><span class='line'>    &lt;/style>
</span><span class='line'>    &lt;!-- backslashes are not needed - but octopress forces me to do it like that :( -->
</span><span class='line'>    &lt;div class="switch {{size}}">
</span><span class='line'>      &lt;div class="switch__circle">
</span><span class='line'>          &lt;input id="switcher" class="switch__input" type="checkbox" on-change="changeHandler"checked="checked">
</span><span class='line'>          &lt;div class="switch__innerCircles">&lt;/div>
</span><span class='line'>          &lt;label class="switch__label" for="switcher">Switch me!!!&lt;/label>
</span><span class='line'>        &lt;/div>
</span><span class='line'>      &lt;/div>
</span><span class='line'>    &lt;/div>
</span><span class='line'>  &lt;/template>
</span><span class='line'>  &lt;script>
</span><span class='line'>      // define default values here
</span><span class='line'>    Polymer( 'sj-checkbox', {
</span><span class='line'>      size: 'medium'
</span><span class='line'>    } );
</span><span class='line'>  &lt;/script>
</span><span class='line'>&lt;/polymer-element></span></code></pre></td></tr></table></div></figure>


<p>So far so good. The checkbox appears with its full markup and depending styles.</p>

<p><img class="left" src="http://4waisenkinder.github.io/images/blog/stefanjudis/fullComponent.jpg" width="545" height="232" title="Full checkbox web component" alt="Full checkbox web component"></p>

<p>After that the checkboxes are implemented in different sizes and it is time to add some functionality to them. Usually the way is to bind an event listener to the change event of the input element and then update whatever needs to be updated. Unfortunately this elements do not trigger any change events anymore, because they are hidden inside of the shadow DOM. Polymer provides an easy way to implement custom events to solve this problem.</p>

<p>You only have to implement a <code>on-change</code> attribute on the input field hidden inside of the shadow DOM and define a callback function, that should be executed when the event is triggered. Inside of this function you are able to trigger a custom event using <code>this.fire()</code>.</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>&lt;polymer-element name="sj-checkbox" attributes="size">
</span><span class='line'>  &lt;template>
</span><span class='line'>    &lt;style>
</span><span class='line'>    /* all my styles here */
</span><span class='line'>    &lt;/style>
</span><span class='line'>    &lt;div class="switch {{size}}">
</span><span class='line'>      &lt;div class="switch__circle">
</span><span class='line'>          &lt;input id="switcher" class="switch__input" type="checkbox" on-change="changeHandler" checked="checked">
</span><span class='line'>          &lt;div class="switch__innerCircles">&lt;/div>
</span><span class='line'>          &lt;label class="switch__label" for="switcher">Switch me!!!&lt;/label>
</span><span class='line'>        &lt;/div>
</span><span class='line'>      &lt;/div>
</span><span class='line'>    &lt;/div>
</span><span class='line'>  &lt;/template>
</span><span class='line'>  &lt;script>
</span><span class='line'>    Polymer( 'sj-checkbox', {
</span><span class='line'>      size: 'medium',
</span><span class='line'>      changeHandler: function( event ) {
</span><span class='line'>        this.fire(
</span><span class='line'>          'change',
</span><span class='line'>          {
</span><span class='line'>            id: event.target.id
</span><span class='line'>          }
</span><span class='line'>        );
</span><span class='line'>      }
</span><span class='line'>    } );
</span><span class='line'>  &lt;/script>
</span><span class='line'>&lt;/polymer-element></span></code></pre></td></tr></table></div></figure>


<p>Afterwards you can easily listen to this event and react to it.</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>&lt;ul id="switchesComponents"&gt;
</span><span class='line'>  &lt;li&gt;&lt;sj-checkbox size="big"&gt;&lt;/sj-checkbox&gt;
</span><span class='line'>  &lt;li&gt;&lt;sj-checkbox size="medium"&gt;&lt;/sj-checkbox&gt;
</span><span class='line'>  &lt;li&gt;&lt;sj-checkbox size="small"&gt;&lt;/sj-checkbox&gt;
</span><span class='line'>&lt;/ul&gt;
</span><span class='line'>&lt;div id="switchesComponentsNotifications" class="notification"&gt;&lt;/div&gt;
</span><span class='line'>&lt;script&gt;
</span><span class='line'>  ( function( document ) {
</span><span class='line'>      var switchList    = document.getElementById( 'switchesComponents' );
</span><span class='line'>
</span><span class='line'>      switchList.addEventListener( 'change', changeHandler, false );
</span><span class='line'>
</span><span class='line'>      function changeHandler( event ) {
</span><span class='line'>          var notification = document.getElementById( 'switchesComponentsNotifications' );
</span><span class='line'>
</span><span class='line'>          notification.innerHTML = '!!! ' + event.detail.id +' switched !!!';
</span><span class='line'>      }
</span><span class='line'>  } )( document );
</span><span class='line'>&lt;/script&gt;</span></code></pre></td></tr></table></div></figure>


<p>About that is to say, that when you fire events this way inside of your component you can pass as second argument an object which will be accessable inside of the event handler under the <code>detail</code> key. In my case I am just handing over the id of the input element.</p>

<h3>Stuff to be careful with</h3>

<p>The two following issues with polymer are already reported bug tickets. Before continue reading you can check out the state of both here:</p>

<ul>
<li><a href="https://github.com/Polymer/polymer/issues/296">prevent event bubbling in fallback</a></li>
<li><a href="https://github.com/Polymer/polymer/issues/295">prevent dublicate ID&rsquo;s in fallback</a></li>
</ul>


<p>When checking browser compability of this I noticed that using id&rsquo;s inside of your web components can be really tricky. There is no problem in case the browser supports web components (id&rsquo;s are inside of the shadow DOM and totally encapsulated), but if not polymer does some magic and your component will appear in the form of normal html. Then you&rsquo;ve got the same id multiple times in your application, which leads to invalid markup and maybe unexpected behaviour. My solution for that was adding kind of <code>fallbackId</code> to the component.</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>&lt;ul id="switchesComponents"&gt;
</span><span class='line'>  &lt;li&gt;&lt;sj-checkbox size="big" fallbackId="checkboxBigComponent"&gt;&lt;/sj-checkbox&gt;</span></code></pre></td></tr></table></div></figure>




<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>&lt;div class="switch {{size}}">
</span><span class='line'>  &lt;div class="switch__circle">
</span><span class='line'>      &lt;input id="{{fallbackId}}" class="switch__input" type="checkbox" on-change="changeHandler"checked="checked">
</span><span class='line'>      &lt;div class="switch__innerCircles">&lt;/div>
</span><span class='line'>      &lt;label class="switch__label" for="{{fallbackId}}">Switch me!!!&lt;/label>
</span><span class='line'>    &lt;/div>
</span><span class='line'>  &lt;/div>
</span><span class='line'>&lt;/div></span></code></pre></td></tr></table></div></figure>


<p>Another thing I noticed is, that you should always namespace your events triggered by your components. In my first implementation (which you see a few lines above) I defined the component to trigger a <code>change</code> event. That worked fine in Canary, but unfortunately in other browsers there are two events fired. One by the web component itself and on by the input field that is not hidden inside of the shadow DOM. I ended up with triggering an event called <code>componentChange</code> and that worked fine.</p>

<p>Jap and that is it. You can check out the result <a href="http://stefanjudis.github.io/webComponents-tutorial/">here</a> &ndash; check it out in Canaray, it&rsquo;s just awesome.</p>

<p>I will continue playing around with this. My next goal is to achieve a new input element type like <code>&lt;input type="myFancyCheckbox"&gt;</code> that I actually can use inside of my forms, but I have got no idea how this works yet. Addiontally implementing custom pseudo elements to make the components accessible and styleable from the outside seams to be a reasonable next step.</p>

<p>So, thanks for reading. Feedback is as always really welcome. ;)</p>

<p>A follow up post about making the checkbox customizable can be found <a href="http://4waisenkinder.de/blog/2013/10/05/getting-started-with-web-components-and-polymer-dot-js-ii/">here</a>.</p>
<div class='octopress-authorbox'>
	<div class="author-pic">
		<img src="http://www.gravatar.com/avatar/22725c2d3eb331146549bf0d5d3c050c" alt="Stefan Judis" />
	</div>
	
	<div class="author-about">
		<h3>Stefan Judis</h3>
		<p>Frontend lover</p>
		<ul class="author-links">
			
			<li>
			<a href="http://twitter.com/stefanjudis">@stefanjudis</a>
			</li>
			
			
		</ul>
	</div>
</div>]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Why you shouldn't use Backbone's built-in Array functions]]></title>
    <link href="http://4waisenkinder.github.io/blog/2013/08/13/why-you-should-not-use-backbone-collection-utility-functions/"/>
    <updated>2013-08-13T23:15:00+02:00</updated>
    <id>http://4waisenkinder.github.io/blog/2013/08/13/why-you-should-not-use-backbone-collection-utility-functions</id>
    <content type="html"><![CDATA[<p>Today I ran into an issue that let me dive into the Backbone.js library. Very often developers just use the stuff that is in there because it just works fine, but when it does not do what it is supposed to do the best way is to have a look into the used library and figure out what is going on.</p>

<p>My case was the following:</p>

<p>I had some lines for getting the index of a particular model stored inside of a Backbone collection.</p>

<!-- more -->




<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'><span class="kd">var</span> <span class="nx">index</span> <span class="o">=</span> <span class="nx">collection</span><span class="p">.</span><span class="nx">indexOf</span><span class="p">(</span> <span class="nx">model</span> <span class="p">);</span>
</span></code></pre></td></tr></table></div></figure>


<p>Not very complicated and it worked immediately. I did not really think about it. A colleague came around and pointed me into the direction, that the native Array function <em>indexOf</em> is only supported in IE9 and higher. I changed it to use the particular LoDash/Underscore utility function and it did not work anymore.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'><span class="kd">var</span> <span class="nx">index</span> <span class="o">=</span> <span class="nx">_</span><span class="p">.</span><span class="nx">indexOf</span><span class="p">(</span> <span class="nx">collection</span><span class="p">,</span> <span class="nx">model</span> <span class="p">);</span>
</span></code></pre></td></tr></table></div></figure>


<p>So, what was going on? After thinking about it, the idea that a Backbone collection uses the native Array function <em>indexOf</em> does not even make sense. So where does it come from? I checked the code and noticed that Backbone collections implement the Array functions of LoDash/Underscore. I created a <a href="http://jsbin.com/apowiz/25/edit">JSBin</a> to try this principle myself.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'><span class="kd">var</span> <span class="nx">ExampleObject</span> <span class="o">=</span> <span class="kd">function</span><span class="p">(</span> <span class="nx">array</span> <span class="p">)</span> <span class="p">{</span>
</span><span class='line'>   <span class="k">this</span><span class="p">.</span><span class="nx">array</span> <span class="o">=</span> <span class="nx">array</span><span class="p">;</span>
</span><span class='line'><span class="p">};</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// the methods we want to implement</span>
</span><span class='line'><span class="c1">// in our object</span>
</span><span class='line'><span class="kd">var</span> <span class="nx">utilityMethods</span> <span class="o">=</span> <span class="p">[</span> <span class="s1">&#39;indexOf&#39;</span><span class="p">,</span> <span class="s1">&#39;filter&#39;</span> <span class="p">],</span>
</span><span class='line'>    <span class="nx">slice</span>          <span class="o">=</span> <span class="p">[].</span><span class="nx">slice</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// iterate over the wished methods</span>
</span><span class='line'><span class="nx">_</span><span class="p">.</span><span class="nx">each</span><span class="p">(</span> <span class="nx">utilityMethods</span><span class="p">,</span> <span class="kd">function</span><span class="p">(</span> <span class="nx">method</span> <span class="p">)</span> <span class="p">{</span>
</span><span class='line'>  <span class="nx">ExampleObject</span><span class="p">.</span><span class="nx">prototype</span><span class="p">[</span> <span class="nx">method</span> <span class="p">]</span> <span class="o">=</span> <span class="kd">function</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>    <span class="kd">var</span> <span class="nx">args</span> <span class="o">=</span> <span class="nx">slice</span><span class="p">.</span><span class="nx">call</span><span class="p">(</span> <span class="nx">arguments</span> <span class="p">);</span>
</span><span class='line'>
</span><span class='line'>    <span class="nx">args</span><span class="p">.</span><span class="nx">unshift</span><span class="p">(</span> <span class="k">this</span><span class="p">.</span><span class="nx">array</span> <span class="p">);</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">return</span> <span class="nx">_</span><span class="p">[</span> <span class="nx">method</span> <span class="p">].</span><span class="nx">apply</span><span class="p">(</span> <span class="nx">_</span><span class="p">,</span> <span class="nx">args</span> <span class="p">);</span>
</span><span class='line'>  <span class="p">};</span>
</span><span class='line'><span class="p">});</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// create the new object</span>
</span><span class='line'><span class="kd">var</span> <span class="nx">example</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">ExampleObject</span><span class="p">(</span> <span class="p">[</span> <span class="mi">5</span><span class="p">,</span> <span class="mi">4</span><span class="p">,</span> <span class="mi">3</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="mi">1</span> <span class="p">]</span> <span class="p">);</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// proof that indexOf works</span>
</span><span class='line'><span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span> <span class="nx">example</span><span class="p">.</span><span class="nx">indexOf</span><span class="p">(</span> <span class="mi">2</span> <span class="p">)</span> <span class="p">);</span> <span class="c1">// output: 3</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// proof that filter workds</span>
</span><span class='line'><span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span>
</span><span class='line'>  <span class="nx">example</span><span class="p">.</span><span class="nx">filter</span><span class="p">(</span> <span class="kd">function</span><span class="p">(</span> <span class="nx">value</span> <span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">return</span> <span class="nx">value</span> <span class="o">%</span> <span class="mi">2</span><span class="p">;</span>
</span><span class='line'>  <span class="p">}</span> <span class="p">)</span>
</span><span class='line'><span class="p">);</span> <span class="c1">// output: [5, 3, 1]</span>
</span></code></pre></td></tr></table></div></figure>


<p>Let us dive into the stuff that goes on inside of the each loop.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'><span class="nx">ExampleObject</span><span class="p">.</span><span class="nx">prototype</span><span class="p">[</span> <span class="nx">method</span> <span class="p">]</span> <span class="o">=</span> <span class="kd">function</span><span class="p">()</span> <span class="p">{};</span>
</span></code></pre></td></tr></table></div></figure>


<p>That is a basic pattern to extent the prototype of JavaScript object. In our case the prototype is <em>ExampleObject</em> and this way it has a method that is shared by every instance of <em>ExampleObject</em>.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'><span class="kd">var</span> <span class="nx">args</span> <span class="o">=</span> <span class="nx">slice</span><span class="p">.</span><span class="nx">call</span><span class="p">(</span> <span class="nx">arguments</span> <span class="p">);</span>
</span></code></pre></td></tr></table></div></figure>


<p>This line was my first learning of digging into the Backbone codebase. Calling the Array function <em>slice</em> and passing in <em>arguments</em> is a common way to receive an Array out of the arguments object, which is available in every JavaScript function ( more information about that <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Functions_and_function_scope/arguments">here</a> ). My usual way to do that is <em>Array.prototype.slice( arguments )</em>. Backbone caches the slice function before using it for better performance ( which is proved <a href="http://jsperf.com/array-prototype-slice-call-vs-slice-call/7">here</a>). It is not huge difference, but when we can be faster, we should be faster. ;)</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'><span class="nx">args</span><span class="p">.</span><span class="nx">unshift</span><span class="p">(</span> <span class="k">this</span><span class="p">.</span><span class="nx">array</span> <span class="p">);</span>
</span></code></pre></td></tr></table></div></figure>


<p>This line puts the actual array ( &ndash;> <em>this.array</em> ) to this start of this new generated &ldquo;arguments array&rdquo; to make it fit into the way LoDash/Underscore functions expect the handed in arguments to be.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'><span class="k">return</span> <span class="nx">_</span><span class="p">[</span> <span class="nx">method</span> <span class="p">].</span><span class="nx">apply</span><span class="p">(</span> <span class="nx">_</span><span class="p">,</span> <span class="nx">args</span> <span class="p">);</span>
</span></code></pre></td></tr></table></div></figure>


<p>And this is the final result. It is an actual call to the origin LoDash/Underscore function in the context of Underscore/LoDash. The context needs to be set to LoDash/Underscore itself, because we don&rsquo;t know, if the library calls other methods contained in itself. To sum up this line for example of <em>indexOf</em> is similar to:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'><span class="nx">example</span><span class="p">.</span><span class="nx">indexOf</span><span class="p">(</span> <span class="mi">2</span> <span class="p">);</span>
</span><span class='line'><span class="c1">// calls under the hood</span>
</span><span class='line'><span class="nx">_</span><span class="p">.</span><span class="nx">indexOf</span><span class="p">(</span> <span class="nx">example</span><span class="p">.</span><span class="nx">array</span><span class="p">,</span> <span class="mi">2</span> <span class="p">);</span>
</span></code></pre></td></tr></table></div></figure>


<p>No magic. but a nice way to make the usability of your objects more convenient.</p>

<p>But there is also a bad part about that. I checked the performance of the origin utility methods and the integrated ones and there is really a huge difference ( check jsperf <a href="http://jsperf.com/integrated-utility-function-vs-utility-function-2">here</a> ). On my machine the new integrated functions are around 75% (!) percent slower ( tested in Firefox, Chrome and Opera ). 75% is really way too much for convenience.</p>

<p><img src="http://4waisenkinder.github.io/images/blog/stefanjudis/utilityFunctions.png" width="970" height="387" title="result of jsperf" alt="result of jsperf"></p>

<p>The reason for that difference is probably the needed context binding for the integrated utility functions to provide the LoDash/Underscore context inside of the function itself. But that is only guessing. ;)</p>

<p>No matter what, for me is clear that I will use the original utility functions instead of the integrated ones.</p>

<p>Thx for reading. Any ideas on that are really welcome. :)</p>
<div class='octopress-authorbox'>
	<div class="author-pic">
		<img src="http://www.gravatar.com/avatar/22725c2d3eb331146549bf0d5d3c050c" alt="Stefan Judis" />
	</div>
	
	<div class="author-about">
		<h3>Stefan Judis</h3>
		<p>Frontend lover</p>
		<ul class="author-links">
			
			<li>
			<a href="http://twitter.com/stefanjudis">@stefanjudis</a>
			</li>
			
			
		</ul>
	</div>
</div>]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[How to make screenshots with phantomjs]]></title>
    <link href="http://4waisenkinder.github.io/blog/2013/08/09/how-to-make-screenshots-with-phantomjs/"/>
    <updated>2013-08-09T10:40:00+02:00</updated>
    <id>http://4waisenkinder.github.io/blog/2013/08/09/how-to-make-screenshots-with-phantomjs</id>
    <content type="html"><![CDATA[<p>Recently I started developing my first grunt plugin called <a href="https://npmjs.org/package/grunt-photobox">grunt-photobox</a>. The goal was to make the layout QA-process before shipping a new feature much easier. It should take screenshots of every relevant site and compare it to the last one &ndash; <a href="http://4waisenkinder.de/blog/2013/07/26/grunt-photobox-secure-yourself-against-broken-layout/">post about how to use it here</a>.</p>

<p>The base for that should be <a href="http://phantomjs.org/">phantomjs</a>. It&rsquo;s a headless webkit browser, that gives you all functionality a &ldquo;real&rdquo; browser has plus a few features for making screenshots or reading files from disk for example. You can run it via command line and pass in a script to execute inside the scope of phantomjs.</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ phantomjs script.js</span></code></pre></td></tr></table></div></figure>




<!-- more -->


<p>Inside of this script you have got a few more global variables available than usual &ndash; check them out <a href="https://github.com/ariya/phantomjs/wiki/_pages">here</a>. For making screenshots we will use the webpage- and system-api ( will be explained later on ). Phantomjs provides a <code>require</code> function to get the functionality we need. When you do a lot of nodejs you are probably familiar with that principle already.</p>

<p><a href="https://github.com/stefanjudis/phantomjs-screenshot">The script</a> for making screenshots has 50 lines and is not really complicated, so lets have a look:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'><span class="kd">var</span> <span class="nx">system</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span> <span class="s1">&#39;system&#39;</span> <span class="p">),</span>
</span><span class='line'>    <span class="nx">webpage</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span> <span class="s1">&#39;webpage&#39;</span> <span class="p">),</span>
</span><span class='line'>    <span class="nx">page</span> <span class="o">=</span> <span class="nx">webpage</span><span class="p">.</span><span class="nx">create</span><span class="p">(),</span>
</span><span class='line'>    <span class="nx">url</span> <span class="o">=</span> <span class="nx">system</span><span class="p">.</span><span class="nx">args</span><span class="p">[</span> <span class="mi">1</span> <span class="p">]</span> <span class="o">||</span> <span class="s1">&#39;http://4waisenkinder.de&#39;</span><span class="p">,</span> <span class="c1">// set a default value if argument was not set</span>
</span><span class='line'>    <span class="nx">path</span> <span class="o">=</span> <span class="nx">system</span><span class="p">.</span><span class="nx">args</span><span class="p">[</span> <span class="mi">2</span> <span class="p">]</span> <span class="o">||</span> <span class="s1">&#39;./&#39;</span><span class="p">,</span> <span class="c1">// set a default value if argument was not set</span>
</span><span class='line'>    <span class="nx">width</span> <span class="o">=</span> <span class="o">+</span><span class="nx">system</span><span class="p">.</span><span class="nx">args</span><span class="p">[</span> <span class="mi">3</span> <span class="p">]</span> <span class="o">||</span> <span class="mi">1000</span><span class="p">,</span> <span class="c1">// set a default value if argument was not set</span>
</span><span class='line'>    <span class="nx">height</span> <span class="o">=</span> <span class="o">+</span><span class="nx">system</span><span class="p">.</span><span class="nx">args</span><span class="p">[</span> <span class="mi">4</span> <span class="p">]</span> <span class="o">||</span> <span class="mi">1200</span><span class="p">;</span> <span class="c1">// set a default value if argument was not set</span>
</span></code></pre></td></tr></table></div></figure>


<p>The variable declaration at top of the page ( yes, I know, Crockford-Style ;) ) shows us all we need. <code>system</code> will take the responsibiliy of getting arguments with which we fired up phantomjs. This way the script is more generic and we will be able to pass in arguments like the url we want to make a picture of, the path of the picture, and width and height of the headless browser window ( this becomes handy when you want to check your responsive web design ). <code>webpage</code> includes the actual browser functionality for opening a page and rendering it later on.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'><span class="nx">page</span><span class="p">.</span><span class="nx">onError</span> <span class="o">=</span> <span class="kd">function</span> <span class="p">(</span> <span class="nx">msg</span> <span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="nx">system</span><span class="p">.</span><span class="nx">stderr</span><span class="p">.</span><span class="nx">writeLine</span><span class="p">(</span> <span class="s1">&#39;ERROR:&#39;</span> <span class="o">+</span> <span class="nx">msg</span> <span class="p">);</span>
</span><span class='line'><span class="p">};</span>
</span><span class='line'>
</span><span class='line'><span class="nx">page</span><span class="p">.</span><span class="nx">onConsoleMessage</span> <span class="o">=</span> <span class="kd">function</span><span class="p">(</span> <span class="nx">msg</span><span class="p">,</span> <span class="nx">lineNum</span><span class="p">,</span> <span class="nx">sourceId</span> <span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="nx">system</span><span class="p">.</span><span class="nx">stdout</span><span class="p">.</span><span class="nx">writeLine</span><span class="p">(</span> <span class="s1">&#39;CONSOLE: &#39;</span> <span class="o">+</span> <span class="nx">msg</span><span class="p">,</span> <span class="nx">lineNum</span><span class="p">,</span> <span class="nx">sourceId</span> <span class="p">);</span>
</span><span class='line'><span class="p">};</span>
</span></code></pre></td></tr></table></div></figure>


<p>These seven lines are quite important for debugging purposes, without it you can rarely know what is going on. Phantomjs needs to know how to handle any output inside of its JavaScript console. So let&rsquo;s define to listen to messages and errors to write it to <code>stderr</code>and <code>stdout</code> later on.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'><span class="nx">page</span><span class="p">.</span><span class="nx">viewportSize</span> <span class="o">=</span> <span class="p">{</span>
</span><span class='line'>    <span class="nx">height</span> <span class="o">:</span> <span class="nx">height</span><span class="p">,</span>
</span><span class='line'>    <span class="nx">width</span>  <span class="o">:</span> <span class="nx">width</span>
</span><span class='line'><span class="p">};</span>
</span><span class='line'>
</span><span class='line'><span class="nx">page</span><span class="p">.</span><span class="nx">clipRect</span> <span class="o">=</span> <span class="p">{</span>
</span><span class='line'>  <span class="nx">height</span> <span class="o">:</span> <span class="nx">height</span><span class="p">,</span>
</span><span class='line'>  <span class="nx">width</span>  <span class="o">:</span> <span class="nx">width</span>
</span><span class='line'><span class="p">};</span>
</span></code></pre></td></tr></table></div></figure>


<p>To set up the size of the window we need to set the view port size of the <code>page</code> object, which was initialized at the beginning. In this case <code>viewportSize</code> means the actual size of the simulated window. But to make proper screenshots we have to define the property <code>clipRect</code> as well to make the image fitting to the actual window view size. According to phantomjs documentation <code>clipRect</code> defines the size of the area that should be rasterized when calling the <code>render</code> function.</p>

<p>So let&rsquo;s do the last step:</p>

<p>Photosession-Time!!! :)</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'><span class="nx">page</span><span class="p">.</span><span class="nx">open</span><span class="p">(</span> <span class="nx">url</span><span class="p">,</span> <span class="kd">function</span><span class="p">(</span> <span class="nx">status</span> <span class="p">)</span> <span class="p">{</span>
</span><span class='line'>  <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span> <span class="s1">&#39;Opened url with status: &#39;</span> <span class="o">+</span> <span class="nx">status</span> <span class="p">);</span>
</span><span class='line'>
</span><span class='line'>  <span class="nb">window</span><span class="p">.</span><span class="nx">setTimeout</span><span class="p">(</span> <span class="kd">function</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>    <span class="kd">var</span> <span class="nx">imgPath</span> <span class="o">=</span> <span class="nx">path</span> <span class="o">+</span>
</span><span class='line'>                    <span class="s1">&#39;img/&#39;</span> <span class="o">+</span>
</span><span class='line'>                    <span class="nx">url</span><span class="p">.</span><span class="nx">replace</span><span class="p">(</span> <span class="sr">/(http:\/\/|https:\/\/)/</span><span class="p">,</span> <span class="s1">&#39;&#39;</span><span class="p">).</span><span class="nx">replace</span><span class="p">(</span> <span class="sr">/\//g</span><span class="p">,</span> <span class="s1">&#39;-&#39;</span><span class="p">)</span> <span class="o">+</span>
</span><span class='line'>                    <span class="s1">&#39;-&#39;</span> <span class="o">+</span> <span class="nx">width</span> <span class="o">+</span> <span class="s1">&#39;x&#39;</span> <span class="o">+</span> <span class="nx">height</span> <span class="o">+</span>
</span><span class='line'>                    <span class="s1">&#39;.png&#39;</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>    <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span> <span class="s1">&#39;Rendering &#39;</span> <span class="o">+</span> <span class="nx">imgPath</span> <span class="p">);</span>
</span><span class='line'>    <span class="nx">page</span><span class="p">.</span><span class="nx">render</span><span class="p">(</span> <span class="nx">imgPath</span> <span class="p">);</span>
</span><span class='line'>
</span><span class='line'>    <span class="nx">phantom</span><span class="p">.</span><span class="nx">exit</span><span class="p">();</span>
</span><span class='line'>  <span class="p">},</span> <span class="mi">500</span> <span class="p">);</span>
</span><span class='line'><span class="p">}</span> <span class="p">);</span>
</span></code></pre></td></tr></table></div></figure>


<p>And that is it. :)</p>

<p>The <code>page</code> object opens the defined url and provides a callback, when it is done. The image path and name to save the image will be built up and the <code>page.render()</code> command then renders the image.</p>

<p>The console output works here because we defined the listeners to write it to the system on logs and errors.</p>

<p>The timeout is defined to provide some time to fetch images and execute included scripts. Many people are doing it this way. It is not 100% clean, but it does its job. If you don&rsquo;t like it, there is also the possibility to define a callback at <code>page.onLoadFinished</code>. But it is fine for me now. :)</p>

<p>And the last thing is to stop phantom with the <code>exit</code> command and return with a given status code. Per default it returns the status code 0, which means that everything was fine.</p>

<p>That&rsquo;s all the &ldquo;magic&rdquo; you need to take pictures of any site. The command to start the script is:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'><span class="nx">$</span> <span class="nx">phantomjs</span> <span class="nx">script</span><span class="p">.</span><span class="nx">js</span> <span class="nx">http</span><span class="o">:</span><span class="c1">//google.com ./ 1000 1200</span>
</span><span class='line'><span class="nx">Opened</span> <span class="nx">url</span> <span class="kd">with</span> <span class="nx">status</span><span class="o">:</span> <span class="nx">success</span>
</span><span class='line'><span class="nx">Rendering</span> <span class="p">.</span><span class="o">/</span><span class="nx">img</span><span class="o">/</span><span class="nx">google</span><span class="p">.</span><span class="nx">com</span><span class="o">-</span><span class="mi">1000</span><span class="nx">x1200</span><span class="p">.</span><span class="nx">png</span>
</span></code></pre></td></tr></table></div></figure>


<p>The script probably needs some improvements for error handling ( errors on page opening or missing system arguments ), but it has just the purpose to get started. :)</p>

<p>If you are interested in more stuff, how I build it into a grunt plugin, let me know. I am really excited about this whole phantomjs stuff and would like to share it.</p>

<p>Thanks for reading and if you have any comments or thoughts leave a comment or ping me on <a href="https://twitter.com/stefanjudis">Twitter</a>.</p>
<div class='octopress-authorbox'>
	<div class="author-pic">
		<img src="http://www.gravatar.com/avatar/22725c2d3eb331146549bf0d5d3c050c" alt="Stefan Judis" />
	</div>
	
	<div class="author-about">
		<h3>Stefan Judis</h3>
		<p>Frontend lover</p>
		<ul class="author-links">
			
			<li>
			<a href="http://twitter.com/stefanjudis">@stefanjudis</a>
			</li>
			
			
		</ul>
	</div>
</div>]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[grunt-photobox - secure yourself against broken layout]]></title>
    <link href="http://4waisenkinder.github.io/blog/2013/07/26/grunt-photobox-secure-yourself-against-broken-layout/"/>
    <updated>2013-07-26T00:32:00+02:00</updated>
    <id>http://4waisenkinder.github.io/blog/2013/07/26/grunt-photobox-secure-yourself-against-broken-layout</id>
    <content type="html"><![CDATA[<p>Recently at work we ran into the issue, that we had a broken layout in production. Everybody knows that and sure everybody produced that already. Most of the time it is not a big deal, but it is an uncomfortable situation to get the message like &ldquo;Hey, the product detail page is broken.&rdquo;. We implemented <a href="http://gruntjs.com">grunt</a> a few weeks before and got the idea to make the check for broken layout a bit easier for us and the QA-Team than clicking through the whole site in different screen sizes.</p>

<!-- more -->


<p>And this is the result of it:</p>

<p><strong>grunt-photobox</strong></p>

<p><img class="left" src="http://4waisenkinder.github.io/images/blog/stefanjudis/photoBox.png" width="420" height="300" title="grunt-photobox logo" alt="grunt-photobox logo"></p>

<p>Woooohooooo!!! Let me explain how it works:</p>

<ul>
<li>set up url&rsquo;s, that are important for you</li>
<li>set up screensizes, that are important for you &ndash; think of responsive web design</li>
<li>set up a path to render the screenshots and an index.html</li>
</ul>


<p>After that <a href="http://phantomjs.org/">phantomjs</a> will visit the url&rsquo;s with given size and simply takes a picture of it. Nothing magically about it. ;)</p>

<p>So let&rsquo;s set it up:</p>

<p>I downloaded a nice &ldquo;mobile-first&rdquo; site from <a href="http://html5boilerplate.com">html5boilerplate</a> and implemented grunt. When you&rsquo;re ready to go, you have to install <code>grunt-photobox</code>.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>npm install --save-dev grunt-photobox
</span></code></pre></td></tr></table></div></figure>


<p>Your <code>package.json</code> should include inside of the <code>devDependencies</code> photobox afterwards:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'><span class="p">{</span>
</span><span class='line'>  <span class="s2">&quot;name&quot;</span><span class="o">:</span> <span class="s2">&quot;grunt-photobox-tutorial&quot;</span><span class="p">,</span>
</span><span class='line'>  <span class="s2">&quot;version&quot;</span><span class="o">:</span> <span class="s2">&quot;0.1.0&quot;</span><span class="p">,</span>
</span><span class='line'>  <span class="s2">&quot;dependencies&quot;</span><span class="o">:</span> <span class="p">{},</span>
</span><span class='line'>  <span class="s2">&quot;devDependencies&quot;</span><span class="o">:</span> <span class="p">{</span>
</span><span class='line'>    <span class="s2">&quot;grunt&quot;</span><span class="o">:</span> <span class="s2">&quot;~0.4.1&quot;</span><span class="p">,</span>
</span><span class='line'>    <span class="s2">&quot;grunt-photobox&quot;</span><span class="o">:</span> <span class="s2">&quot;~0.1.2&quot;</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>After that let&rsquo;s start to configure grunt-photobox. We have to set the url&rsquo;s &ndash; in this case it is just <code>http://localhost/grunt-photobox-tutorial/</code>, because it is a dummy site. But at least we can set different screensizes to check if something broke and if the mobile site really works in a nice responsive way.</p>

<p>Your <code>Gruntfile.js</code> should look like that:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'><span class="nx">module</span><span class="p">.</span><span class="nx">exports</span> <span class="o">=</span> <span class="kd">function</span><span class="p">(</span><span class="nx">grunt</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>  <span class="nx">grunt</span><span class="p">.</span><span class="nx">initConfig</span><span class="p">(</span> <span class="p">{</span>
</span><span class='line'>    <span class="nx">pkg</span><span class="o">:</span> <span class="nx">grunt</span><span class="p">.</span><span class="nx">file</span><span class="p">.</span><span class="nx">readJSON</span><span class="p">(</span><span class="s1">&#39;package.json&#39;</span><span class="p">),</span>
</span><span class='line'>
</span><span class='line'>    <span class="nx">photobox</span><span class="o">:</span> <span class="p">{</span>
</span><span class='line'>      <span class="nx">options</span><span class="o">:</span> <span class="p">{</span>
</span><span class='line'>          <span class="c1">// set needed url&#39;s</span>
</span><span class='line'>        <span class="nx">urls</span><span class="o">:</span> <span class="p">[</span> <span class="s1">&#39;http://localhost/grunt-photobox-tutorial/&#39;</span> <span class="p">],</span>
</span><span class='line'>        <span class="c1">// set needed screensizes</span>
</span><span class='line'>        <span class="nx">screenSizes</span><span class="o">:</span> <span class="p">[</span> <span class="s1">&#39;400x800&#39;</span><span class="p">,</span> <span class="s1">&#39;600x800&#39;</span><span class="p">,</span> <span class="s1">&#39;1200x800&#39;</span> <span class="p">]</span>
</span><span class='line'>      <span class="p">}</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>  <span class="p">}</span> <span class="p">);</span>
</span><span class='line'>
</span><span class='line'>  <span class="c1">// Load photobox plugin</span>
</span><span class='line'>  <span class="nx">grunt</span><span class="p">.</span><span class="nx">loadNpmTasks</span><span class="p">(</span> <span class="s1">&#39;grunt-photobox&#39;</span> <span class="p">);</span>
</span><span class='line'>
</span><span class='line'>  <span class="c1">// Default task(s).</span>
</span><span class='line'>  <span class="nx">grunt</span><span class="p">.</span><span class="nx">registerTask</span><span class="p">(</span> <span class="s1">&#39;default&#39;</span><span class="p">,</span> <span class="p">[</span> <span class="s1">&#39;photobox&#39;</span> <span class="p">]</span> <span class="p">);</span>
</span><span class='line'><span class="p">};</span>
</span></code></pre></td></tr></table></div></figure>


<p><strong>And that&rsquo;s it.</strong></p>

<p>Now you can run <code>$ grunt</code>( we set photobox to default &ndash; if it&rsquo;s not default, run <code>$ grunt photobox</code>)</p>

<p><img class="left" src="http://4waisenkinder.github.io/images/blog/stefanjudis/photoBoxOutput.png" width="596" height="180" title="output of photobox grunt command" alt="output of photobox grunt command"></p>

<p>It will tell you, that a new <code>index.html</code> was created. Per default it is <code>photobox/</code>, but you can change that inside of the options, if you want to. When you run photobox for the first time, there is nothing to compare &ndash;  keep that in mind, when calling the photobox index for the first time. ;)</p>

<p>So let&rsquo;s break something and check if we can detect a broken layout with it. I commented out some css lines and ran photobox again. And here is the result:</p>

<p><img class="left" src="http://4waisenkinder.github.io/images/blog/stefanjudis/photoBoxBroken.png" width="1120" height="750" title="broken layout" alt="broken layout"></p>

<p><strong>YEEEEESSSSS</strong>. It is obvious, that something went wrong here with the size of 1200x800 and that we were able to notice that without clicking around and checking by ourselves. ;)</p>

<p>Inside of the generated index file you&rsquo;ve got the possibility, to check the old and new version in seperate images or to overlay both pictures. What you see here, is the &lsquo;overlay&rsquo; mode.</p>

<p>If you want to check out the output <code>index.html</code> of this example and play around with it &ndash; <a href="http://stefanjudis.github.io/grunt-photobox-tutorial/photobox">here it is</a>.</p>

<p>We will implement that at work soon. If you have any feedback or feature requests, please let me know and write me an <a href="mailto:stefanjudis@gmail.com">email</a> or ping on <a href="https://twitter.com/stefanjudis">Twitter</a>. It is still in early stage, though. I would really like to have some feedback on that, because I think, it can speed up the qa-process heavily.</p>

<p>THX.</p>

<p><a href="https://npmjs.org/package/grunt-photobox">grunt-photobox at NPM</a></p>

<p><a href="https://github.com/stefanjudis/grunt-photobox">grunt-photobox at Github</a></p>
<div class='octopress-authorbox'>
	<div class="author-pic">
		<img src="http://www.gravatar.com/avatar/22725c2d3eb331146549bf0d5d3c050c" alt="Stefan Judis" />
	</div>
	
	<div class="author-about">
		<h3>Stefan Judis</h3>
		<p>Frontend lover</p>
		<ul class="author-links">
			
			<li>
			<a href="http://twitter.com/stefanjudis">@stefanjudis</a>
			</li>
			
			
		</ul>
	</div>
</div>]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA["shrinkwrap" and how to deal with a dependency fu** up]]></title>
    <link href="http://4waisenkinder.github.io/blog/2013/07/10/why-you-should-use-npm-shrinkwrap-and-how-to-deal-with-a-dependency-fu-star-star-up/"/>
    <updated>2013-07-10T19:13:00+02:00</updated>
    <id>http://4waisenkinder.github.io/blog/2013/07/10/why-you-should-use-npm-shrinkwrap-and-how-to-deal-with-a-dependency-fu-star-star-up</id>
    <content type="html"><![CDATA[<p>A few people may have noticed, that <code>npm install grunt</code> was failing today. According to the pull requests made, it was failing for 10 ( ! ) hours. When you think right know, that this is not a big deal, you probably do not use it in production. Because then it becomes a big problem very quickly.</p>

<!-- more -->


<p>The reason for failing was a first renamed and later removed dependency of grunt itself. Grunt defines its dependencies ( defined inside of the <code>package.json</code>, if you are not familiar with npm ) with  a <code>~</code> in front of each version number. That is quite common and there is nothing special about it. The <a href="https://npmjs.org/doc/json.html#Tilde-Version-Ranges">tilde</a> defines, that every version greater than the specifed one and less than the next major release is fine to install.</p>

<p>What happened exactly, was that npm was not able to find a version of a particular dependency that fits this conditions ( because of renaming and removing ). And that is it. Nothing special about it, but an important insight.</p>

<p><strong>Whenever we publish something on npm, we have to let it there &ndash; no renaming or removing. There can always be people using it and it can screw up their build!</strong></p>

<p>However, we had to figure out a workaround today quickly, and that is what we did until it was fixed.</p>

<p>We forked grunt at Github. Fixed the dependency problem and set the &ldquo;new&rdquo; grunt as our project dependency. Npm allows you to set dependencies that are not published at npm easily. That can be quiet handy from time to time. ;)</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>"devDependencies": {
</span><span class='line'>  "grunt": "git://github.com/you/your-grunt-fork.git"
</span><span class='line'>}</span></code></pre></td></tr></table></div></figure>


<p>Later on there were a few discussions about npm dependency handling on Twitter and <a href="https://twitter.com/asciidisco">@asciidisco</a> pointed me into the direction of <code>npm shrinkwrap</code>.</p>

<p>This command locks all your installed dependencies and writes a new file called <strong>npm-shrinkwrap.json</strong>.</p>

<p>This file is similar to php&rsquo;s <strong>composer.lock</strong> or ruby&rsquo;s <strong>Gemfile.lock</strong>. When you call <code>npm install</code> later on it installs the locked versions written in this file. The version numbers are locked recursively, so that you are safe on production level without any bad surprises.</p>

<p>There can always be a version jump in a dependency, which is quite welcome, but I don&rsquo;t want check out if it works on production side first&hellip;</p>

<p>So the solution is:</p>

<p><strong>Stay with your package.json and define dependencies with &lsquo;>=&rsquo; or &lsquo;~&rsquo; to receive the newest stuff locally, but lock all dependencies for production.</strong></p>

<p>As always opinions and solutions are very welcome about this topic. ;)</p>
<div class='octopress-authorbox'>
	<div class="author-pic">
		<img src="http://www.gravatar.com/avatar/22725c2d3eb331146549bf0d5d3c050c" alt="Stefan Judis" />
	</div>
	
	<div class="author-about">
		<h3>Stefan Judis</h3>
		<p>Frontend lover</p>
		<ul class="author-links">
			
			<li>
			<a href="http://twitter.com/stefanjudis">@stefanjudis</a>
			</li>
			
			
		</ul>
	</div>
</div>]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[See how your project performs at Travis CI]]></title>
    <link href="http://4waisenkinder.github.io/blog/2013/07/07/see-how-your-project-performs-at-travis-ci/"/>
    <updated>2013-07-07T14:50:00+02:00</updated>
    <id>http://4waisenkinder.github.io/blog/2013/07/07/see-how-your-project-performs-at-travis-ci</id>
    <content type="html"><![CDATA[<p>Many people run their test suite at Travis CI these days. At Travis you got the possibility to run your test suite against different programming languages and different versions of these ( e.g. node 0.8 / 0.9 / â¦ ). Figuring out if there will be any problems or exceptions before switching to a new language version are easily done this way ( always assuming you are following the principles of test driven development ). <strong>Test your stuff at Travis first, then switch your server to the new version of language XY</strong>.</p>

<!-- more -->


<p>Tests that run in different languages are called &lsquo;jobs&rsquo; in travis context. You can define them in your .travis.yml.</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>language: node_js
</span><span class='line'>  node_js:
</span><span class='line'>    - "0.8"
</span><span class='line'>    - "0.9"
</span><span class='line'>    - "0.10"</span></code></pre></td></tr></table></div></figure>


<p>Later on you can see this configuration inside of the so called build-matrix at <a href="http://travis-ci.org">Travis</a>.</p>

<p><img class="center" src="http://4waisenkinder.github.io/images/blog/stefanjudis/buildMatrix.png" width="1225" height="184" title="build matrix cushion-cli" alt="build matrix for my project cushion-cli"></p>

<p>Via Travalizit ( <a href="http://4waisenkinder.de/blog/2013/06/21/help-me-analyze-travis-build-data/">further explanation and introduction</a> ) you got the possibility to analyse your Travis build data. It is still in early stage, but I think you can already get some information, you did not know before. To have always the latest Travis information at Travalizit you only have to define a wekhook that sends the build data to Travalizit each time you finished a build ( checkout out explanation and introduction ).</p>

<p>Yesterday night I implemented a new chart to compare different builds with including jobs in term of state and duration. With the help of this chart you can easily check if a new language version will increase performance or not.</p>

<p>To check your project just go to <a href="http://travalizit.org">Travalizit</a>, add a new chart and choose type &ldquo;Travis job details&rdquo;.</p>

<p><img class="center" src="http://4waisenkinder.github.io/images/blog/stefanjudis/jobDetails.png" width="603" height="377" title="add job details chart action" alt="push the button ;)"></p>

<p>After that you will probably get a message, that your build data is not included in the Travalizit database ( there is the small chance that it is, because I tested a lot ). Right now you got the possibility to fetch the latest builds from Travis.</p>

<p><img class="center" src="http://4waisenkinder.github.io/images/blog/stefanjudis/fetchData.png" width="867" height="655" title="fetch data action" alt="fetch data dialog if no build data is available"></p>

<p>Press the &lsquo;fetch&rsquo; &ndash; button and you are done. This works only <strong>once</strong>, because the architecture is actual set up to receive recent build data via webhook. That means, if you want to come back and to see the latest builds, you have implement the hook. ;)</p>

<p>And that is the result:</p>

<p><img class="center" src="http://4waisenkinder.github.io/images/blog/stefanjudis/jobDetailsChart.png" width="882" height="670" title="job details for cushion-cli" alt="Travis job details chart for cushion-cli"></p>

<p>Right now you can check the duration and state ( passed / errored / failed ) of the different jobs. If you want to see more, let me know.</p>

<p>I would love to hear wishes, improvements and feedback. So, if it is not working for you and your project or you have something to say about that ping me on <a href="https://twitter.com/stefanjudis">Twitter</a>, write me an <a href="mailto:stefanjudis@gmail.com">email</a> or leave a comment.</p>

<p>THX.</p>

<p>PS. I started developing a <a href="https://npmjs.org/package/travalizit">Nodes.js Travis-Api</a> for this project. If someone is interested in that, give a sign. That keeps motivation high. ;)</p>
<div class='octopress-authorbox'>
	<div class="author-pic">
		<img src="http://www.gravatar.com/avatar/22725c2d3eb331146549bf0d5d3c050c" alt="Stefan Judis" />
	</div>
	
	<div class="author-about">
		<h3>Stefan Judis</h3>
		<p>Frontend lover</p>
		<ul class="author-links">
			
			<li>
			<a href="http://twitter.com/stefanjudis">@stefanjudis</a>
			</li>
			
			
		</ul>
	</div>
</div>]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Show npm statistics at terminal start]]></title>
    <link href="http://4waisenkinder.github.io/blog/2013/06/24/show-npm-statistics-terminal-start/"/>
    <updated>2013-06-24T22:21:00+02:00</updated>
    <id>http://4waisenkinder.github.io/blog/2013/06/24/show-npm-statistics-terminal-start</id>
    <content type="html"><![CDATA[<p>Two month ago I released my <a href="https://npmjs.org/package/cushion-cli">first npm module</a>. I got really excited (and I am still) about releasing something and showing it to the world. Since then the statistics written on top of the module page at NPM are checked by me on a daily basis. Unfortunately these statistics do not seem to be really precise. They are jumping from day to day and should not be taken to serious in my mind (No offense meant. I really like NPM and I think it is a great service).</p>

<p>That is the reason why a friend of mine wrote a <a href="https://raw.github.com/Zoddy/geektool-desk/master/os_downloads.js">tiny script</a> to read the statistics directly from where the data is stored &ndash; a <a href="http://isaacs.iriscouch.com/">CouchDB</a> available for everyone. The script will be part of a <a href="https://github.com/Zoddy/geektool-desk">library for geeky stuff</a> and tools later on, but that is another story.</p>

<p>Today I had the idea about showing this kind of information whenever I open a new terminal window to save some time and &ldquo;pimp my terminal&rdquo;.</p>

<!-- more -->


<p>I googled a bit and had to notice that it is not to easy to execute scripts on MacOS in the <code>/etc/motd</code> (message of the day). It seems to be much easier in the linux world &ndash; correct me when I&rsquo;m wrong please. ;)</p>

<p>So I decided to execute the whole stuff inside of the shell configuration files placed in the given user root (information about NPM modules are probably user related, so after a bit of thinking I like that solution even more).</p>

<p>To start you have to clone the Github project with the mentioned script (in my case <code>~/Sites/</code>).</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>git clone https://github.com/Zoddy/geektool-desk.git</span></code></pre></td></tr></table></div></figure>


<p>After that we start editing the .bash_profile, .bashrc, .zshrc or whatever shell file your system and shell gives you.</p>

<p>I prefer using ZSH. Adding the following lines does all the magic for me &ndash; look at this <a href="https://github.com/Zoddy/geektool-desk">readme</a> for further explanation how to use the script. This example is made for my &lsquo;cushion-cli&rsquo; project. I think you are not interested in this data, so please feel free to change it to your project names.</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>### show cushion-cli downloads
</span><span class='line'>
</span><span class='line'>echo "\nCUSHION-CLI DOWNLOADS\n"
</span><span class='line'>
</span><span class='line'>echo "TODAY / YESTERDAY:"
</span><span class='line'>today=$(node /Users/stefan/Sites/geektool-desk/os_downloads.js cushion-cli today)
</span><span class='line'>yesterday=$(node /Users/stefan/Sites/geektool-desk/os_downloads.js cushion-cli yesterday)
</span><span class='line'>printf "%s / %s downloads\n\n" "$today" "$yesterday"
</span><span class='line'>
</span><span class='line'>echo 'CURRENT WEEK / LAST WEEK:'
</span><span class='line'>week=$(node /Users/stefan/Sites/geektool-desk/os_downloads.js cushion-cli current-week)
</span><span class='line'>last_week=$(node /Users/stefan/Sites/geektool-desk/os_downloads.js cushion-cli last-week)
</span><span class='line'>printf "%s / %s downloads\n\n" "$week" "$last_week"
</span><span class='line'>
</span><span class='line'>echo 'CURRENT MONTH / LAST MONTH:'
</span><span class='line'>month=$(node /Users/stefan/Sites/geektool-desk/os_downloads.js cushion-cli current-month)
</span><span class='line'>last_month=$(node /Users/stefan/Sites/geektool-desk/os_downloads.js cushion-cli last-month)
</span><span class='line'>printf "%s / %s downloads\n\n" "$month" "$last_month"</span></code></pre></td></tr></table></div></figure>


<p>I am not a shell script wizard. If something is not correct with these lines let me know.</p>

<p>And that is the result. Hope you enjoy it.</p>

<p><img class="right" src="http://4waisenkinder.github.io/images/blog/stefanjudis/npmPrompt.png" width="254" height="233" title="prompt with npm statistic" alt="prompt with npm statistic for cushion-cli"></p>
<div class='octopress-authorbox'>
	<div class="author-pic">
		<img src="http://www.gravatar.com/avatar/22725c2d3eb331146549bf0d5d3c050c" alt="Stefan Judis" />
	</div>
	
	<div class="author-about">
		<h3>Stefan Judis</h3>
		<p>Frontend lover</p>
		<ul class="author-links">
			
			<li>
			<a href="http://twitter.com/stefanjudis">@stefanjudis</a>
			</li>
			
			
		</ul>
	</div>
</div>]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Help me analyze travis build data]]></title>
    <link href="http://4waisenkinder.github.io/blog/2013/06/21/help-me-analyze-travis-build-data/"/>
    <updated>2013-06-21T14:30:00+02:00</updated>
    <id>http://4waisenkinder.github.io/blog/2013/06/21/help-me-analyze-travis-build-data</id>
    <content type="html"><![CDATA[<p>Hey, I study Media and Computer Science in Berlin and I need your help.
The last goal of my studies is to write my bachelor thesis and I want to show you what it is about.</p>

<p>I am in colaboration with <a href="http://travis-ci.org">Travis CI</a> (you may have heard about it) and my goal is to analyse the data Travis produces everyday. Data about every build that is triggered by any open source project over the world doing continuous integration.</p>

<!-- more -->


<p>Travis provides the possibility to implement webhooks. Webhooks are part of the <a href="http://about.travis-ci.org/docs/user/notifications/">travis notifications</a> and are simple HTTP post requests to a given end point you define in your .travis.yml file (the general travis configuration file) triggered whenever a build at travis-ci end (no matter if successful or not). These requests include general data of the last build.</p>

<p>I already built up a <a href="http://travalizit.org">web app</a> to play around with the data. Right now there are three charts included. One is showing the success/fail ratio of all builds in a particular time interval. Another one shows the distribution of different projects included in a given time.</p>

<p>And the last one at the moment is one chart including data fetched from github.</p>

<p><img class="center" src="http://4waisenkinder.github.io/images/blog/stefanjudis/repochart.png" width="788" height="532" title="repo chart travalizit" alt="repo chart for my repo cushion-cli"></p>

<p>I&rsquo;m really excited about this one. What you see in there are the last 20 builds (left side) of <a href="https://github.com/stefanjudis/cushion-cli">one of my private projects</a>. The nice thing about that is, that all the commits (right side) related to a given build are fetched from the github api. That means you can quickly figure out, which files are often causing a failed build (marked black and not red &ndash; like build with number 180).</p>

<p>With the information provided by github I could build up a tool to answer a lot of questions.</p>

<ul>
<li>which files are touched more often and cause broken builds?</li>
<li>how many commits are needed to fix a broken build?</li>
<li>how long does it generally take to fix a broken build?</li>
<li>how many commits included in one build cause a broken build?</li>
<li>how many different contributors cause a broken build?</li>
</ul>


<p>I don&rsquo;t know If it is possible and/or valid to answer these questions with given data, but I would like to try to answer a few of them. And the point is:</p>

<h4>If only one person really hears something new about his/her project it would be already a win.</h4>

<p><strong>And hear is where you come into the game.</strong> When you use Travis CI please share your build data with me by implementing the webhook pointing to my webapp in your .travis.yml (just put it at the bottom of the file).</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>notifications:
</span><span class='line'>  webhooks: http://travalizit.org/builds</span></code></pre></td></tr></table></div></figure>


<p>Your data will be written into my database and will then be included into the charts.</p>

<p>And after that please share your ideas about what you would like to see and what would be useful for you and your project with me. Drop me a line on <a href="https://twitter.com/stefanjudis">Twitter</a> or send me an <a href="mailto:stefanjudis@gmail.com">email</a>. That would be just great.</p>

<p>The app is at a quite early stage right now, so if something is not working as expected or you see improvements get in touch as well.</p>

<h4>Let us build something useful. ;)</h4>
<div class='octopress-authorbox'>
	<div class="author-pic">
		<img src="http://www.gravatar.com/avatar/22725c2d3eb331146549bf0d5d3c050c" alt="Stefan Judis" />
	</div>
	
	<div class="author-about">
		<h3>Stefan Judis</h3>
		<p>Frontend lover</p>
		<ul class="author-links">
			
			<li>
			<a href="http://twitter.com/stefanjudis">@stefanjudis</a>
			</li>
			
			
		</ul>
	</div>
</div>]]></content>
  </entry>
  
</feed>
