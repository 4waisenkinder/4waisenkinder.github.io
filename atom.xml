<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[4waisenkinder]]></title>
  <link href="http://4waisenkinder.github.io/atom.xml" rel="self"/>
  <link href="http://4waisenkinder.github.io/"/>
  <updated>2013-09-27T16:20:41+02:00</updated>
  <id>http://4waisenkinder.github.io/</id>
  <author>
    <name><![CDATA[Stefan Judis, Patrick Venetz, André Kussmann, Bernhard Weisshuhn]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Getting started with web components and polymer.js]]></title>
    <link href="http://4waisenkinder.github.io/blog/2013/09/21/getting-started-with-web-components-and-polymer-dot-js/"/>
    <updated>2013-09-21T18:35:00+02:00</updated>
    <id>http://4waisenkinder.github.io/blog/2013/09/21/getting-started-with-web-components-and-polymer-dot-js</id>
    <content type="html"><![CDATA[<p>I spent a lot of time on <a href="http://codepen.io">codepen</a> the last days to train my CSS skills and to relax a bit (it is really awesome to just play around there while watching a movie). One thing I created was a styled checkbox. And while doing that, the idea came to me, that this checkbox is a perfect use case to start playing around with this magic thing called &ldquo;web components&rdquo;, that is heavily around since a few month and is probably the &ldquo;next big thing&rdquo; in web development.</p>

<!-- more -->


<p>Web components are basically small encapsuled units inside of a website or web application(like for example the HTML5 video element). They include their own styling (CSS) and their own behaviour (JS). And this is the biggest advantage of them. Imagine little pieces inside of your web app, that are not influenced by the global stylesheet and whose children are not affected by any written JavaScript function. This way you end up with a box of bricks and the only thing to do is putting them together easily. Additionally you can use them whereever you want, because they include everything they need to look awesome and to behave awesome. Sounds really like a dream to me. :)</p>

<p>If you are interested in that topic, recommended ressources are the following:</p>

<ul>
<li><a href="http://html5-demos.appspot.com/static/webcomponents/index.html">slides about web components created by Google</a></li>
<li><a href="http://www.youtube.com/watch?v=U45e-zq4bTs&amp;feature=youtu.be">talk about web components at CSSconf.eu </a></li>
<li><a href="http://www.w3.org/TR/2013/WD-components-intro-20130606/">W3C working draft about web components</a></li>
</ul>


<p>I started looking around and decided to use <a href="http://www.polymer-project.org">polymer.js</a> (written by the Google guys) to play around with the principle of web components. Unfortunately they are rarely supported these days and this library gives me the opportunity to use this technique already today by providing needed polyfills.</p>

<p>So, here is my checkbox! Let&rsquo;s make a &ldquo;real&rdquo; new fancy web component out of it.</p>

<pre class="codepen" data-height="400" data-type="result" data-href="ojDif" data-user="stefanjudis"><code> </code></pre>


<script async src="http://codepen.io:/assets/embed/ei.js"></script>


<p>I started by downloading the basic stuff from <a href="http://html5boilerplate.com">HTML5BOILERPLATE</a> and the polymer component library. The first things to start using it are implementing the polymer script inside of the <code>head</code> of the document and loading your first web component file. Web components need to include a hyphen inside of their name defined by the specs to avoid conflicts with existing elements.</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>&lt;!-- @start Polymer stuff --&gt;
</span><span class='line'>&lt;script src="js/vendor/polymer.min.js"&gt;&lt;/script&gt;
</span><span class='line'>
</span><span class='line'>&lt;link rel="import" href="components/sj-checkbox.html"&gt;
</span><span class='line'>&lt;!-- @end Polymer stuff --&gt;</span></code></pre></td></tr></table></div></figure>


<p>Next step is to create this component html file, that will define the new web component. I created a new folder for my web components and created the file <code>sj-checkbox.html</code>. Inside of that file I started to implement the new component regarding the polymer documentation.</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>&lt;polymer-element name="sj-checkbox"&gt;
</span><span class='line'>  &lt;template&gt;
</span><span class='line'>    hello world
</span><span class='line'>  &lt;/template&gt;
</span><span class='line'>  &lt;script&gt;
</span><span class='line'>    Polymer( 'sj-checkbox', {} );
</span><span class='line'>  &lt;/script&gt;
</span><span class='line'>&lt;/polymer-element&gt;</span></code></pre></td></tr></table></div></figure>


<p>That is all you need. Wrap everything in the <code>polymer-element</code> tag, set a name as attribute, use the new HTML5 template element to define your markup, call the Polymer constructor inside of a <code>script</code> tag and you are done. After that, you can use a new custom element inside of your &#8220;ìndex.html&#8220;`.</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>&lt;ul id="switchesComponents"&gt;
</span><span class='line'>  &lt;li&gt;&lt;sj-checkbox&gt;&lt;/sj-checkbox&gt;
</span><span class='line'>  &lt;li&gt;&lt;sj-checkbox&gt;&lt;/sj-checkbox&gt;
</span><span class='line'>  &lt;li&gt;&lt;sj-checkbox&gt;&lt;/sj-checkbox&gt;
</span><span class='line'>&lt;/ul&gt;</span></code></pre></td></tr></table></div></figure>


<p>When you inspect this in a current version of Chrome Canary and you enabled the needed flags (look <a href="http://html5-demos.appspot.com/static/webcomponents/index.html#69">here</a>) you will see the power of this technique.</p>

<p><img class="left" src="http://4waisenkinder.github.io/images/blog/stefanjudis/simpleComponent.jpg" width="244" height="239" title="First simple web component" alt="First simple web component"></p>

<p>Our little &lsquo;hello world&rsquo; message is visible on our screen and it is encapsulated inside of the <a href="http://www.html5rocks.com/en/tutorials/webcomponents/shadowdom/">shadow DOM</a>. I mean, how awesome is that?</p>

<p>After this success I started implementing the actual new checkbox markup and the needed styles.</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>&lt;polymer-element name="sj-checkbox"&gt;
</span><span class='line'>  &lt;template&gt;
</span><span class='line'>    &lt;style&gt;
</span><span class='line'>      /* all my styles here */
</span><span class='line'>    &lt;/style&gt;
</span><span class='line'>    &lt;div class="switch"&gt;
</span><span class='line'>      &lt;div class="switch__circle"&gt;
</span><span class='line'>          &lt;input id="switcher" class="switch__input" type="checkbox"&gt;
</span><span class='line'>          &lt;div class="switch__innerCircles"&gt;&lt;/div&gt;
</span><span class='line'>          &lt;label class="switch__label" for="switcher"&gt;Switch me!!!&lt;/label&gt;
</span><span class='line'>        &lt;/div&gt;
</span><span class='line'>      &lt;/div&gt;
</span><span class='line'>    &lt;/div&gt;
</span><span class='line'>  &lt;/template&gt;
</span><span class='line'>  &lt;script&gt;
</span><span class='line'>    Polymer( 'sj-checkbox', {});
</span><span class='line'>  &lt;/script&gt;
</span><span class='line'>&lt;/polymer-element&gt;
</span></code></pre></td></tr></table></div></figure>


<p>That worked actually on first try and I saw the new checkbox and its &ldquo;hidden&rdquo; markup inside of the shadow DOM tree. I prepared the checkbox to be configurable easily so that it is possible to get it in three different sizes by just adding the class &ldquo;small&rdquo;, &ldquo;medium&rdquo; or &ldquo;big&rdquo; to the <code>switch</code>container. To achieve that, you can easily add custom attributes to your new created web component.</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>&lt;ul id="switchesComponents"&gt;
</span><span class='line'>  &lt;li&gt;&lt;sj-checkbox size="big"&gt;&lt;/sj-checkbox&gt;
</span><span class='line'>  &lt;li&gt;&lt;sj-checkbox size="medium"&gt;&lt;/sj-checkbox&gt;
</span><span class='line'>  &lt;li&gt;&lt;sj-checkbox size="small"&gt;&lt;/sj-checkbox&gt;
</span><span class='line'>&lt;/ul&gt;</span></code></pre></td></tr></table></div></figure>


<p>Additionally you have to define inside of your component html file (remember <code>components/sj-checkbox.html</code>) that this value is readable. This is done by setting a new attribute <code>attributes</code> to the <code>polymer-element</code> element defining the given values. It is also possible to set default value for the size attribute then. You can then access the value by calling the attribute name wrapped into two curly braces inside of your component html.</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>&lt;!-- define attributes here -->
</span><span class='line'>&lt;polymer-element name="sj-checkbox" attributes="size">
</span><span class='line'>  &lt;template>
</span><span class='line'>    &lt;style>
</span><span class='line'>    /* all my styles here */
</span><span class='line'>    &lt;/style>
</span><span class='line'>    &lt;!-- backslashes are not needed - but octopress forces me to do it like that :( -->
</span><span class='line'>    &lt;div class="switch {{size}}">
</span><span class='line'>      &lt;div class="switch__circle">
</span><span class='line'>          &lt;input id="switcher" class="switch__input" type="checkbox" on-change="changeHandler"checked="checked">
</span><span class='line'>          &lt;div class="switch__innerCircles">&lt;/div>
</span><span class='line'>          &lt;label class="switch__label" for="switcher">Switch me!!!&lt;/label>
</span><span class='line'>        &lt;/div>
</span><span class='line'>      &lt;/div>
</span><span class='line'>    &lt;/div>
</span><span class='line'>  &lt;/template>
</span><span class='line'>  &lt;script>
</span><span class='line'>      // define default values here
</span><span class='line'>    Polymer( 'sj-checkbox', {
</span><span class='line'>      size: 'medium'
</span><span class='line'>    } );
</span><span class='line'>  &lt;/script>
</span><span class='line'>&lt;/polymer-element></span></code></pre></td></tr></table></div></figure>


<p>So far so good. The checkbox appears with its full markup and depending styles.</p>

<p><img class="left" src="http://4waisenkinder.github.io/images/blog/stefanjudis/fullComponent.jpg" width="545" height="232" title="Full checkbox web component" alt="Full checkbox web component"></p>

<p>After that the checkboxes are implemented in different sizes and it is time to add some functionality to them. Usually the way is to bind an event listener to the change event of the input element and then update whatever needs to be updated. Unfortunately this elements do not trigger any change events anymore, because they are hidden inside of the shadow DOM. Polymer provides an easy way to implement custom events to solve this problem.</p>

<p>You only have to implement a <code>on-change</code> attribute on the input field hidden inside of the shadow DOM and define a callback function, that should be executed when the event is triggered. Inside of this function you are able to trigger a custom event using <code>this.fire()</code>.</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>&lt;polymer-element name="sj-checkbox" attributes="size">
</span><span class='line'>  &lt;template>
</span><span class='line'>    &lt;style>
</span><span class='line'>    /* all my styles here */
</span><span class='line'>    &lt;/style>
</span><span class='line'>    &lt;div class="switch {{size}}">
</span><span class='line'>      &lt;div class="switch__circle">
</span><span class='line'>          &lt;input id="switcher" class="switch__input" type="checkbox" on-change="changeHandler" checked="checked">
</span><span class='line'>          &lt;div class="switch__innerCircles">&lt;/div>
</span><span class='line'>          &lt;label class="switch__label" for="switcher">Switch me!!!&lt;/label>
</span><span class='line'>        &lt;/div>
</span><span class='line'>      &lt;/div>
</span><span class='line'>    &lt;/div>
</span><span class='line'>  &lt;/template>
</span><span class='line'>  &lt;script>
</span><span class='line'>    Polymer( 'sj-checkbox', {
</span><span class='line'>      size: 'medium',
</span><span class='line'>      changeHandler: function( event ) {
</span><span class='line'>        this.fire(
</span><span class='line'>          'change',
</span><span class='line'>          {
</span><span class='line'>            id: event.target.id
</span><span class='line'>          }
</span><span class='line'>        );
</span><span class='line'>      }
</span><span class='line'>    } );
</span><span class='line'>  &lt;/script>
</span><span class='line'>&lt;/polymer-element></span></code></pre></td></tr></table></div></figure>


<p>Afterwards you can easily listen to this event and react to it.</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>&lt;ul id="switchesComponents"&gt;
</span><span class='line'>  &lt;li&gt;&lt;sj-checkbox size="big"&gt;&lt;/sj-checkbox&gt;
</span><span class='line'>  &lt;li&gt;&lt;sj-checkbox size="medium"&gt;&lt;/sj-checkbox&gt;
</span><span class='line'>  &lt;li&gt;&lt;sj-checkbox size="small"&gt;&lt;/sj-checkbox&gt;
</span><span class='line'>&lt;/ul&gt;
</span><span class='line'>&lt;div id="switchesComponentsNotifications" class="notification"&gt;&lt;/div&gt;
</span><span class='line'>&lt;script&gt;
</span><span class='line'>  ( function( document ) {
</span><span class='line'>      var switchList    = document.getElementById( 'switchesComponents' );
</span><span class='line'>
</span><span class='line'>      switchList.addEventListener( 'change', changeHandler, false );
</span><span class='line'>
</span><span class='line'>      function changeHandler( event ) {
</span><span class='line'>          var notification = document.getElementById( 'switchesComponentsNotifications' );
</span><span class='line'>
</span><span class='line'>          notification.innerHTML = '!!! ' + event.detail.id +' switched !!!';
</span><span class='line'>      }
</span><span class='line'>  } )( document );
</span><span class='line'>&lt;/script&gt;</span></code></pre></td></tr></table></div></figure>


<p>About that is to say, that when you fire events this way inside of your component you can pass as second argument an object which will be accessable inside of the event handler under the <code>detail</code> key. In my case I am just handing over the id of the input element.</p>

<h3>Stuff to be careful with</h3>

<p>The two following issues with polymer are already reported bug tickets. Before continue reading you can check out the state of both here:</p>

<ul>
<li><a href="https://github.com/Polymer/polymer/issues/296">prevent event bubbling in fallback</a></li>
<li><a href="https://github.com/Polymer/polymer/issues/295">prevent dublicate ID&rsquo;s in fallback</a></li>
</ul>


<p>When checking browser compability of this I noticed that using id&rsquo;s inside of your web components can be really tricky. There is no problem in case the browser supports web components (id&rsquo;s are inside of the shadow DOM and totally encapsulated), but if not polymer does some magic and your component will appear in the form of normal html. Then you&rsquo;ve got the same id multiple times in your application, which leads to invalid markup and maybe unexpected behaviour. My solution for that was adding kind of <code>fallbackId</code> to the component.</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>&lt;ul id="switchesComponents"&gt;
</span><span class='line'>  &lt;li&gt;&lt;sj-checkbox size="big" fallbackId="checkboxBigComponent"&gt;&lt;/sj-checkbox&gt;</span></code></pre></td></tr></table></div></figure>




<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>&lt;div class="switch {{size}}">
</span><span class='line'>  &lt;div class="switch__circle">
</span><span class='line'>      &lt;input id="{{fallbackId}}" class="switch__input" type="checkbox" on-change="changeHandler"checked="checked">
</span><span class='line'>      &lt;div class="switch__innerCircles">&lt;/div>
</span><span class='line'>      &lt;label class="switch__label" for="{{fallbackId}}">Switch me!!!&lt;/label>
</span><span class='line'>    &lt;/div>
</span><span class='line'>  &lt;/div>
</span><span class='line'>&lt;/div></span></code></pre></td></tr></table></div></figure>


<p>Another thing I noticed is, that you should always namespace your events triggered by your components. In my first implementation (which you see a few lines above) I defined the component to trigger a <code>change</code> event. That worked fine in Canary, but unfortunately in other browsers there are two events fired. One by the web component itself and on by the input field that is not hidden inside of the shadow DOM. I ended up with triggering an event called <code>componentChange</code> and that worked fine.</p>

<p>Jap and that is it. You can check out the result <a href="http://stefanjudis.github.io/webComponents-tutorial/">here</a> &ndash; check it out in Canaray, it&rsquo;s just awesome.</p>

<p>I will continue playing around with this. My next goal is to achieve a new input element type like <code>&lt;input type="myFancyCheckbox"&gt;</code> that I actually can use inside of my forms, but I have got no idea how this works yet. Addiontally implementing custom pseudo elements to make the components accessible and styleable from the outside seams to be a reasonable next step.</p>

<p>So, thanks for reading. Feedback is as always really welcome. ;)</p>
<div class='octopress-authorbox'>
	<div class="author-pic">
		<img src="http://www.gravatar.com/avatar/22725c2d3eb331146549bf0d5d3c050c" alt="Stefan Judis" />
	</div>
	
	<div class="author-about">
		<h3>Stefan Judis</h3>
		<p>Frontend lover</p>
		<ul class="author-links">
			
			<li>
			<a href="http://twitter.com/stefanjudis">@stefanjudis</a>
			</li>
			
			
		</ul>
	</div>
</div>]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Why you shouldn't use Backbone's built-in Array functions]]></title>
    <link href="http://4waisenkinder.github.io/blog/2013/08/13/why-you-should-not-use-backbone-collection-utility-functions/"/>
    <updated>2013-08-13T23:15:00+02:00</updated>
    <id>http://4waisenkinder.github.io/blog/2013/08/13/why-you-should-not-use-backbone-collection-utility-functions</id>
    <content type="html"><![CDATA[<p>Today I ran into an issue that let me dive into the Backbone.js library. Very often developers just use the stuff that is in there because it just works fine, but when it does not do what it is supposed to do the best way is to have a look into the used library and figure out what is going on.</p>

<p>My case was the following:</p>

<p>I had some lines for getting the index of a particular model stored inside of a Backbone collection.</p>

<!-- more -->




<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'><span class="kd">var</span> <span class="nx">index</span> <span class="o">=</span> <span class="nx">collection</span><span class="p">.</span><span class="nx">indexOf</span><span class="p">(</span> <span class="nx">model</span> <span class="p">);</span>
</span></code></pre></td></tr></table></div></figure>


<p>Not very complicated and it worked immediately. I did not really think about it. A colleague came around and pointed me into the direction, that the native Array function <em>indexOf</em> is only supported in IE9 and higher. I changed it to use the particular LoDash/Underscore utility function and it did not work anymore.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'><span class="kd">var</span> <span class="nx">index</span> <span class="o">=</span> <span class="nx">_</span><span class="p">.</span><span class="nx">indexOf</span><span class="p">(</span> <span class="nx">collection</span><span class="p">,</span> <span class="nx">model</span> <span class="p">);</span>
</span></code></pre></td></tr></table></div></figure>


<p>So, what was going on? After thinking about it, the idea that a Backbone collection uses the native Array function <em>indexOf</em> does not even make sense. So where does it come from? I checked the code and noticed that Backbone collections implement the Array functions of LoDash/Underscore. I created a <a href="http://jsbin.com/apowiz/25/edit">JSBin</a> to try this principle myself.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'><span class="kd">var</span> <span class="nx">ExampleObject</span> <span class="o">=</span> <span class="kd">function</span><span class="p">(</span> <span class="nx">array</span> <span class="p">)</span> <span class="p">{</span>
</span><span class='line'>   <span class="k">this</span><span class="p">.</span><span class="nx">array</span> <span class="o">=</span> <span class="nx">array</span><span class="p">;</span>
</span><span class='line'><span class="p">};</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// the methods we want to implement</span>
</span><span class='line'><span class="c1">// in our object</span>
</span><span class='line'><span class="kd">var</span> <span class="nx">utilityMethods</span> <span class="o">=</span> <span class="p">[</span> <span class="s1">&#39;indexOf&#39;</span><span class="p">,</span> <span class="s1">&#39;filter&#39;</span> <span class="p">],</span>
</span><span class='line'>    <span class="nx">slice</span>          <span class="o">=</span> <span class="p">[].</span><span class="nx">slice</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// iterate over the wished methods</span>
</span><span class='line'><span class="nx">_</span><span class="p">.</span><span class="nx">each</span><span class="p">(</span> <span class="nx">utilityMethods</span><span class="p">,</span> <span class="kd">function</span><span class="p">(</span> <span class="nx">method</span> <span class="p">)</span> <span class="p">{</span>
</span><span class='line'>  <span class="nx">ExampleObject</span><span class="p">.</span><span class="nx">prototype</span><span class="p">[</span> <span class="nx">method</span> <span class="p">]</span> <span class="o">=</span> <span class="kd">function</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>    <span class="kd">var</span> <span class="nx">args</span> <span class="o">=</span> <span class="nx">slice</span><span class="p">.</span><span class="nx">call</span><span class="p">(</span> <span class="nx">arguments</span> <span class="p">);</span>
</span><span class='line'>
</span><span class='line'>    <span class="nx">args</span><span class="p">.</span><span class="nx">unshift</span><span class="p">(</span> <span class="k">this</span><span class="p">.</span><span class="nx">array</span> <span class="p">);</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">return</span> <span class="nx">_</span><span class="p">[</span> <span class="nx">method</span> <span class="p">].</span><span class="nx">apply</span><span class="p">(</span> <span class="nx">_</span><span class="p">,</span> <span class="nx">args</span> <span class="p">);</span>
</span><span class='line'>  <span class="p">};</span>
</span><span class='line'><span class="p">});</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// create the new object</span>
</span><span class='line'><span class="kd">var</span> <span class="nx">example</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">ExampleObject</span><span class="p">(</span> <span class="p">[</span> <span class="mi">5</span><span class="p">,</span> <span class="mi">4</span><span class="p">,</span> <span class="mi">3</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="mi">1</span> <span class="p">]</span> <span class="p">);</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// proof that indexOf works</span>
</span><span class='line'><span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span> <span class="nx">example</span><span class="p">.</span><span class="nx">indexOf</span><span class="p">(</span> <span class="mi">2</span> <span class="p">)</span> <span class="p">);</span> <span class="c1">// output: 3</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// proof that filter workds</span>
</span><span class='line'><span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span>
</span><span class='line'>  <span class="nx">example</span><span class="p">.</span><span class="nx">filter</span><span class="p">(</span> <span class="kd">function</span><span class="p">(</span> <span class="nx">value</span> <span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">return</span> <span class="nx">value</span> <span class="o">%</span> <span class="mi">2</span><span class="p">;</span>
</span><span class='line'>  <span class="p">}</span> <span class="p">)</span>
</span><span class='line'><span class="p">);</span> <span class="c1">// output: [5, 3, 1]</span>
</span></code></pre></td></tr></table></div></figure>


<p>Let us dive into the stuff that goes on inside of the each loop.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'><span class="nx">ExampleObject</span><span class="p">.</span><span class="nx">prototype</span><span class="p">[</span> <span class="nx">method</span> <span class="p">]</span> <span class="o">=</span> <span class="kd">function</span><span class="p">()</span> <span class="p">{};</span>
</span></code></pre></td></tr></table></div></figure>


<p>That is a basic pattern to extent the prototype of JavaScript object. In our case the prototype is <em>ExampleObject</em> and this way it has a method that is shared by every instance of <em>ExampleObject</em>.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'><span class="kd">var</span> <span class="nx">args</span> <span class="o">=</span> <span class="nx">slice</span><span class="p">.</span><span class="nx">call</span><span class="p">(</span> <span class="nx">arguments</span> <span class="p">);</span>
</span></code></pre></td></tr></table></div></figure>


<p>This line was my first learning of digging into the Backbone codebase. Calling the Array function <em>slice</em> and passing in <em>arguments</em> is a common way to receive an Array out of the arguments object, which is available in every JavaScript function ( more information about that <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Functions_and_function_scope/arguments">here</a> ). My usual way to do that is <em>Array.prototype.slice( arguments )</em>. Backbone caches the slice function before using it for better performance ( which is proved <a href="http://jsperf.com/array-prototype-slice-call-vs-slice-call/7">here</a>). It is not huge difference, but when we can be faster, we should be faster. ;)</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'><span class="nx">args</span><span class="p">.</span><span class="nx">unshift</span><span class="p">(</span> <span class="k">this</span><span class="p">.</span><span class="nx">array</span> <span class="p">);</span>
</span></code></pre></td></tr></table></div></figure>


<p>This line puts the actual array ( &ndash;> <em>this.array</em> ) to this start of this new generated &ldquo;arguments array&rdquo; to make it fit into the way LoDash/Underscore functions expect the handed in arguments to be.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'><span class="k">return</span> <span class="nx">_</span><span class="p">[</span> <span class="nx">method</span> <span class="p">].</span><span class="nx">apply</span><span class="p">(</span> <span class="nx">_</span><span class="p">,</span> <span class="nx">args</span> <span class="p">);</span>
</span></code></pre></td></tr></table></div></figure>


<p>And this is the final result. It is an actual call to the origin LoDash/Underscore function in the context of Underscore/LoDash. The context needs to be set to LoDash/Underscore itself, because we don&rsquo;t know, if the library calls other methods contained in itself. To sum up this line for example of <em>indexOf</em> is similar to:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'><span class="nx">example</span><span class="p">.</span><span class="nx">indexOf</span><span class="p">(</span> <span class="mi">2</span> <span class="p">);</span>
</span><span class='line'><span class="c1">// calls under the hood</span>
</span><span class='line'><span class="nx">_</span><span class="p">.</span><span class="nx">indexOf</span><span class="p">(</span> <span class="nx">example</span><span class="p">.</span><span class="nx">array</span><span class="p">,</span> <span class="mi">2</span> <span class="p">);</span>
</span></code></pre></td></tr></table></div></figure>


<p>No magic. but a nice way to make the usability of your objects more convenient.</p>

<p>But there is also a bad part about that. I checked the performance of the origin utility methods and the integrated ones and there is really a huge difference ( check jsperf <a href="http://jsperf.com/integrated-utility-function-vs-utility-function-2">here</a> ). On my machine the new integrated functions are around 75% (!) percent slower ( tested in Firefox, Chrome and Opera ). 75% is really way too much for convenience.</p>

<p><img src="http://4waisenkinder.github.io/images/blog/stefanjudis/utilityFunctions.png" width="970" height="387" title="result of jsperf" alt="result of jsperf"></p>

<p>The reason for that difference is probably the needed context binding for the integrated utility functions to provide the LoDash/Underscore context inside of the function itself. But that is only guessing. ;)</p>

<p>No matter what, for me is clear that I will use the original utility functions instead of the integrated ones.</p>

<p>Thx for reading. Any ideas on that are really welcome. :)</p>
<div class='octopress-authorbox'>
	<div class="author-pic">
		<img src="http://www.gravatar.com/avatar/22725c2d3eb331146549bf0d5d3c050c" alt="Stefan Judis" />
	</div>
	
	<div class="author-about">
		<h3>Stefan Judis</h3>
		<p>Frontend lover</p>
		<ul class="author-links">
			
			<li>
			<a href="http://twitter.com/stefanjudis">@stefanjudis</a>
			</li>
			
			
		</ul>
	</div>
</div>]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[How to make screenshots with phantomjs]]></title>
    <link href="http://4waisenkinder.github.io/blog/2013/08/09/how-to-make-screenshots-with-phantomjs/"/>
    <updated>2013-08-09T10:40:00+02:00</updated>
    <id>http://4waisenkinder.github.io/blog/2013/08/09/how-to-make-screenshots-with-phantomjs</id>
    <content type="html"><![CDATA[<p>Recently I started developing my first grunt plugin called <a href="https://npmjs.org/package/grunt-photobox">grunt-photobox</a>. The goal was to make the layout QA-process before shipping a new feature much easier. It should take screenshots of every relevant site and compare it to the last one &ndash; <a href="http://4waisenkinder.de/blog/2013/07/26/grunt-photobox-secure-yourself-against-broken-layout/">post about how to use it here</a>.</p>

<p>The base for that should be <a href="http://phantomjs.org/">phantomjs</a>. It&rsquo;s a headless webkit browser, that gives you all functionality a &ldquo;real&rdquo; browser has plus a few features for making screenshots or reading files from disk for example. You can run it via command line and pass in a script to execute inside the scope of phantomjs.</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ phantomjs script.js</span></code></pre></td></tr></table></div></figure>




<!-- more -->


<p>Inside of this script you have got a few more global variables available than usual &ndash; check them out <a href="https://github.com/ariya/phantomjs/wiki/_pages">here</a>. For making screenshots we will use the webpage- and system-api ( will be explained later on ). Phantomjs provides a <code>require</code> function to get the functionality we need. When you do a lot of nodejs you are probably familiar with that principle already.</p>

<p><a href="https://github.com/stefanjudis/phantomjs-screenshot">The script</a> for making screenshots has 50 lines and is not really complicated, so lets have a look:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'><span class="kd">var</span> <span class="nx">system</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span> <span class="s1">&#39;system&#39;</span> <span class="p">),</span>
</span><span class='line'>    <span class="nx">webpage</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span> <span class="s1">&#39;webpage&#39;</span> <span class="p">),</span>
</span><span class='line'>    <span class="nx">page</span> <span class="o">=</span> <span class="nx">webpage</span><span class="p">.</span><span class="nx">create</span><span class="p">(),</span>
</span><span class='line'>    <span class="nx">url</span> <span class="o">=</span> <span class="nx">system</span><span class="p">.</span><span class="nx">args</span><span class="p">[</span> <span class="mi">1</span> <span class="p">]</span> <span class="o">||</span> <span class="s1">&#39;http://4waisenkinder.de&#39;</span><span class="p">,</span> <span class="c1">// set a default value if argument was not set</span>
</span><span class='line'>    <span class="nx">path</span> <span class="o">=</span> <span class="nx">system</span><span class="p">.</span><span class="nx">args</span><span class="p">[</span> <span class="mi">2</span> <span class="p">]</span> <span class="o">||</span> <span class="s1">&#39;./&#39;</span><span class="p">,</span> <span class="c1">// set a default value if argument was not set</span>
</span><span class='line'>    <span class="nx">width</span> <span class="o">=</span> <span class="o">+</span><span class="nx">system</span><span class="p">.</span><span class="nx">args</span><span class="p">[</span> <span class="mi">3</span> <span class="p">]</span> <span class="o">||</span> <span class="mi">1000</span><span class="p">,</span> <span class="c1">// set a default value if argument was not set</span>
</span><span class='line'>    <span class="nx">height</span> <span class="o">=</span> <span class="o">+</span><span class="nx">system</span><span class="p">.</span><span class="nx">args</span><span class="p">[</span> <span class="mi">4</span> <span class="p">]</span> <span class="o">||</span> <span class="mi">1200</span><span class="p">;</span> <span class="c1">// set a default value if argument was not set</span>
</span></code></pre></td></tr></table></div></figure>


<p>The variable declaration at top of the page ( yes, I know, Crockford-Style ;) ) shows us all we need. <code>system</code> will take the responsibiliy of getting arguments with which we fired up phantomjs. This way the script is more generic and we will be able to pass in arguments like the url we want to make a picture of, the path of the picture, and width and height of the headless browser window ( this becomes handy when you want to check your responsive web design ). <code>webpage</code> includes the actual browser functionality for opening a page and rendering it later on.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'><span class="nx">page</span><span class="p">.</span><span class="nx">onError</span> <span class="o">=</span> <span class="kd">function</span> <span class="p">(</span> <span class="nx">msg</span> <span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="nx">system</span><span class="p">.</span><span class="nx">stderr</span><span class="p">.</span><span class="nx">writeLine</span><span class="p">(</span> <span class="s1">&#39;ERROR:&#39;</span> <span class="o">+</span> <span class="nx">msg</span> <span class="p">);</span>
</span><span class='line'><span class="p">};</span>
</span><span class='line'>
</span><span class='line'><span class="nx">page</span><span class="p">.</span><span class="nx">onConsoleMessage</span> <span class="o">=</span> <span class="kd">function</span><span class="p">(</span> <span class="nx">msg</span><span class="p">,</span> <span class="nx">lineNum</span><span class="p">,</span> <span class="nx">sourceId</span> <span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="nx">system</span><span class="p">.</span><span class="nx">stdout</span><span class="p">.</span><span class="nx">writeLine</span><span class="p">(</span> <span class="s1">&#39;CONSOLE: &#39;</span> <span class="o">+</span> <span class="nx">msg</span><span class="p">,</span> <span class="nx">lineNum</span><span class="p">,</span> <span class="nx">sourceId</span> <span class="p">);</span>
</span><span class='line'><span class="p">};</span>
</span></code></pre></td></tr></table></div></figure>


<p>These seven lines are quite important for debugging purposes, without it you can rarely know what is going on. Phantomjs needs to know how to handle any output inside of its JavaScript console. So let&rsquo;s define to listen to messages and errors to write it to <code>stderr</code>and <code>stdout</code> later on.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'><span class="nx">page</span><span class="p">.</span><span class="nx">viewportSize</span> <span class="o">=</span> <span class="p">{</span>
</span><span class='line'>    <span class="nx">height</span> <span class="o">:</span> <span class="nx">height</span><span class="p">,</span>
</span><span class='line'>    <span class="nx">width</span>  <span class="o">:</span> <span class="nx">width</span>
</span><span class='line'><span class="p">};</span>
</span><span class='line'>
</span><span class='line'><span class="nx">page</span><span class="p">.</span><span class="nx">clipRect</span> <span class="o">=</span> <span class="p">{</span>
</span><span class='line'>  <span class="nx">height</span> <span class="o">:</span> <span class="nx">height</span><span class="p">,</span>
</span><span class='line'>  <span class="nx">width</span>  <span class="o">:</span> <span class="nx">width</span>
</span><span class='line'><span class="p">};</span>
</span></code></pre></td></tr></table></div></figure>


<p>To set up the size of the window we need to set the view port size of the <code>page</code> object, which was initialized at the beginning. In this case <code>viewportSize</code> means the actual size of the simulated window. But to make proper screenshots we have to define the property <code>clipRect</code> as well to make the image fitting to the actual window view size. According to phantomjs documentation <code>clipRect</code> defines the size of the area that should be rasterized when calling the <code>render</code> function.</p>

<p>So let&rsquo;s do the last step:</p>

<p>Photosession-Time!!! :)</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'><span class="nx">page</span><span class="p">.</span><span class="nx">open</span><span class="p">(</span> <span class="nx">url</span><span class="p">,</span> <span class="kd">function</span><span class="p">(</span> <span class="nx">status</span> <span class="p">)</span> <span class="p">{</span>
</span><span class='line'>  <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span> <span class="s1">&#39;Opened url with status: &#39;</span> <span class="o">+</span> <span class="nx">status</span> <span class="p">);</span>
</span><span class='line'>
</span><span class='line'>  <span class="nb">window</span><span class="p">.</span><span class="nx">setTimeout</span><span class="p">(</span> <span class="kd">function</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>    <span class="kd">var</span> <span class="nx">imgPath</span> <span class="o">=</span> <span class="nx">path</span> <span class="o">+</span>
</span><span class='line'>                    <span class="s1">&#39;img/&#39;</span> <span class="o">+</span>
</span><span class='line'>                    <span class="nx">url</span><span class="p">.</span><span class="nx">replace</span><span class="p">(</span> <span class="sr">/(http:\/\/|https:\/\/)/</span><span class="p">,</span> <span class="s1">&#39;&#39;</span><span class="p">).</span><span class="nx">replace</span><span class="p">(</span> <span class="sr">/\//g</span><span class="p">,</span> <span class="s1">&#39;-&#39;</span><span class="p">)</span> <span class="o">+</span>
</span><span class='line'>                    <span class="s1">&#39;-&#39;</span> <span class="o">+</span> <span class="nx">width</span> <span class="o">+</span> <span class="s1">&#39;x&#39;</span> <span class="o">+</span> <span class="nx">height</span> <span class="o">+</span>
</span><span class='line'>                    <span class="s1">&#39;.png&#39;</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>    <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span> <span class="s1">&#39;Rendering &#39;</span> <span class="o">+</span> <span class="nx">imgPath</span> <span class="p">);</span>
</span><span class='line'>    <span class="nx">page</span><span class="p">.</span><span class="nx">render</span><span class="p">(</span> <span class="nx">imgPath</span> <span class="p">);</span>
</span><span class='line'>
</span><span class='line'>    <span class="nx">phantom</span><span class="p">.</span><span class="nx">exit</span><span class="p">();</span>
</span><span class='line'>  <span class="p">},</span> <span class="mi">500</span> <span class="p">);</span>
</span><span class='line'><span class="p">}</span> <span class="p">);</span>
</span></code></pre></td></tr></table></div></figure>


<p>And that is it. :)</p>

<p>The <code>page</code> object opens the defined url and provides a callback, when it is done. The image path and name to save the image will be built up and the <code>page.render()</code> command then renders the image.</p>

<p>The console output works here because we defined the listeners to write it to the system on logs and errors.</p>

<p>The timeout is defined to provide some time to fetch images and execute included scripts. Many people are doing it this way. It is not 100% clean, but it does its job. If you don&rsquo;t like it, there is also the possibility to define a callback at <code>page.onLoadFinished</code>. But it is fine for me now. :)</p>

<p>And the last thing is to stop phantom with the <code>exit</code> command and return with a given status code. Per default it returns the status code 0, which means that everything was fine.</p>

<p>That&rsquo;s all the &ldquo;magic&rdquo; you need to take pictures of any site. The command to start the script is:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'><span class="nx">$</span> <span class="nx">phantomjs</span> <span class="nx">script</span><span class="p">.</span><span class="nx">js</span> <span class="nx">http</span><span class="o">:</span><span class="c1">//google.com ./ 1000 1200</span>
</span><span class='line'><span class="nx">Opened</span> <span class="nx">url</span> <span class="kd">with</span> <span class="nx">status</span><span class="o">:</span> <span class="nx">success</span>
</span><span class='line'><span class="nx">Rendering</span> <span class="p">.</span><span class="o">/</span><span class="nx">img</span><span class="o">/</span><span class="nx">google</span><span class="p">.</span><span class="nx">com</span><span class="o">-</span><span class="mi">1000</span><span class="nx">x1200</span><span class="p">.</span><span class="nx">png</span>
</span></code></pre></td></tr></table></div></figure>


<p>The script probably needs some improvements for error handling ( errors on page opening or missing system arguments ), but it has just the purpose to get started. :)</p>

<p>If you are interested in more stuff, how I build it into a grunt plugin, let me know. I am really excited about this whole phantomjs stuff and would like to share it.</p>

<p>Thanks for reading and if you have any comments or thoughts leave a comment or ping me on <a href="https://twitter.com/stefanjudis">Twitter</a>.</p>
<div class='octopress-authorbox'>
	<div class="author-pic">
		<img src="http://www.gravatar.com/avatar/22725c2d3eb331146549bf0d5d3c050c" alt="Stefan Judis" />
	</div>
	
	<div class="author-about">
		<h3>Stefan Judis</h3>
		<p>Frontend lover</p>
		<ul class="author-links">
			
			<li>
			<a href="http://twitter.com/stefanjudis">@stefanjudis</a>
			</li>
			
			
		</ul>
	</div>
</div>]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[grunt-photobox - secure yourself against broken layout]]></title>
    <link href="http://4waisenkinder.github.io/blog/2013/07/26/grunt-photobox-secure-yourself-against-broken-layout/"/>
    <updated>2013-07-26T00:32:00+02:00</updated>
    <id>http://4waisenkinder.github.io/blog/2013/07/26/grunt-photobox-secure-yourself-against-broken-layout</id>
    <content type="html"><![CDATA[<p>Recently at work we ran into the issue, that we had a broken layout in production. Everybody knows that and sure everybody produced that already. Most of the time it is not a big deal, but it is an uncomfortable situation to get the message like &ldquo;Hey, the product detail page is broken.&rdquo;. We implemented <a href="http://gruntjs.com">grunt</a> a few weeks before and got the idea to make the check for broken layout a bit easier for us and the QA-Team than clicking through the whole site in different screen sizes.</p>

<!-- more -->


<p>And this is the result of it:</p>

<p><strong>grunt-photobox</strong></p>

<p><img class="left" src="http://4waisenkinder.github.io/images/blog/stefanjudis/photoBox.png" width="420" height="300" title="grunt-photobox logo" alt="grunt-photobox logo"></p>

<p>Woooohooooo!!! Let me explain how it works:</p>

<ul>
<li>set up url&rsquo;s, that are important for you</li>
<li>set up screensizes, that are important for you &ndash; think of responsive web design</li>
<li>set up a path to render the screenshots and an index.html</li>
</ul>


<p>After that <a href="http://phantomjs.org/">phantomjs</a> will visit the url&rsquo;s with given size and simply takes a picture of it. Nothing magically about it. ;)</p>

<p>So let&rsquo;s set it up:</p>

<p>I downloaded a nice &ldquo;mobile-first&rdquo; site from <a href="http://html5boilerplate.com">html5boilerplate</a> and implemented grunt. When you&rsquo;re ready to go, you have to install <code>grunt-photobox</code>.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>npm install --save-dev grunt-photobox
</span></code></pre></td></tr></table></div></figure>


<p>Your <code>package.json</code> should include inside of the <code>devDependencies</code> photobox afterwards:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'><span class="p">{</span>
</span><span class='line'>  <span class="s2">&quot;name&quot;</span><span class="o">:</span> <span class="s2">&quot;grunt-photobox-tutorial&quot;</span><span class="p">,</span>
</span><span class='line'>  <span class="s2">&quot;version&quot;</span><span class="o">:</span> <span class="s2">&quot;0.1.0&quot;</span><span class="p">,</span>
</span><span class='line'>  <span class="s2">&quot;dependencies&quot;</span><span class="o">:</span> <span class="p">{},</span>
</span><span class='line'>  <span class="s2">&quot;devDependencies&quot;</span><span class="o">:</span> <span class="p">{</span>
</span><span class='line'>    <span class="s2">&quot;grunt&quot;</span><span class="o">:</span> <span class="s2">&quot;~0.4.1&quot;</span><span class="p">,</span>
</span><span class='line'>    <span class="s2">&quot;grunt-photobox&quot;</span><span class="o">:</span> <span class="s2">&quot;~0.1.2&quot;</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>After that let&rsquo;s start to configure grunt-photobox. We have to set the url&rsquo;s &ndash; in this case it is just <code>http://localhost/grunt-photobox-tutorial/</code>, because it is a dummy site. But at least we can set different screensizes to check if something broke and if the mobile site really works in a nice responsive way.</p>

<p>Your <code>Gruntfile.js</code> should look like that:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'><span class="nx">module</span><span class="p">.</span><span class="nx">exports</span> <span class="o">=</span> <span class="kd">function</span><span class="p">(</span><span class="nx">grunt</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>  <span class="nx">grunt</span><span class="p">.</span><span class="nx">initConfig</span><span class="p">(</span> <span class="p">{</span>
</span><span class='line'>    <span class="nx">pkg</span><span class="o">:</span> <span class="nx">grunt</span><span class="p">.</span><span class="nx">file</span><span class="p">.</span><span class="nx">readJSON</span><span class="p">(</span><span class="s1">&#39;package.json&#39;</span><span class="p">),</span>
</span><span class='line'>
</span><span class='line'>    <span class="nx">photobox</span><span class="o">:</span> <span class="p">{</span>
</span><span class='line'>      <span class="nx">options</span><span class="o">:</span> <span class="p">{</span>
</span><span class='line'>          <span class="c1">// set needed url&#39;s</span>
</span><span class='line'>        <span class="nx">urls</span><span class="o">:</span> <span class="p">[</span> <span class="s1">&#39;http://localhost/grunt-photobox-tutorial/&#39;</span> <span class="p">],</span>
</span><span class='line'>        <span class="c1">// set needed screensizes</span>
</span><span class='line'>        <span class="nx">screenSizes</span><span class="o">:</span> <span class="p">[</span> <span class="s1">&#39;400x800&#39;</span><span class="p">,</span> <span class="s1">&#39;600x800&#39;</span><span class="p">,</span> <span class="s1">&#39;1200x800&#39;</span> <span class="p">]</span>
</span><span class='line'>      <span class="p">}</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>  <span class="p">}</span> <span class="p">);</span>
</span><span class='line'>
</span><span class='line'>  <span class="c1">// Load photobox plugin</span>
</span><span class='line'>  <span class="nx">grunt</span><span class="p">.</span><span class="nx">loadNpmTasks</span><span class="p">(</span> <span class="s1">&#39;grunt-photobox&#39;</span> <span class="p">);</span>
</span><span class='line'>
</span><span class='line'>  <span class="c1">// Default task(s).</span>
</span><span class='line'>  <span class="nx">grunt</span><span class="p">.</span><span class="nx">registerTask</span><span class="p">(</span> <span class="s1">&#39;default&#39;</span><span class="p">,</span> <span class="p">[</span> <span class="s1">&#39;photobox&#39;</span> <span class="p">]</span> <span class="p">);</span>
</span><span class='line'><span class="p">};</span>
</span></code></pre></td></tr></table></div></figure>


<p><strong>And that&rsquo;s it.</strong></p>

<p>Now you can run <code>$ grunt</code>( we set photobox to default &ndash; if it&rsquo;s not default, run <code>$ grunt photobox</code>)</p>

<p><img class="left" src="http://4waisenkinder.github.io/images/blog/stefanjudis/photoBoxOutput.png" width="596" height="180" title="output of photobox grunt command" alt="output of photobox grunt command"></p>

<p>It will tell you, that a new <code>index.html</code> was created. Per default it is <code>photobox/</code>, but you can change that inside of the options, if you want to. When you run photobox for the first time, there is nothing to compare &ndash;  keep that in mind, when calling the photobox index for the first time. ;)</p>

<p>So let&rsquo;s break something and check if we can detect a broken layout with it. I commented out some css lines and ran photobox again. And here is the result:</p>

<p><img class="left" src="http://4waisenkinder.github.io/images/blog/stefanjudis/photoBoxBroken.png" width="1120" height="750" title="broken layout" alt="broken layout"></p>

<p><strong>YEEEEESSSSS</strong>. It is obvious, that something went wrong here with the size of 1200x800 and that we were able to notice that without clicking around and checking by ourselves. ;)</p>

<p>Inside of the generated index file you&rsquo;ve got the possibility, to check the old and new version in seperate images or to overlay both pictures. What you see here, is the &lsquo;overlay&rsquo; mode.</p>

<p>If you want to check out the output <code>index.html</code> of this example and play around with it &ndash; <a href="http://stefanjudis.github.io/grunt-photobox-tutorial/photobox">here it is</a>.</p>

<p>We will implement that at work soon. If you have any feedback or feature requests, please let me know and write me an <a href="mailto:stefanjudis@gmail.com">email</a> or ping on <a href="https://twitter.com/stefanjudis">Twitter</a>. It is still in early stage, though. I would really like to have some feedback on that, because I think, it can speed up the qa-process heavily.</p>

<p>THX.</p>

<p><a href="https://npmjs.org/package/grunt-photobox">grunt-photobox at NPM</a></p>

<p><a href="https://github.com/stefanjudis/grunt-photobox">grunt-photobox at Github</a></p>
<div class='octopress-authorbox'>
	<div class="author-pic">
		<img src="http://www.gravatar.com/avatar/22725c2d3eb331146549bf0d5d3c050c" alt="Stefan Judis" />
	</div>
	
	<div class="author-about">
		<h3>Stefan Judis</h3>
		<p>Frontend lover</p>
		<ul class="author-links">
			
			<li>
			<a href="http://twitter.com/stefanjudis">@stefanjudis</a>
			</li>
			
			
		</ul>
	</div>
</div>]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA["shrinkwrap" and how to deal with a dependency fu** up]]></title>
    <link href="http://4waisenkinder.github.io/blog/2013/07/10/why-you-should-use-npm-shrinkwrap-and-how-to-deal-with-a-dependency-fu-star-star-up/"/>
    <updated>2013-07-10T19:13:00+02:00</updated>
    <id>http://4waisenkinder.github.io/blog/2013/07/10/why-you-should-use-npm-shrinkwrap-and-how-to-deal-with-a-dependency-fu-star-star-up</id>
    <content type="html"><![CDATA[<p>A few people may have noticed, that <code>npm install grunt</code> was failing today. According to the pull requests made, it was failing for 10 ( ! ) hours. When you think right know, that this is not a big deal, you probably do not use it in production. Because then it becomes a big problem very quickly.</p>

<!-- more -->


<p>The reason for failing was a first renamed and later removed dependency of grunt itself. Grunt defines its dependencies ( defined inside of the <code>package.json</code>, if you are not familiar with npm ) with  a <code>~</code> in front of each version number. That is quite common and there is nothing special about it. The <a href="https://npmjs.org/doc/json.html#Tilde-Version-Ranges">tilde</a> defines, that every version greater than the specifed one and less than the next major release is fine to install.</p>

<p>What happened exactly, was that npm was not able to find a version of a particular dependency that fits this conditions ( because of renaming and removing ). And that is it. Nothing special about it, but an important insight.</p>

<p><strong>Whenever we publish something on npm, we have to let it there &ndash; no renaming or removing. There can always be people using it and it can screw up their build!</strong></p>

<p>However, we had to figure out a workaround today quickly, and that is what we did until it was fixed.</p>

<p>We forked grunt at Github. Fixed the dependency problem and set the &ldquo;new&rdquo; grunt as our project dependency. Npm allows you to set dependencies that are not published at npm easily. That can be quiet handy from time to time. ;)</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>"devDependencies": {
</span><span class='line'>  "grunt": "git://github.com/you/your-grunt-fork.git"
</span><span class='line'>}</span></code></pre></td></tr></table></div></figure>


<p>Later on there were a few discussions about npm dependency handling on Twitter and <a href="https://twitter.com/asciidisco">@asciidisco</a> pointed me into the direction of <code>npm shrinkwrap</code>.</p>

<p>This command locks all your installed dependencies and writes a new file called <strong>npm-shrinkwrap.json</strong>.</p>

<p>This file is similar to php&rsquo;s <strong>composer.lock</strong> or ruby&rsquo;s <strong>Gemfile.lock</strong>. When you call <code>npm install</code> later on it installs the locked versions written in this file. The version numbers are locked recursively, so that you are safe on production level without any bad surprises.</p>

<p>There can always be a version jump in a dependency, which is quite welcome, but I don&rsquo;t want check out if it works on production side first&hellip;</p>

<p>So the solution is:</p>

<p><strong>Stay with your package.json and define dependencies with &lsquo;>=&rsquo; or &lsquo;~&rsquo; to receive the newest stuff locally, but lock all dependencies for production.</strong></p>

<p>As always opinions and solutions are very welcome about this topic. ;)</p>
<div class='octopress-authorbox'>
	<div class="author-pic">
		<img src="http://www.gravatar.com/avatar/22725c2d3eb331146549bf0d5d3c050c" alt="Stefan Judis" />
	</div>
	
	<div class="author-about">
		<h3>Stefan Judis</h3>
		<p>Frontend lover</p>
		<ul class="author-links">
			
			<li>
			<a href="http://twitter.com/stefanjudis">@stefanjudis</a>
			</li>
			
			
		</ul>
	</div>
</div>]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[See how your project performs at Travis CI]]></title>
    <link href="http://4waisenkinder.github.io/blog/2013/07/07/see-how-your-project-performs-at-travis-ci/"/>
    <updated>2013-07-07T14:50:00+02:00</updated>
    <id>http://4waisenkinder.github.io/blog/2013/07/07/see-how-your-project-performs-at-travis-ci</id>
    <content type="html"><![CDATA[<p>Many people run their test suite at Travis CI these days. At Travis you got the possibility to run your test suite against different programming languages and different versions of these ( e.g. node 0.8 / 0.9 / … ). Figuring out if there will be any problems or exceptions before switching to a new language version are easily done this way ( always assuming you are following the principles of test driven development ). <strong>Test your stuff at Travis first, then switch your server to the new version of language XY</strong>.</p>

<!-- more -->


<p>Tests that run in different languages are called &lsquo;jobs&rsquo; in travis context. You can define them in your .travis.yml.</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>language: node_js
</span><span class='line'>  node_js:
</span><span class='line'>    - "0.8"
</span><span class='line'>    - "0.9"
</span><span class='line'>    - "0.10"</span></code></pre></td></tr></table></div></figure>


<p>Later on you can see this configuration inside of the so called build-matrix at <a href="http://travis-ci.org">Travis</a>.</p>

<p><img class="center" src="http://4waisenkinder.github.io/images/blog/stefanjudis/buildMatrix.png" width="1225" height="184" title="build matrix cushion-cli" alt="build matrix for my project cushion-cli"></p>

<p>Via Travalizit ( <a href="http://4waisenkinder.de/blog/2013/06/21/help-me-analyze-travis-build-data/">further explanation and introduction</a> ) you got the possibility to analyse your Travis build data. It is still in early stage, but I think you can already get some information, you did not know before. To have always the latest Travis information at Travalizit you only have to define a wekhook that sends the build data to Travalizit each time you finished a build ( checkout out explanation and introduction ).</p>

<p>Yesterday night I implemented a new chart to compare different builds with including jobs in term of state and duration. With the help of this chart you can easily check if a new language version will increase performance or not.</p>

<p>To check your project just go to <a href="http://travalizit.org">Travalizit</a>, add a new chart and choose type &ldquo;Travis job details&rdquo;.</p>

<p><img class="center" src="http://4waisenkinder.github.io/images/blog/stefanjudis/jobDetails.png" width="603" height="377" title="add job details chart action" alt="push the button ;)"></p>

<p>After that you will probably get a message, that your build data is not included in the Travalizit database ( there is the small chance that it is, because I tested a lot ). Right now you got the possibility to fetch the latest builds from Travis.</p>

<p><img class="center" src="http://4waisenkinder.github.io/images/blog/stefanjudis/fetchData.png" width="867" height="655" title="fetch data action" alt="fetch data dialog if no build data is available"></p>

<p>Press the &lsquo;fetch&rsquo; &ndash; button and you are done. This works only <strong>once</strong>, because the architecture is actual set up to receive recent build data via webhook. That means, if you want to come back and to see the latest builds, you have implement the hook. ;)</p>

<p>And that is the result:</p>

<p><img class="center" src="http://4waisenkinder.github.io/images/blog/stefanjudis/jobDetailsChart.png" width="882" height="670" title="job details for cushion-cli" alt="Travis job details chart for cushion-cli"></p>

<p>Right now you can check the duration and state ( passed / errored / failed ) of the different jobs. If you want to see more, let me know.</p>

<p>I would love to hear wishes, improvements and feedback. So, if it is not working for you and your project or you have something to say about that ping me on <a href="https://twitter.com/stefanjudis">Twitter</a>, write me an <a href="mailto:stefanjudis@gmail.com">email</a> or leave a comment.</p>

<p>THX.</p>

<p>PS. I started developing a <a href="https://npmjs.org/package/travalizit">Nodes.js Travis-Api</a> for this project. If someone is interested in that, give a sign. That keeps motivation high. ;)</p>
<div class='octopress-authorbox'>
	<div class="author-pic">
		<img src="http://www.gravatar.com/avatar/22725c2d3eb331146549bf0d5d3c050c" alt="Stefan Judis" />
	</div>
	
	<div class="author-about">
		<h3>Stefan Judis</h3>
		<p>Frontend lover</p>
		<ul class="author-links">
			
			<li>
			<a href="http://twitter.com/stefanjudis">@stefanjudis</a>
			</li>
			
			
		</ul>
	</div>
</div>]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Show npm statistics at terminal start]]></title>
    <link href="http://4waisenkinder.github.io/blog/2013/06/24/show-npm-statistics-terminal-start/"/>
    <updated>2013-06-24T22:21:00+02:00</updated>
    <id>http://4waisenkinder.github.io/blog/2013/06/24/show-npm-statistics-terminal-start</id>
    <content type="html"><![CDATA[<p>Two month ago I released my <a href="https://npmjs.org/package/cushion-cli">first npm module</a>. I got really excited (and I am still) about releasing something and showing it to the world. Since then the statistics written on top of the module page at NPM are checked by me on a daily basis. Unfortunately these statistics do not seem to be really precise. They are jumping from day to day and should not be taken to serious in my mind (No offense meant. I really like NPM and I think it is a great service).</p>

<p>That is the reason why a friend of mine wrote a <a href="https://raw.github.com/Zoddy/geektool-desk/master/os_downloads.js">tiny script</a> to read the statistics directly from where the data is stored &ndash; a <a href="http://isaacs.iriscouch.com/">CouchDB</a> available for everyone. The script will be part of a <a href="https://github.com/Zoddy/geektool-desk">library for geeky stuff</a> and tools later on, but that is another story.</p>

<p>Today I had the idea about showing this kind of information whenever I open a new terminal window to save some time and &ldquo;pimp my terminal&rdquo;.</p>

<!-- more -->


<p>I googled a bit and had to notice that it is not to easy to execute scripts on MacOS in the <code>/etc/motd</code> (message of the day). It seems to be much easier in the linux world &ndash; correct me when I&rsquo;m wrong please. ;)</p>

<p>So I decided to execute the whole stuff inside of the shell configuration files placed in the given user root (information about NPM modules are probably user related, so after a bit of thinking I like that solution even more).</p>

<p>To start you have to clone the Github project with the mentioned script (in my case <code>~/Sites/</code>).</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>git clone https://github.com/Zoddy/geektool-desk.git</span></code></pre></td></tr></table></div></figure>


<p>After that we start editing the .bash_profile, .bashrc, .zshrc or whatever shell file your system and shell gives you.</p>

<p>I prefer using ZSH. Adding the following lines does all the magic for me &ndash; look at this <a href="https://github.com/Zoddy/geektool-desk">readme</a> for further explanation how to use the script. This example is made for my &lsquo;cushion-cli&rsquo; project. I think you are not interested in this data, so please feel free to change it to your project names.</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>### show cushion-cli downloads
</span><span class='line'>
</span><span class='line'>echo "\nCUSHION-CLI DOWNLOADS\n"
</span><span class='line'>
</span><span class='line'>echo "TODAY / YESTERDAY:"
</span><span class='line'>today=$(node /Users/stefan/Sites/geektool-desk/os_downloads.js cushion-cli today)
</span><span class='line'>yesterday=$(node /Users/stefan/Sites/geektool-desk/os_downloads.js cushion-cli yesterday)
</span><span class='line'>printf "%s / %s downloads\n\n" "$today" "$yesterday"
</span><span class='line'>
</span><span class='line'>echo 'CURRENT WEEK / LAST WEEK:'
</span><span class='line'>week=$(node /Users/stefan/Sites/geektool-desk/os_downloads.js cushion-cli current-week)
</span><span class='line'>last_week=$(node /Users/stefan/Sites/geektool-desk/os_downloads.js cushion-cli last-week)
</span><span class='line'>printf "%s / %s downloads\n\n" "$week" "$last_week"
</span><span class='line'>
</span><span class='line'>echo 'CURRENT MONTH / LAST MONTH:'
</span><span class='line'>month=$(node /Users/stefan/Sites/geektool-desk/os_downloads.js cushion-cli current-month)
</span><span class='line'>last_month=$(node /Users/stefan/Sites/geektool-desk/os_downloads.js cushion-cli last-month)
</span><span class='line'>printf "%s / %s downloads\n\n" "$month" "$last_month"</span></code></pre></td></tr></table></div></figure>


<p>I am not a shell script wizard. If something is not correct with these lines let me know.</p>

<p>And that is the result. Hope you enjoy it.</p>

<p><img class="right" src="http://4waisenkinder.github.io/images/blog/stefanjudis/npmPrompt.png" width="254" height="233" title="prompt with npm statistic" alt="prompt with npm statistic for cushion-cli"></p>
<div class='octopress-authorbox'>
	<div class="author-pic">
		<img src="http://www.gravatar.com/avatar/22725c2d3eb331146549bf0d5d3c050c" alt="Stefan Judis" />
	</div>
	
	<div class="author-about">
		<h3>Stefan Judis</h3>
		<p>Frontend lover</p>
		<ul class="author-links">
			
			<li>
			<a href="http://twitter.com/stefanjudis">@stefanjudis</a>
			</li>
			
			
		</ul>
	</div>
</div>]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Help me analyze travis build data]]></title>
    <link href="http://4waisenkinder.github.io/blog/2013/06/21/help-me-analyze-travis-build-data/"/>
    <updated>2013-06-21T14:30:00+02:00</updated>
    <id>http://4waisenkinder.github.io/blog/2013/06/21/help-me-analyze-travis-build-data</id>
    <content type="html"><![CDATA[<p>Hey, I study Media and Computer Science in Berlin and I need your help.
The last goal of my studies is to write my bachelor thesis and I want to show you what it is about.</p>

<p>I am in colaboration with <a href="http://travis-ci.org">Travis CI</a> (you may have heard about it) and my goal is to analyse the data Travis produces everyday. Data about every build that is triggered by any open source project over the world doing continuous integration.</p>

<!-- more -->


<p>Travis provides the possibility to implement webhooks. Webhooks are part of the <a href="http://about.travis-ci.org/docs/user/notifications/">travis notifications</a> and are simple HTTP post requests to a given end point you define in your .travis.yml file (the general travis configuration file) triggered whenever a build at travis-ci end (no matter if successful or not). These requests include general data of the last build.</p>

<p>I already built up a <a href="http://travalizit.org">web app</a> to play around with the data. Right now there are three charts included. One is showing the success/fail ratio of all builds in a particular time interval. Another one shows the distribution of different projects included in a given time.</p>

<p>And the last one at the moment is one chart including data fetched from github.</p>

<p><img class="center" src="http://4waisenkinder.github.io/images/blog/stefanjudis/repochart.png" width="788" height="532" title="repo chart travalizit" alt="repo chart for my repo cushion-cli"></p>

<p>I&rsquo;m really excited about this one. What you see in there are the last 20 builds (left side) of <a href="https://github.com/stefanjudis/cushion-cli">one of my private projects</a>. The nice thing about that is, that all the commits (right side) related to a given build are fetched from the github api. That means you can quickly figure out, which files are often causing a failed build (marked black and not red &ndash; like build with number 180).</p>

<p>With the information provided by github I could build up a tool to answer a lot of questions.</p>

<ul>
<li>which files are touched more often and cause broken builds?</li>
<li>how many commits are needed to fix a broken build?</li>
<li>how long does it generally take to fix a broken build?</li>
<li>how many commits included in one build cause a broken build?</li>
<li>how many different contributors cause a broken build?</li>
</ul>


<p>I don&rsquo;t know If it is possible and/or valid to answer these questions with given data, but I would like to try to answer a few of them. And the point is:</p>

<h4>If only one person really hears something new about his/her project it would be already a win.</h4>

<p><strong>And hear is where you come into the game.</strong> When you use Travis CI please share your build data with me by implementing the webhook pointing to my webapp in your .travis.yml (just put it at the bottom of the file).</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>notifications:
</span><span class='line'>  webhooks: http://travalizit.org/builds</span></code></pre></td></tr></table></div></figure>


<p>Your data will be written into my database and will then be included into the charts.</p>

<p>And after that please share your ideas about what you would like to see and what would be useful for you and your project with me. Drop me a line on <a href="https://twitter.com/stefanjudis">Twitter</a> or send me an <a href="mailto:stefanjudis@gmail.com">email</a>. That would be just great.</p>

<p>The app is at a quite early stage right now, so if something is not working as expected or you see improvements get in touch as well.</p>

<h4>Let us build something useful. ;)</h4>
<div class='octopress-authorbox'>
	<div class="author-pic">
		<img src="http://www.gravatar.com/avatar/22725c2d3eb331146549bf0d5d3c050c" alt="Stefan Judis" />
	</div>
	
	<div class="author-about">
		<h3>Stefan Judis</h3>
		<p>Frontend lover</p>
		<ul class="author-links">
			
			<li>
			<a href="http://twitter.com/stefanjudis">@stefanjudis</a>
			</li>
			
			
		</ul>
	</div>
</div>]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Why work doesn't happen at work]]></title>
    <link href="http://4waisenkinder.github.io/blog/2013/06/09/why-work-doesnt-happen-at-work/"/>
    <updated>2013-06-09T14:00:00+02:00</updated>
    <id>http://4waisenkinder.github.io/blog/2013/06/09/why-work-doesnt-happen-at-work</id>
    <content type="html"><![CDATA[<p>I believe our working models and how we collaborate have to change. They
haven&rsquo;t for years. In fact, they haven&rsquo;t changed much since the beginning of
the 20th century: most of us sit in offices, at dedicated desks, participate
in meetings now and then and hope to achive set goals within a reasonable time
span.</p>

<!-- more -->


<p>Altough there is not solution yet, we&rsquo;re at the verge of dicovering it. Jason
Fried has a radical theory of working: that the office isn&rsquo;t a good place to
do it. He helt an inspiring talk at TEDxMidwest in October 2010.</p>

<blockquote><p>[Facebook and Twitter] aren’t the real problems in the office. The real <br/>problems are what I like to call the M&Ms, the Managers and the Meetings.</p></blockquote>




<div class="embed-video-container"><iframe src="http://www.youtube.com/embed/5XD2kNopsUs "></iframe></div>


<h3>About Jason</h3>

<p>He thinks deeply about collaboration, productivity and the nature of work. At
TEDxMidwest he lays out the main problems (call them the M&amp;Ms) and offers
three suggestions to make work work.</p>

<p>Fried is the co-author of the book Rework, about new ways to conceptualize
working and creating. He is the co-founder and president of
<a href="http://37signals.com/">37signals</a>, a Chicago-based company that builds
webbased productivity tools that, in their words, &ldquo;do less than the
competition &ndash; intentionally.&rdquo; 37signals&#8217; simple but powerful collaboration
tools include Basecamp, Highrise, Backpack, Campfire, Ta-da List, and
Writeboard. 37signals also developed and open-sourced the Ruby on Rails
programming framework.</p>

<h5>Sources:</h5>

<p><a href="http://www.ted.com/speakers/jason_fried.html">Jason&rsquo;s Speaker Profile on TED.com</a>,
<a href="http://www.ted.com/talks/jason_fried_why_work_doesn_t_happen_at_work.html">Jason&rsquo;s Talk on TED.com</a></p>
<div class='octopress-authorbox'>
	<div class="author-pic">
		<img src="http://www.gravatar.com/avatar/130112610052d9dad8ddb687038a31fa" alt="Patrick Venetz" />
	</div>
	
	<div class="author-about">
		<h3>Patrick Venetz</h3>
		<p>Web developer, in pursuit of sagacity</p>
		<ul class="author-links">
			
			<li>
			<a href="http://twitter.com/patrickvenetz">@patrickvenetz</a>
			</li>
			
			
		</ul>
	</div>
</div>]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Dynamic he.net IPV6 Tunnel Updates With Fritzbox]]></title>
    <link href="http://4waisenkinder.github.io/blog/2013/06/06/dynamic-ipv6-tunnel-updates-between-hurricane-electric-and-your-fritzbox/"/>
    <updated>2013-06-06T11:03:00+02:00</updated>
    <id>http://4waisenkinder.github.io/blog/2013/06/06/dynamic-ipv6-tunnel-updates-between-hurricane-electric-and-your-fritzbox</id>
    <content type="html"><![CDATA[<h2>TL;DR:</h2>

<p>Associate your tunnel with a dynamically updated hostname from a subomain at
dns.he.net, use that host for fritzbox&#8217;es user-defined dynamic dns feature and
hardcode your tunnelid into the &ldquo;Dynamic DNS provider&rdquo; url.</p>

<h1>The Problem:</h1>

<!-- more -->


<p><a href="https://he.net">Hurricane Electric (he.net)</a> provides excellent free IPv6
tunnels at <a href="https://tunnelbroker.net">tunnelbroker.net</a> together with free dns
hosting.  If you don&rsquo;t have an account yet, head over there now and open one up.
Do it now, you won&rsquo;t regret it. I&rsquo;ll wait.</p>

<p>Users of the popular <a href="http://www.avm.de/de/Produkte/FRITZBox/">FRITZ!Box</a> home
router enjoy some ipv6 support out of the box, i.e.
<a href="http://www.sixxs.net">SixXs.net</a>-tunnels can be configured via the gui:</p>

<p><img class="center" src="http://4waisenkinder.github.io/images/blog/bkw/fritzbox-sixx.png" width="665" height="177" title="fritzbox sixxs tunnel config gui" alt="fritzbox gui screenshot"></p>

<p>SixXs.net supports a protocol to remotely manage your tunnel endpoint.
However, he.net tunnels use the plain <a href="http://en.wikipedia.org/wiki/6in4">6in4</a>
mechanism, which is designed for static endpoints.</p>

<p><img class="center" src="http://4waisenkinder.github.io/images/blog/bkw/fritzbox-6in4.png" width="553" height="177" title="fritzbox 6in4 tunnel config gui" alt="fritzbox gui screenshot"></p>

<p>This implies your remote tunnel endpoint is configured to point to one specific
ip address at your end, presumably the one you had when you created the tunnel.</p>

<p><strong>This means that whenever your ISP gives you a new ip, your tunnel stops working.</strong></p>

<p>To remedy this, he.net provides a
<a href="http://www.tunnelbroker.net/forums/index.php?topic=1994.0">dyndns compatible update mechanism</a>
to update your tunnel endpoint remotely. Fritzbox also supports adding
user-defined dyndns providers. So the naïve approach is to add he.net&rsquo;s url
into the gui and use the tunnel id as a hostname, like
<a href="http://www.tunnelbroker.net/forums/index.php?topic=1994.0">the documentation</a>
suggests.</p>

<p>Unfortunately (but very sensibly) fritzbox checks the dns record of the host to
be updated before it actually calls the service. This makes perfect sense:
Updates are only performed when neccessary. But in our case, the value of the
hostname field is not an existing host, it&rsquo;s the tunnel id. The alternative
hostnames (tunnel#.tunnelbroker.net, user-#.tunnel.tserv#.loc#.ipv6.he.net)
also do not resolve. This results in the following log message on your fritzbox:</p>

<pre><code>    Dynamic DNS error: Dynamic DNS update is disabled until the dynamic DNS registration data are changed.
    Dynamic DNS error: The specified domain name cannot be resolved.
</code></pre>

<h1>The Solution</h1>

<p>he.net offers another cool feature: If you host a domain or subdomain on their
free dns service at <a href="https://dns.he.net/">dns.he.net</a>, you can enable dynamic
updates for a hostname and have your tunnel endpoint updates set the dns record
for that hostname, too! Let&rsquo;s walk through this:</p>

<p>You can either:</p>

<ul>
<li><p>move the dns of the whole domain to dns.he.net by updating the NS-records at your current provider/registrar, or:</p></li>
<li><p>use a subdomain and delegate it to dns.he.net. Just create NS records for
something like <code>home.example.com</code> pointing to ns2.he.net, ns3.he.net, ns4.he.net and ns5.he.net.</p></li>
</ul>


<p>Either way, you should now have a (sub-)domain that you can control via
dns.he.net. Create a host in that zone with any ip address and select <strong>enable
entry for dynamic dns</strong>.</p>

<p><img class="left" src="http://4waisenkinder.github.io/images/blog/bkw/dns-henet-dynamic.png" width="605" height="325" title="dns.he.net dynamic host update gui" alt="dns.he.net gui screenshot"></p>

<p>Next, in the listing of your domain&rsquo;s records, click the refresh symbol in this host&rsquo;s DDNS column:</p>

<p><img class="left" src="http://4waisenkinder.github.io/images/blog/bkw/dns-henet-dynamic-key.png" width="843" height="333" title="dns.he.net dynamic host update gui" alt="dns.he.net gui screenshot"></p>

<p>Generate a key to use for updates to this host:</p>

<p><img class="left" src="http://4waisenkinder.github.io/images/blog/bkw/dns-henet-dynamic-key2.png" width="606" height="288" title="dns.he.net dynamic host update gui" alt="dns.he.net gui screenshot"></p>

<p>Save that key, you&rsquo;ll need it in a minute.</p>

<p>Now head over to <a href="https://tunnelbroker.net">tunnelbroker.net</a>, open up your
tunnel&rsquo;s details and select the <strong>Advanced</strong> tab. Enter the dynamic hostname you configured in the last step and the key you generated.</p>

<p><img class="left" src="http://4waisenkinder.github.io/images/blog/bkw/tunnelbroker-dynamic-host.png" width="606" height="288" title="tunnelbroker dynamic host update gui" alt="tunnelbroker.net gui screenshot"></p>

<p>Now, whenever the tunnel endpoint is updated, the hostname <em>gw.home.example.com</em> will be updated to your router&rsquo;s ipv4 address as well.</p>

<p><strong>This allows us to use a valid and up-to-date host in the dynamic dns updater
of the fritzbox.</strong></p>

<p>Head over to your fritzbox GUI.</p>

<p>Open Internet/Account Information/IPv6, check <em>IPv6 support enabled</em> and
<em>Always use a tunnel protocol for the IPv6 connection</em>. Select tunnel protocol
<em>6in4</em> in <em>Connection Settings</em>, fill in the values from your tunnel details
page at tunnelbroker.net and hit <em>Apply</em>.</p>

<h2>Now for the hack:</h2>

<p>Open Internet/Permit Access/Dynamic DNS, check <em>Use dynamic DNS</em> and select
<em>User-defined</em> for <em>Dynamic DNS provider</em>.</p>

<p><img class="left" src="http://4waisenkinder.github.io/images/blog/bkw/fritzbox-dyndns.png" width="606" height="288" title="fritzbox dyndns gui" alt="fritzbox gui screenshot"></p>

<p>Enter the following URL for <em>Update URL</em>, replacing <em>123456</em> with the id of
your he.net tunnel:</p>

<pre><code>http://ipv4.tunnelbroker.net/nic/update?hostname=123456&amp;myip=&lt;ipaddr&gt;&amp;username=&lt;username&gt;&amp;password=&lt;pass&gt;
</code></pre>

<p>Do not replace the placeholders in angle brackets, your fritzbox will do that.</p>

<p>Enter the dynamic host you configured earlier in the <em>Domain name</em> field.
This will be used by the fritzbox to check whether the update needs to be
performed.</p>

<p>Enter your he.net username and password in the respective fields.</p>

<p>Hit <em>Apply</em> and enjoy an auto updating IPv6 tunnel to hurricane electric.</p>

<h2>How does this work?</h2>

<p>The dynamic hostname (which is kept in sync by hurricane electric) is used for
checking for changes, but the actual update is performed on the tunnel id hardcoded in the <em>Update URL</em>.</p>

<h2>Bonus</h2>

<p>As a useful side effect, from now on you can always reach your router and any
port-forwared services under you own hostname <em>(gw.home.example.com)</em> in your
very own domain!  How cool is that?</p>

<p>Actually, now that you have IPv6, you don&rsquo;t really need those
pesky port forwards any more: just assign any v6 address you like and use
plain internet routing the way it was supposed to work in the first place.</p>
<div class='octopress-authorbox'>
	<div class="author-pic">
		<img src="http://www.gravatar.com/avatar/ba794f1084b2a876705e2679c197c630" alt="Bernhard K. Weisshuhn" />
	</div>
	
	<div class="author-about">
		<h3>Bernhard K. Weisshuhn</h3>
		<p>Serial CTO and technology procrastinator</p>
		<ul class="author-links">
			
			<li>
			<a href="http://twitter.com/bernhorst">@bernhorst</a>
			</li>
			
			
		</ul>
	</div>
</div>]]></content>
  </entry>
  
</feed>
