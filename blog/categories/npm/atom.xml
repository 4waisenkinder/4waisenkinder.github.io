<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: npm | 4waisenkinder]]></title>
  <link href="http://4waisenkinder.github.io/blog/categories/npm/atom.xml" rel="self"/>
  <link href="http://4waisenkinder.github.io/"/>
  <updated>2014-10-14T01:00:29+02:00</updated>
  <id>http://4waisenkinder.github.io/</id>
  <author>
    <name><![CDATA[Stefan Judis, Patrick Venetz, AndrÃ© Kussmann, Bernhard Weisshuhn]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Flatten your npm dependencies with dedupe]]></title>
    <link href="http://4waisenkinder.github.io/blog/2014/06/09/flatten-your-dependencies-with-npm-dedupe/"/>
    <updated>2014-06-09T21:52:00+02:00</updated>
    <id>http://4waisenkinder.github.io/blog/2014/06/09/flatten-your-dependencies-with-npm-dedupe</id>
    <content type="html"><![CDATA[<p>I use npm for a while now and it is heavily integrated in my daily workflow. One thing that always bothers me, is that a fresh <code>npm install</code> on your project will probably download the same packages over and over again. Let us imagine your project has multiple dependencies that all have one package defined as another dependency.<!-- more --></p>

<p><code>``
a
+-- b &lt;-- depends on c@1.0.x
|  </code>&mdash; <a href="&#109;&#97;&#x69;&#x6c;&#x74;&#x6f;&#x3a;&#99;&#x40;&#49;&#x2e;&#x30;&#46;&#49;&#x30;">&#x63;&#x40;&#49;&#46;&#48;&#46;&#49;&#48;</a>
`&mdash; d &lt;&mdash; depends on c@~1.0.9</p>

<pre><code>`-- c@1.0.10
</code></pre>

<p>```</p>

<p>As you see above package <code>c</code> will be downloaded two times, although the dependencies <code>b</code> and <code>d</code> could use the same package. You might think now &ldquo;So? Not a big deal&hellip;&rdquo;, but depending on dependencies of your dependencies you end up with a much slower <code>npm install</code> process, because packages got downloaded multiple times. And if you deal with a big project with a lot of dependencies I am not talking about a few seconds. ;)</p>

<p>Additionally the installation process can become less stable. In my case I included the following dependencies in my <code>package.json</code>.</p>

<p>```
  &ldquo;dependencies&rdquo;: {</p>

<pre><code>"grunt": "~0.4.5",
"grunt-photobox": "~0.8.0",
"grunt-phantomas": "~0.7.1"
</code></pre>

<p>  }
```</p>

<p>The two grunt plugins either directly or one of their dependencies depend on <code>phantomjs</code>. This leads to the following output during the installation process.</p>

<p>```</p>

<blockquote><p><a href="&#x6d;&#x61;&#x69;&#108;&#x74;&#111;&#58;&#x70;&#104;&#97;&#110;&#x74;&#111;&#x6d;&#106;&#115;&#x40;&#49;&#x2e;&#57;&#x2e;&#55;&#x2d;&#56;">&#x70;&#x68;&#97;&#x6e;&#116;&#111;&#109;&#x6a;&#x73;&#x40;&#49;&#46;&#x39;&#46;&#x37;&#x2d;&#x38;</a> install /Users/stefan/Sites/blog-npm-dedupe/node_modules/grunt-contrib-jasmine/node_modules/grunt-lib-phantomjs/node_modules/phantomjs
node install.js</p></blockquote>

<p>PhantomJS detected, but wrong version 1.9.2 @ /opt/local/bin/phantomjs.
Download already available at /var/folders/03/cgg2bwfd6j92tfllylt5b91m0000gn/T/phantomjs/phantomjs-1.9.7-macosx.zip
Extracting zip contents
Copying extracted folder /var/folders/03/cgg2bwfd6j92tfllylt5b91m0000gn/T/phantomjs/phantomjs-1.9.7-macosx.zip-extract-1402344467586/phantomjs-1.9.7-macosx &ndash;> /Users/stefan/Sites/blog-npm-dedupe/node_modules/grunt-contrib-jasmine/node_modules/grunt-lib-phantomjs/node_modules/phantomjs/lib/phantom
Writing location.js file
Done. Phantomjs binary available at /Users/stefan/Sites/blog-npm-dedupe/node_modules/grunt-contrib-jasmine/node_modules/grunt-lib-phantomjs/node_modules/phantomjs/lib/phantom/bin/phantomjs</p>

<blockquote><p><a href="&#109;&#97;&#x69;&#x6c;&#116;&#x6f;&#58;&#x70;&#x68;&#x61;&#110;&#x74;&#111;&#109;&#106;&#115;&#64;&#49;&#46;&#57;&#46;&#x37;&#x2d;&#x38;">&#x70;&#x68;&#x61;&#110;&#x74;&#111;&#x6d;&#x6a;&#x73;&#64;&#49;&#x2e;&#x39;&#x2e;&#55;&#45;&#56;</a> install /Users/stefan/Sites/blog-npm-dedupe/node_modules/grunt-phantomas/node_modules/phantomas/node_modules/phantomjs
node install.js</p></blockquote>

<p>PhantomJS detected, but wrong version 1.9.2 @ /opt/local/bin/phantomjs.
Download already available at /var/folders/03/cgg2bwfd6j92tfllylt5b91m0000gn/T/phantomjs/phantomjs-1.9.7-macosx.zip
Extracting zip contents
Copying extracted folder /var/folders/03/cgg2bwfd6j92tfllylt5b91m0000gn/T/phantomjs/phantomjs-1.9.7-macosx.zip-extract-1402344475151/phantomjs-1.9.7-macosx &ndash;> /Users/stefan/Sites/blog-npm-dedupe/node_modules/grunt-phantomas/node_modules/phantomas/node_modules/phantomjs/lib/phantom
Writing location.js file
Done. Phantomjs binary available at /Users/stefan/Sites/blog-npm-dedupe/node_modules/grunt-phantomas/node_modules/phantomas/node_modules/phantomjs/lib/phantom/bin/phantomjs
```</p>

<p>Two times the same package is downloaded and unfortunately the <code>phantomjs</code> package downloads <code>phantomjs</code> via npm script functionality. It downloads and unzipps data itself. In my case I had to fight against an unstable network, which led to a bunch of failing intallation processes. Sometimes the first <code>phantomjs</code> download did not work. Sometimes the second. And all the time <code>npm install</code> failed. Especially <code>phantomjs</code> is a really popular dependency and I am sure a lot of projects download it much more often than only two times. ;)</p>

<p>After this experience I started digging around a bit and discovered <code>npm dedupe</code> &ndash; docs are <a href="https://www.npmjs.org/doc/cli/npm-dedupe.html">here</a>. It will check your installed dependencies and finally flatten the dependency structure by moving shared packages higher in the tree. Less duplicated packages &ndash; yay!!!</p>

<p>To show the difference &ndash; the old structure was:</p>

<p><code>``
grunt-phantomas
</code>&mdash; phantomas</p>

<pre><code>`-- phantomjs
</code></pre>

<p>grunt-photobox
`&mdash; phantomjs
```</p>

<p>And after using <code>dedupe</code> I ended up with:</p>

<p>```
phantomjs</p>

<p>// a lot of other shared
// dependencies also here :)</p>

<p>grunt-phantomas
`&mdash; phantomas</p>

<p>grunt-photobox
```</p>

<p>Super nice!</p>

<p>To make sure all your colleagues receive the same flattened dependency structure use <code>npm shrinkwrap</code> to really lock all packages including versions and hierarchy. In case you have not used <code>shrinkwrap</code> before I also wrote a <a href="http://4waisenkinder.de/blog/2013/07/10/why-you-should-use-npm-shrinkwrap-and-how-to-deal-with-a-dependency-fu-star-star-up/">post</a> about it.</p>

<p>To sum up, my workflow was the following:</p>

<p>```
$ npm install</p>

<p>$ npm dedupe</p>

<p>$ npm shrinkwrap
```</p>

<p><code>dedupe</code> is currently marked as experimental and unfortunately I made the experience, that it is not 100% stable at the moment. I filed already an issue <a href="https://github.com/npm/npm/issues/5448">here</a>. But we should really start using it, because it will make the installation of npm packages just quicker and safer. I am really looking forward to this feature and I am sure, that it will become stable soon.</p>

<p>Thanks for reading and all comments on this topic are as usual more than welcome. ;)</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA["shrinkwrap" and how to deal with a dependency fu** up]]></title>
    <link href="http://4waisenkinder.github.io/blog/2013/07/10/why-you-should-use-npm-shrinkwrap-and-how-to-deal-with-a-dependency-fu-star-star-up/"/>
    <updated>2013-07-10T19:13:00+02:00</updated>
    <id>http://4waisenkinder.github.io/blog/2013/07/10/why-you-should-use-npm-shrinkwrap-and-how-to-deal-with-a-dependency-fu-star-star-up</id>
    <content type="html"><![CDATA[<p>A few people may have noticed, that <code>npm install grunt</code> was failing today. According to the pull requests made, it was failing for 10 ( ! ) hours. When you think right know, that this is not a big deal, you probably do not use it in production. Because then it becomes a big problem very quickly.</p>

<!-- more -->


<p>The reason for failing was a first renamed and later removed dependency of grunt itself. Grunt defines its dependencies ( defined inside of the <code>package.json</code>, if you are not familiar with npm ) with  a <code>~</code> in front of each version number. That is quite common and there is nothing special about it. The <a href="https://npmjs.org/doc/json.html#Tilde-Version-Ranges">tilde</a> defines, that every version greater than the specifed one and less than the next major release is fine to install.</p>

<p>What happened exactly, was that npm was not able to find a version of a particular dependency that fits this conditions ( because of renaming and removing ). And that is it. Nothing special about it, but an important insight.</p>

<p><strong>Whenever we publish something on npm, we have to let it there &ndash; no renaming or removing. There can always be people using it and it can screw up their build!</strong></p>

<p>However, we had to figure out a workaround today quickly, and that is what we did until it was fixed.</p>

<p>We forked grunt at Github. Fixed the dependency problem and set the &ldquo;new&rdquo; grunt as our project dependency. Npm allows you to set dependencies that are not published at npm easily. That can be quiet handy from time to time. ;)</p>

<p><code>
"devDependencies": {
  "grunt": "git://github.com/you/your-grunt-fork.git"
}
</code></p>

<p>Later on there were a few discussions about npm dependency handling on Twitter and <a href="https://twitter.com/asciidisco">@asciidisco</a> pointed me into the direction of <code>npm shrinkwrap</code>.</p>

<p>This command locks all your installed dependencies and writes a new file called <strong>npm-shrinkwrap.json</strong>.</p>

<p>This file is similar to php&rsquo;s <strong>composer.lock</strong> or ruby&rsquo;s <strong>Gemfile.lock</strong>. When you call <code>npm install</code> later on it installs the locked versions written in this file. The version numbers are locked recursively, so that you are safe on production level without any bad surprises.</p>

<p>There can always be a version jump in a dependency, which is quite welcome, but I don&rsquo;t want check out if it works on production side first&hellip;</p>

<p>So the solution is:</p>

<p><strong>Stay with your package.json and define dependencies with &lsquo;>=&rsquo; or &lsquo;~&rsquo; to receive the newest stuff locally, but lock all dependencies for production.</strong></p>

<p>As always opinions and solutions are very welcome about this topic. ;)</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Show npm statistics at terminal start]]></title>
    <link href="http://4waisenkinder.github.io/blog/2013/06/24/show-npm-statistics-terminal-start/"/>
    <updated>2013-06-24T22:21:00+02:00</updated>
    <id>http://4waisenkinder.github.io/blog/2013/06/24/show-npm-statistics-terminal-start</id>
    <content type="html"><![CDATA[<p>Two month ago I released my <a href="https://npmjs.org/package/cushion-cli">first npm module</a>. I got really excited (and I am still) about releasing something and showing it to the world. Since then the statistics written on top of the module page at NPM are checked by me on a daily basis. Unfortunately these statistics do not seem to be really precise. They are jumping from day to day and should not be taken to serious in my mind (No offense meant. I really like NPM and I think it is a great service).</p>

<p>That is the reason why a friend of mine wrote a <a href="https://raw.github.com/Zoddy/geektool-desk/master/os_downloads.js">tiny script</a> to read the statistics directly from where the data is stored &ndash; a <a href="http://isaacs.iriscouch.com/">CouchDB</a> available for everyone. The script will be part of a <a href="https://github.com/Zoddy/geektool-desk">library for geeky stuff</a> and tools later on, but that is another story.</p>

<p>Today I had the idea about showing this kind of information whenever I open a new terminal window to save some time and &ldquo;pimp my terminal&rdquo;.</p>

<!-- more -->


<p>I googled a bit and had to notice that it is not to easy to execute scripts on MacOS in the <code>/etc/motd</code> (message of the day). It seems to be much easier in the linux world &ndash; correct me when I&rsquo;m wrong please. ;)</p>

<p>So I decided to execute the whole stuff inside of the shell configuration files placed in the given user root (information about NPM modules are probably user related, so after a bit of thinking I like that solution even more).</p>

<p>To start you have to clone the Github project with the mentioned script (in my case <code>~/Sites/</code>).</p>

<p><code>
git clone https://github.com/Zoddy/geektool-desk.git
</code></p>

<p>After that we start editing the .bash_profile, .bashrc, .zshrc or whatever shell file your system and shell gives you.</p>

<p>I prefer using ZSH. Adding the following lines does all the magic for me &ndash; look at this <a href="https://github.com/Zoddy/geektool-desk">readme</a> for further explanation how to use the script. This example is made for my &lsquo;cushion-cli&rsquo; project. I think you are not interested in this data, so please feel free to change it to your project names.</p>

<p>```</p>

<h3>show cushion-cli downloads</h3>

<p>echo &ldquo;\nCUSHION-CLI DOWNLOADS\n&rdquo;</p>

<p>echo &ldquo;TODAY / YESTERDAY:&rdquo;
today=$(node /Users/stefan/Sites/geektool-desk/os_downloads.js cushion-cli today)
yesterday=$(node /Users/stefan/Sites/geektool-desk/os_downloads.js cushion-cli yesterday)
printf &ldquo;%s / %s downloads\n\n&rdquo; &ldquo;$today&rdquo; &ldquo;$yesterday&rdquo;</p>

<p>echo &lsquo;CURRENT WEEK / LAST WEEK:&rsquo;
week=$(node /Users/stefan/Sites/geektool-desk/os_downloads.js cushion-cli current-week)
last_week=$(node /Users/stefan/Sites/geektool-desk/os_downloads.js cushion-cli last-week)
printf &ldquo;%s / %s downloads\n\n&rdquo; &ldquo;$week&rdquo; &ldquo;$last_week&rdquo;</p>

<p>echo &lsquo;CURRENT MONTH / LAST MONTH:&rsquo;
month=$(node /Users/stefan/Sites/geektool-desk/os_downloads.js cushion-cli current-month)
last_month=$(node /Users/stefan/Sites/geektool-desk/os_downloads.js cushion-cli last-month)
printf &ldquo;%s / %s downloads\n\n&rdquo; &ldquo;$month&rdquo; &ldquo;$last_month&rdquo;
```</p>

<p>I am not a shell script wizard. If something is not correct with these lines let me know.</p>

<p>And that is the result. Hope you enjoy it.</p>

<p><img class="right" src="/images/blog/stefanjudis/npmPrompt.png" width="254" height="233" title="&lsquo;prompt with npm statistic&rsquo; &lsquo;prompt with npm statistic for cushion-cli&rsquo;" ></p>
]]></content>
  </entry>
  
</feed>
