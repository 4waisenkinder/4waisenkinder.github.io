<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: rwd | 4waisenkinder]]></title>
  <link href="http://4waisenkinder.github.io/blog/categories/rwd/atom.xml" rel="self"/>
  <link href="http://4waisenkinder.github.io/"/>
  <updated>2015-01-03T17:52:59+01:00</updated>
  <id>http://4waisenkinder.github.io/</id>
  <author>
    <name><![CDATA[Stefan Judis, Patrick Venetz, AndrÃ© Kussmann, Bernhard Weisshuhn]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[How to react to changing environments using matchMedia]]></title>
    <link href="http://4waisenkinder.github.io/blog/2014/12/26/handle-environment-changes-via-window-dot-matchmedia/"/>
    <updated>2014-12-26T23:03:00+01:00</updated>
    <id>http://4waisenkinder.github.io/blog/2014/12/26/handle-environment-changes-via-window-dot-matchmedia</id>
    <content type="html"><![CDATA[<p>I was at my parents place over Christmas. Besides eating the whole day and playing board games I tried to read two books I brought with me.</p>

<p>One of the books was <a href="http://www.abookapart.com/products/responsible-responsive-design">RESPONSIBLE RESPONSIVE DESIGN</a> by <a href="https://twitter.com/scottjehl">Scott Jehl</a>. It was released recently and it is a really good read. I have not finished it yet, but I enjoy it and it is for sure in the TOP5 list of my favourite books about responsive web design.</p>

<!-- more -->


<p>In the world of responsive web design we deal with media queries all the time to give our visitors the best experience possible depending on the their devices and environments. Usually this means that web developers deal with screen dimensions inside of media queries and this is becoming crazier and more useful every day.</p>

<p>If you are interested in what may come in the future the spec for <a href="http://dev.w3.org/csswg/mediaqueries4">Media Queries Level 4</a> is quite interesting &ndash; check out the spec for <a href="http://dev.w3.org/csswg/mediaqueries4/#light-level">light-level</a>. ;)</p>

<p>Media queries are mostly used inside of the CSS files to adapt the styling to the particular device the visitor is using. This makes total sense, but responsive web design should not be only about &ldquo;making it look pretty&rdquo;.</p>

<h4>It should also be about only using and initializing needed components.</h4>

<p>At my last job I was working with <a href="http://foundation.zurb.com/">Foundation</a> a lot. And I really loved it. The <a href="http://foundation.zurb.com/docs/components/block_grid.html">block grid</a> is awesome! And also the <a href="http://foundation.zurb.com/docs/components/offcanvas.html">Off-canvas implementation</a> is quite nice in my opinion.</p>

<p>The only thing that always bothered me about the implementations in famous frameworks like <a href="http://getbootstrap.com/">Bootstrap</a> and <a href="http://foundation.zurb.com/">Foundation</a> is that the scripts and modules used for smaller devices are also executed on larger devices and vice versa.</p>

<p>No matter if the modules and their functionality are needed or not, the given code is executed and all event handlers are still bound. These event handlers will not be triggered in a lot of cases, because the given DOM elements connected to the functionality are hidden via CSS in several environment combinations.</p>

<p>When having a look at navigation solutions for smaller devices in both projects you will see that the JavaScript modules to guarantee a good experience on smaller devices are initialized and event handlers are bound for no reason &ndash; regardless of whether they are needed. This is a simple waste of CPU and not needed at all.</p>

<p><img class="center" src="/images/blog/stefanjudis/mobileNavigationOnDesktop.jpg" width="600" height="324" title="&lsquo;Mobile event handlers still bound on larger devices&rsquo; &lsquo;Mobile event handlers still bound on larger devices&rsquo;" ></p>

<p>There is a lot of discussion regarding what to serve to a customer in terms of feature detection and custom builds, but not every project has enough time and resources to implement complicated build systems.</p>

<p>This is why I started to initialize given modules only when needed. A custom build of <a href="http://modernizr.com/">Modernizr</a> is usually included in my projects so that the handy <code>Modernizr.mq</code> function is largely used to not initialize things that are not needed at all.</p>

<p><code>javascript
// only initialize the off-canvas
// navigation for smaller devices
if ( Modernizr.mq( '(max-width: 50em)' ) ) {
  // initialize Foundation's offcanvas
  $document.foundation( 'offcanvas' );
}
</code></p>

<h3><code>Modernizr.mq</code> &ndash; how does it work?</h3>

<p>Let us have a look at how this function works. The functionality is defined in <a href="https://github.com/Modernizr/Modernizr/blob/master/src/mq.js">mq.js</a> and <a href="https://github.com/Modernizr/Modernizr/blob/master/src/testMediaQuery.js">testMediaQuery.js</a>.</p>

<p>```javascript
// &ndash;> testMediaQuery.js
define([&lsquo;injectElementWithStyles&rsquo;], function( injectElementWithStyles ) {
  // adapted from matchMedia polyfill
  // by Scott Jehl and Paul Irish
  // gist.github.com/786768
  var testMediaQuery = (function () {</p>

<pre><code>var matchMedia = window.matchMedia || window.msMatchMedia;
if ( matchMedia ) {
  return function ( mq ) {
    var mql = matchMedia(mq);
    return mql &amp;&amp; mql.matches || false;
  };
}

return function ( mq ) {
  var bool = false;

  injectElementWithStyles('@media ' + mq + ' { #modernizr { position: absolute; } }', function( node ) {
    bool = (window.getComputedStyle ?
            window.getComputedStyle(node, null) :
            node.currentStyle)['position'] == 'absolute';
  });

  return bool;
};
</code></pre>

<p>  })();</p>

<p>  return testMediaQuery;
});
```</p>

<p>As we see internally Modernizr uses the <code>matchMedia</code> function ( when available ), which is defined in the spec for the <a href="http://dev.w3.org/csswg/cssom-view">CSSOM View Module</a>. If <code>matchMedia</code> is not supported it provides a shim to achieve the same functionality.</p>

<h3><code>window.matchMedia</code> &ndash; so what?</h3>

<p><code>matchMedia</code> provides the functionality to check media queries on the JavaScript side. And the great thing about it is, that it is actual quite widely supported according to <a href="http://caniuse.com/#feat=matchmedia">caniuse.com</a>.</p>

<p><code>Modernizr.mq</code> already gives us support to get information on whether the given media query is matching or not. One key thing to watch out here is, that <code>matchMedia</code> does not return a boolean value to work with &ndash; nstead it returns a <a href="http://dev.w3.org/csswg/cssom-view/#the-mediaquerylist-interface">MediaQueryList Interface</a>.</p>

<p>The information holding the information if the media query matches is stored inside of the property <code>matches</code>.</p>

<p>```javascript
( function( window, document ) {
  // get MediaQueryList Interface
  var mql = window.matchMedia( &lsquo;(min-width:20em)&rsquo; );
  // get a container to do something with it depending
  // on matching media query
  var container = document.getElementById( &lsquo;container&rsquo; );
  // create new paragraph object
  var paragraph = document.createElement( &lsquo;p&rsquo; );</p>

<p>  // set innerHTML depending on matching media query
  paragraph.innerHTML = mql.matches ?</p>

<pre><code>'Yeah - matching!' : 
'No - not matching!';
</code></pre>

<p>  // append element to container
  container.appendChild( paragraph );
} )( window, document );
```</p>

<p>This is already great because this way we can easily evaluate if a particular JavaScript module needs to be initialized or not. But what about the case of changing environments like a  changed viewport from portrait to landscape mode? This is something I have been struggling with for a while already &ndash; and while reading Scott Jehl&rsquo;s book I just came across a super neat solution.</p>

<p>I already read a lot of articles about <code>matchMedia</code>, but I did not know before that it provides more than just the matches property.</p>

<p>The returned <code>MediaQueryList Interface</code> also provides the ability to attach listeners to the moment whenever the media query changes from matching to not matching or the other way around.</p>

<p>```javascript
( function( window, document ) {
  // get MediaQueryList Interface
  var mql = window.matchMedia( &lsquo;(min-width:20em)&rsquo; );
  // get a container to do something with it depending
  // on matching media query
  var container = document.getElementById( &lsquo;container&rsquo; );
  // create new paragraph element
  var paragraph = document.createElement( &lsquo;p&rsquo; );</p>

<p>  // set innerHTML depending on matching media query
  paragraph.innerHTML = mql.matches ?</p>

<pre><code>'Yeah - matching!' : 
'No - not matching!';
</code></pre>

<p>  // append element to container
  container.appendChild( paragraph );</p>

<p>  // attach event listener to changed state
  // of the given media query
  mql.addListener( function( mql ) {</p>

<pre><code>// create new paragraph element
var paragraph = document.createElement( 'p' );

// set innerHTHML depending on matching media query
paragraph.innerHTML = mql.matches ?
  'Yeah - changed to matching!' : 
  'No - changed to not matching!';

// append element to container
container.appendChild( paragraph );
</code></pre>

<p>  } );
} )( window, document );
```</p>

<p>This is exactly what I was looking for a while, it gives an easy way to enhance an interface on changing environments on the fly and save resources from the beginning.</p>

<p>If you want to play around with it I created a <a href="http://codepen.io/stefanjudis/pen/qEaxKR">pen</a> for you to play around with.</p>

<p>And this is it for today &ndash; I hope you enjoyed the short read. Any ideas and comments are more than welcome. :)</p>
]]></content>
  </entry>
  
</feed>
