<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: javascript | 4waisenkinder]]></title>
  <link href="http://4waisenkinder.github.io/blog/categories/javascript/atom.xml" rel="self"/>
  <link href="http://4waisenkinder.github.io/"/>
  <updated>2013-11-11T00:52:47+01:00</updated>
  <id>http://4waisenkinder.github.io/</id>
  <author>
    <name><![CDATA[Stefan Judis, Patrick Venetz, AndrÃ© Kussmann, Bernhard Weisshuhn]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Journey of discovery - the global 'window.performance' object]]></title>
    <link href="http://4waisenkinder.github.io/blog/2013/11/10/discovery-of-window-dot-performance-dot-timing/"/>
    <updated>2013-11-10T13:37:00+01:00</updated>
    <id>http://4waisenkinder.github.io/blog/2013/11/10/discovery-of-window-dot-performance-dot-timing</id>
    <content type="html"><![CDATA[<p>A few days ago I was attending the <a href="http://www.developer-conference.eu/">Developer Conference Hamburg</a>. Topics of the talks were nearly everything you could think of ( from Java to PHP to JavaScript and much more ). For me only frontend related talks were important and that was why I attended the talk of <a href="https://twitter.com/AloisReitbauer">Alois Reitbauer</a> with the title &ldquo;W3C Web Performance &ndash; A detailed overview&rdquo; ( slides of his talk can be found <a href="http://de.slideshare.net/AloisReitbauer/w3c-web-performance-a-detailed-overview">here</a> ).</p>

<p>And well, what should I say? He introduced the <code>window.performance</code> object to the audience and that absolutely blew my mind, <!-- more -->because there is really a lot of useful stuff in there and I did not know, that there was such an object available in the global window scope.</p>

<p>The performance object includes three additional objects, which provide information for different use cases:</p>

<ul>
<li>timing // instanceof PerformanceTiming &ndash;> true</li>
<li>navigation // instanceof PerformanceNavigation &ndash;> true</li>
<li>memory // instanceof MemoryInfo &ndash;> true</li>
</ul>


<p>I tend to check out the particular specification for something I discovered, so let us have a first look inside of <a href="https://dvcs.w3.org/hg/webperf/raw-file/tip/specs/NavigationTiming/Overview.html">the spec</a> for the Navigation Timing API, which is the base for the <code>window.performance.timing</code> and <code>window.performance.navigation</code> object.</p>

<p>It turned out, that the spec for <em>Navigation Timing</em> is work in progress. So please be careful, when dealing with stuff described in it. It may change in the future without a warning.</p>

<p>According to <a href="http://caniuse.com/#search=performance">caniuse.com</a> the Navigation Timing API is unfortunately not completely supported ( Safari is missing ), but it is definitely something to play around with. ;)</p>

<p>So let us check it out&hellip;</p>

<h3>Specification for <em>window.performance.timing</em> &ndash; &ldquo;<a href="https://dvcs.w3.org/hg/webperf/raw-file/tip/specs/NavigationTiming/Overview.html#sec-navigation-timing-interface">interface PerformanceTiming</a>&rdquo;</h3>

<h4>&ndash;> getting general performance information of current document</h4>

<p>Quote from the <em>Navigation Timing</em> specification:</p>

<blockquote><p>To address the need for complete information on user experience, this document introduces the PerformanceTiming interfaces. This interface allows JavaScript mechanisms to provide complete client-side latency measurements within applications. [&hellip;] This specification introduces an interface that provides Web applications with timing-related information.</p></blockquote>

<p>For me that sounds really awesome. Accessing timing information of the current document via JavaScript can be become really useful for any optimization of your site. Especially when you are dealing with the goal of presenting your site / your web application to your customers in less than 1000ms every metric you can get, can help you succeed and compare current and improved versions.</p>

<p>Got curious? Let us check it out! :)</p>

<p><img class="center" src="/images/blog/stefanjudis/window-performance-timing.png" width="604" height="375" title="&lsquo;window.performance.timing object&rsquo; &lsquo;window.performance.timing object&rsquo;" ></p>

<p>As you can see <code>window.performance.timing</code> includes a bunch of data that is predefined by the <code>interface PerformanceTiming</code>. The W3C provides inside of the spec itself a nice graphic to figure out, what these values stand for.</p>

<p><img class="center <a" src="href="https://dvcs.w3.org/hg/webperf/raw-file/tip/specs/NavigationTiming/timing-overview.png">https://dvcs.w3.org/hg/webperf/raw-file/tip/specs/NavigationTiming/timing-overview.png</a>" width="911" height="555" title="&lsquo;window.performance.timing metrics&rsquo; &lsquo;window.performance.timing metrics&rsquo;" ></p>

<h4>Example usage of data included in <em>window.performance.timing</em></h4>

<p>Let us start simple and try to figure out how long a document needs to load.</p>

<p>```javascript
// cache it for shorter lines
var timing = window.performance.timing;</p>

<p>// actual calculation
var loadingTime = timing.loadEventEnd &ndash; timing.navigationStart;
```</p>

<p>No magic in there. You may say now &ldquo;<em>Well I can get this information inside of the DevTools</em>&rdquo; and well&hellip; that is true. But the nice thing of that is, that you are able to access this information easily and you could ( or rather should? ) log it to get a better idea of the actual performance and user experience of your visitors in their browsers.</p>

<p>To show a bit more interesting information than <code>loadingTime</code> and to make the usage of this a bit clearer I created a little snippet ( can be found <a href="https://gist.github.com/stefanjudis/7399022">here</a> ), which you can <a href="https://developers.google.com/chrome-developer-tools/docs/authoring-development-workflow#snippets">save inside of your Chrome DevTools</a>. With the usage of that we can easily display the main document metrics, when dealing with performance, without even touching the Network panel inside of the DevTools.</p>

<p><img class="center" src="/images/blog/stefanjudis/consoleMetrics.png" width="533" height="204" title="&lsquo;document performance metrics shown in console&rsquo; &lsquo;document performance metrics shown in console&rsquo;" ></p>

<h3>Specification for <em>window.performance.navigation</em> &ndash; &ldquo;<a href="https://dvcs.w3.org/hg/webperf/raw-file/tip/specs/NavigationTiming/Overview.html#sec-navigation-info-interface">interface PerformanceNavigation</a>&rdquo;</h3>

<h4>&ndash;> getting information of navigation context</h4>

<p>According to the <a href="https://dvcs.w3.org/hg/webperf/raw-file/tip/specs/NavigationTiming/Overview.html#performancenavigation">specification</a> the object <code>window.performance.navigation</code> only has to include two values, which give you information about the &ldquo;<em>last non-redirect navigation in the current browsing context</em>&rdquo;. Maybe you are thinking &ldquo;<em>I do not get it</em>&rdquo; like I did one hour ago, but it is not really complicated as well.</p>

<p>Let us have a look at an example:</p>

<p>```javascript
// enter a site directly by entering
// the particular URL
console.log( window.performance.navigation.type ) // &lsquo;0&rsquo;</p>

<p>// reload the page
console.log( window.performance.navigation.type ) // &lsquo;1&rsquo;</p>

<p>// go back in the history and come
// back by going &lsquo;forward&rsquo; in history
console.log( window.performance.navigation.type ) // &lsquo;2&rsquo;
```</p>

<p>To sum up the possibilities of the <code>type</code> attribute, it can have the following values:</p>

<ul>
<li>0 &ndash; site was directly entered</li>
<li>1 &ndash; site was reloaded</li>
<li>2 &ndash; site was entered via history</li>
<li>255 &ndash; none of the first three options matches</li>
</ul>


<p>Additionally the object includes <code>redirectCount</code>, which will give you unfortunatelly only &ldquo;nearly&rdquo; the information you would expect. It will only count redirects from the same origin. That means if you want to check if there was a redirect via a URL shortener for example, <code>redirectCount</code> will still return <code>0</code>. I can not say, what is the exact reason for that decision, but it is defined in the spec this way. For redirects on your site it just works fine. ;)</p>

<h3><em>window.performance.navigation</em> &ndash; unfortunately no spec found</h3>

<h4>&ndash;> getting general information of JavsScript memory usage</h4>

<p>Unfortunately I was not able to find any specification for this included object ( maybe you can ping <a href="https://twitter.com/stefanjudis">me</a> and point me into the correct direction &ndash; I really would like to read it ). Googling for &lsquo;interface MemoryInfo&rsquo; or &lsquo;jsHeapSizeLimit spec&rsquo; unfortunately did not give me any useful information.</p>

<p>But anyway&hellip; I have not played around with memory profiling of JavaScript yet, but information about the current document can be found there &ndash; only wanted to mention it because it is included. ;)</p>

<p>Example of the <code>window.performance.memory</code> object:</p>

<p><code>javascript
console.log( window.performance.memory );
// will log :
// {
//   jsHeapSizeLimit : 793000000,
//   usedJSHeapSize  : 60300000,
//   totalJSHeapSize : 97400000
// }
</code></p>

<h3>Specification for <em>window.performance</em> &ndash; &ldquo;<a href="http://www.w3.org/TR/performance-timeline/#sec-window.performance-attribute">interface Performance</a>&rdquo;</h3>

<h4>&ndash;> getting detailed information of in document included ressources</h4>

<p>By using the in <code>window.performance</code> included objects ( timing, navigation, memory ) it is easily possible to receive information of the current document. That can be really helpful to figure out if the particular document has any performance problems. If you want to dive into that in more detail, you probably need a bit more information:</p>

<ul>
<li>why needs the document so much time to finish loading?</li>
<li>which ressource takes the most of the loading time?</li>
<li>can I avoid loading problematic ressource at initial load?</li>
</ul>


<p>The <a href="http://www.w3.org/TR/performance-timeline/">spec</a> for the <em>Performance Timeline</em> describes the <code>interface Performance</code> to have the following functions, which help to figure out exactly, where performance problems can have their origin:</p>

<ul>
<li>getEntries()</li>
<li>getEntriesByType( DOMString entryType )</li>
<li>getEntriesByName( DOMString name, optional DOMString entryType )</li>
</ul>


<p>So let us check it out.</p>

<p><code>getEntries</code> is defined to return a <code>PerformanceEntryList</code>. A <code>PerformanceEntry</code> has to have the following values:</p>

<ul>
<li>name</li>
<li>entryType</li>
<li>startTime</li>
<li>duration</li>
</ul>


<p>That looks pretty handy for me. I created another JavaScript snippet ( can be found <a href="https://gist.github.com/stefanjudis/7399022">here</a> ) to make usage of that. The script fetches all entries by calling <code>getEntries</code> and sorts all the entries by the amount of duration beginning by the entry with the highest duration. The output for example for <a href="http://google.com">google.com</a> looks like that:</p>

<p><img class="center" src="/images/blog/stefanjudis/detailedMetrics.png" width="1091" height="305" title="&lsquo;Sorted PerformanceEntries of google.com&rsquo; &lsquo;Sorted PerformanceEntries of google.com&rsquo;" ></p>

<p>Especially this data can be extremely useful, when dealing with performance bottlenecks. Additionally there is to say, that all the entries have much more included information than the particular interface describes. It is definitely worth a look, if you want to dive deeper into this topic.</p>

<p>Data included in one <code>PerformanceEntry</code>:</p>

<p><code>javascript
console.log( window.performance.getEntries() );
// will log :
// [
//   {
//     connectEnd: 0
//     connectStart: 0
//     domainLookupEnd: 0
//     domainLookupStart: 0
//     duration: 501.9820000161417
//     entryType: "resource"
//     fetchStart: 437.753000005614
//     initiatorType: "script"
//     name: "http://use.typekit.net/axj3cfp.js"
//     redirectEnd: 0
//     redirectStart: 0
//     requestStart: 0
//     responseEnd: 939.7350000217557
//     responseStart: 0
//     secureConnectionStart: 0
//     startTime: 437.753000005614
//   },
//   // much more items
// ]
</code>
I did not check the other to functions, because <code>getEntries</code> totally fits my needs right now, but if you have any good use cases for them, I would really like to know them.</p>

<h3>Sum up &ndash; <em>window.performance</em> FTW</h3>

<p><code>window.performance</code> includes a lot of useful information for creating a good user experience by focussing on performance ( remember &ldquo;Performance is a feature?&rdquo; ). Especially the information about the document in general and particular ressources can become really handy. For me it is clear, that I will use it a lot in the future to get a nice overview of what is really going on the sites I am responsible for.</p>

<p>I hope you will start playing around with it as well and that is it for today. Thx for reading and I hope you enjoyed it. ;)</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[How to handle a bunch of requests using JS promises]]></title>
    <link href="http://4waisenkinder.github.io/blog/2013/11/01/how-promises-work-using-the-example-of-gruntjs-dot-com/"/>
    <updated>2013-11-01T14:00:00+01:00</updated>
    <id>http://4waisenkinder.github.io/blog/2013/11/01/how-promises-work-using-the-example-of-gruntjs-dot-com</id>
    <content type="html"><![CDATA[<p>Yesterday I procrastinated the stuff I wanted (and should) do and spent a lot of time browsing Github and checking what is going on in the JS world. I discoverd a <a href="https://github.com/gruntjs/grunt/issues/926">discussion</a> held by the grunt guys about how Grunt can be promoted better. That was quite a good read and it was really nice to see, that these people try to push Grunt forward to make tooling much better for everyone.</p>

<p>A lot of new issues were created at Github to push the project to the next level. It turns out that the <a href="http://gruntjs.com">Gruntjs.com</a> website is a <a href="https://github.com/gruntjs/gruntjs.com">seperate repository</a> whose code is available on Github (man, I really love that Open Source approach).</p>

<p>What else can I do than checking out the source? I mean the website of Grunt itself must include a lot of best practices and stuff to discover. I forked it and opened in my editor and there they were &ndash; a lot of JS promises&hellip;<!-- more --></p>

<p>Basically I know how promises work, but I have to admit that they still irritate me a bit. It is just another way of thinking and sometimes it takes me a while to understand what is going on when the code in front of me is promises based.</p>

<p>The Grunt website makes usage of the framework <a href="https://npmjs.org/package/q">Q</a>. There are a lot of promises frameworks out there, but Q is with over 10000 downloads a day according to NPM stats not a bad choice. ;)</p>

<p><strong>Handling of requests at <em>/plugins</em> </strong></p>

<p>There is not much functionality in the site (most of it is static content), so the most interessting part of it is probably the <code>plugins</code> site. It fetches all available Grunt plugins from &ldquo;somewhere&rdquo; &ndash; I will explain where it comes from, so keep reading ;) &ndash; and displays them. Let us check, what is going on there.</p>

<p>The fun part starts inside of a file called <code>server.js</code>.</p>

<p>```javascript
// plugin list route
app.get(&lsquo;/plugin-list&rsquo;, function (req, res, next) {
  // get the plugin list
  pluginListEntity.then(function (entity) {</p>

<pre><code>// Allow Cross-origin resource sharing
res.setHeader('Access-Control-Allow-Origin', '*');
res.setHeader('Content-Type', 'application/json');
res.setHeader('ETag', entity.etag);

res.statusCode = 200;
res.end(new Buffer(entity.json));
</code></pre>

<p>  }).fail(function () {</p>

<pre><code>  next();
</code></pre>

<p>  });
});
```</p>

<p>What we see here is a route definition for the <a href="http://expressjs.com/">Express Framework</a>. If you are not familiar with Express it describes itself as follows:</p>

<blockquote><p>Express is a minimal and flexible node.js web application framework, providing a robust set of features for building single and multi-page, and hybrid web applications.</p></blockquote>

<p>It is a quite handy framework and when you are into node.js it is definitely worth a try.</p>

<p>But anyway&hellip; The shown function will be called when a user enters the url <code>/plugin-list</code>. And there it is &ndash; the first promise <code>pluginListEntity</code>. You see that it is a promise, because an included function <code>then</code> gets called with an anonymous callback function. This is the basic pattern when dealing with promises.</p>

<p><strong>Comparing <em>callback</em> and <em>promise</em> way </strong></p>

<p>Particular functions return a promise object instead of the wished data. This becomes quite handy when you have to deal with asynchronous operations, because the &ldquo;normal&rdquo; way would be to implement a callback function that deals with wished data, when the operation succeeded.</p>

<p>```javascript
var result;</p>

<p>// callback way
asyncOperation( function( data ) {
  result = data;
} );</p>

<p>// promise way
result = asyncOperation();
result.then( function( data ) {
  result = data;
} );</p>

<p>```</p>

<p><strong>Creating <em>pluginListEntity</em> </strong></p>

<p>So far so good &ndash; let us check where this variable <code>pluginListEntity</code> seen in the first code block comes from. It is basically the result of a function called <code>getPluginListEntity</code>.</p>

<p>```javascript
function getPluginListEntity() {
  // create new promise
  var deferred = Q.defer();</p>

<p>  // oh, another promise&hellip;
  gruntPlugins.fetchPluginList().then(</p>

<pre><code>function ( pluginList ) {
  var entity = {
    json:JSON.stringify( pluginList )
  };
  var shasum = crypto.createHash( 'sha1' );
  shasum.update( entity.json );
  entity.etag = shasum.digest( 'hex' );
  deferred.resolve( entity );

  // update the entity
  pluginListEntity = deferred.promise;
} ).fail( function ( e ) {
  deferred.reject( e );
} );
</code></pre>

<p>  // return no values but rather a promise
  return deferred.promise;
}</p>

<p>// set pluginListEntitry at initial start
var pluginListEntity = getPluginListEntity();</p>

<p>// Update function to keep everything fresh
setInterval(function () {
  getPluginListEntity();
}, UPDATE_INTERVAL_IN_SECONDS * 1000);</p>

<p>```</p>

<p>What we see here is the actual &ldquo;kick off&rdquo; functionality for the plugin fetch process. It gets called at the initial start of the Express application. The most important thing is, that the variable <code>pluginListEntity</code> is set with a promise at initial start by calling <code>getPluginListEntity</code>.</p>

<p><code>getPluginListEntity</code> does two things when called. First of all it creates a new promise and returns it. Additionally it refreshes <code>pluginListEntity</code> with the created promise. That is actually really smart, because this way it is possible to update it automatically using <code>setInterval</code> constantly which is absolutely necessary, because <a href="http://gruntjs.com">gruntjs.com</a> should be up to date all the time.</p>

<p>But wait&hellip; you may have noticed that there is more promises stuff going on inside of <code>getPluginListEntity</code>. This line <code>gruntPlugins.fetchPluginList.then( ... )</code> hints to another object, that does the actual fetching job for the application and obviously return another promise.</p>

<p>Let us check it out.</p>

<p><strong>Fetching data from NPM</strong></p>

<p>```javascript
function fetchPluginList() {
  // return a promise to use it in &lsquo;getPluginListEntitry&rsquo;
  return Q.fcall( function fetchPluginList() {</p>

<pre><code>var deferred = Q.defer();

// fetch all grunt plugins

return deferred.promise;
</code></pre>

<p>  } ).then( function getPlugin( list ) {</p>

<pre><code>  var results = _.map( list, function( item ) {
    var deferred = Q.defer();

    // fetch plugin information for each plugin

    return deferred.promise;
  } );
  return Q.all( results );
</code></pre>

<p>  } ).then( function getDownloads( results ) {</p>

<pre><code>  var resultsWithDownloads = _.map( results, function( result ) {
    var deferred = Q.defer();

    // fetch download statistics for each plugin

    return deferred.promise;
  } );

  return Q.all( resultsWithDownloads );
</code></pre>

<p>  } );
}
```
BAM!!! That is it &ndash; much more promises &ndash;, but let us break it into little pieces. :)</p>

<p>The needed functionality consists of really a lot of requests made to a <a href="http://couchdb.apache.org/">CouchDB</a>. NPM stores all its plugin inside of a CouchDB available at <a href="http://isaacs.iriscouch.com">http://isaacs.iriscouch.com</a>.</p>

<p>To wrap up what is needed to do:</p>

<ul>
<li>Fetch all plugins from database &lsquo;reqistry&rsquo; that include keyword &lsquo;gruntplugin&rsquo; &ndash; <strong> one call </strong></li>
<li>Fetch plugin details of all fetched grunt plugins from database &lsquo;registry&rsquo; &ndash; <strong> * calls </strong></li>
<li>Fetch download statistics of all fetched plugin &ndash; <strong> * calls </strong></li>
</ul>


<p>Just to make sure you understand to advantage of that, here is the callback way of doing it:</p>

<p>```javascript</p>

<p>fetchPluginList( function ( plugins ) {
  getPlugin( plugins, function( pluginsWithDetails ) {</p>

<pre><code>getDownloads( pluginsWithDetails, function( pluginsWithDownloadStats ) {
  // do something with 'pluginsWithDownladStats'
} );
</code></pre>

<p>  } );
} );
```</p>

<p>Doing it like that is less readable and it is a perfect example of the so called &lsquo;callback hell&rsquo;. Additionally dealing with a lot asynchronous requests can be really tricky and keeping it in sync to call the next callback is not so easy like it sounds.</p>

<p>So what is really going on? The function <code>fetchPluginList</code> makes usage of <code>Q.fcall</code>. This gives us the possibility to return a new promise by this function. Following is a simplified version of this approach to make it clearer.</p>

<p><strong>Example for <em>Q.fcall</em> </strong></p>

<p>```javascript
var Q = require( &lsquo;q&rsquo; );</p>

<p>function getPromise () {
  return Q.fcall( function () {</p>

<pre><code>return 10;
</code></pre>

<p>  } ).then( function( value ) {</p>

<pre><code>return value * 2;
</code></pre>

<p>  } ).then( function( value ) {</p>

<pre><code>return value * 3;
</code></pre>

<p>  } );
}</p>

<p>var a = getPromise();</p>

<p>a.then( function( returnValue) {
  console.log( returnValue ); // will log &lsquo;60&rsquo;
});
```</p>

<p>This way we are able to stick a lot of functions together and avoid creating callback trees. The end result of a deep nested callback is then easily accessible using the <code>then</code> function of the particular promise.</p>

<p><strong>Example of <em>Q.defer</em> with one request</strong></p>

<p>Now starts the tricky part &ndash; in each step ( remember <code>fetchAll</code>, <code>fetchDetails</code>, <code>fetchDownloads</code>? ;) ) will be made an asynchronous request and this request is handled by &hellip;? Yeah, you are right &ndash; another promise.</p>

<p>Here is the complete first step to fetch all grunt plugins including one call to the CouchDB:</p>

<p>```javascript
function fetchPluginList() {
  // get new deffered object
  var deferred = Q.defer();
  var keyword = &lsquo;gruntplugin&rsquo;;
  var url = &lsquo;<a href="http://isaacs.iriscouch.com/registry/_design/app/_view/byKeyword?startkey=">http://isaacs.iriscouch.com/registry/_design/app/_view/byKeyword?startkey=</a>[%22&rsquo; +</p>

<pre><code>keyword + '%22]&amp;endkey=[%22' + keyword + '%22,{}]&amp;group_level=3';
</code></pre>

<p>  // fetch all plugins
  request(</p>

<pre><code>{ url : url, json : true },
function handlePluginList( error, response, body ) {
  if( !error &amp;&amp; response.statusCode === 200 ) {
    // yeah - resolve it successfully
    deferred.resolve( body.rows );
  } else {
    // reject it in case of error
    deferred.reject( new Error( error ) );
  }
}
</code></pre>

<p>  );</p>

<p>  // return no value but rather the deffered
  return deferred.promise;
}
```</p>

<p>A new promise is created by using <code>Q.defer</code>. <code>Q.defer</code> acts as an interface when you have to deal with callback based functions ( like <code>request</code> in this case ) and you want to do it the promise way. All you have to do is getting a new defer object by calling <code>Q.defer()</code> and then resolving/rejecting it inside of the asynchronous callback function. The response of the request is then easily accessible be calling <code>then</code>.</p>

<p>```javascript
var allPlugins = fetchPluginList();</p>

<p>allPlugins.then( function( plugins ) {
  doSomething( plugins );
} );
```</p>

<p><strong>Example of <em>Q.defer</em> with multiple request</strong></p>

<p>If the first step is clear to you ( if not feel free to comment or ping me on <a href="twitter.com/stefanjudis">Twitter</a> ) let us check the second and third, because there is a bit more magic going on in it.</p>

<p>```javascript
function getPlugin( list ) {
  // create array full of promises
  var results = _.map( list, function( item ) {</p>

<pre><code>var deferred = Q.defer();
var name = item.key[ 1 ];
var url = 'http://isaacs.iriscouch.com/registry/' + name;

// fetch plugin information
request(
  { url : url, json: true },
  function handlePlugin( error, response, body ) {
    if( !error &amp;&amp; response.statusCode === 200 ) {
      // yeah - resolve promise for this plugin
      deferred.resolve( condensePlugin( body ) );
    } else {
      // reject promise for this plugin
      deferred.reject( new Error( error ) );
    }
  }
);
return deferred.promise;
</code></pre>

<p>  } );
  // &lsquo;results&rsquo; is an Array containing a lot of promises
  // &ndash;> returns a new promise that will be resolved
  // &ndash;> when all promises inside of results succeeded
  return Q.all(results);
}
```</p>

<p>This step does basically the same as the first step, but makes a lot of more requests. For each plugin a seperate request has to be made to fetch the plugin details. The function will be executed with an Array containing all information that was fetched in first call to get all grunt plugins.</p>

<p>This Array ( <code>list</code> ) will be transformed using the <code>map</code> function of <a href="http://lodash.com/">lo-dash</a>. Each item is replaced by a new deffered object which will be resolved, when the request for plugin information succeeded. Q provides the really nice function <code>Q.all</code> which gives us a lot of power to handle multiple requests.</p>

<p><code>Q.all</code> will return a new promise which will be resolved when all promises inside of the handed in Array will be resolved and enriched with detail information.</p>

<p>```javascript
// response of first call to CouchDB
var list = [ {
  key : [ &lsquo;something&rsquo;, &lsquo;pluginName1&rsquo; ]
}, {
  key : [ &lsquo;something&rsquo;, &lsquo;pluginName2&rsquo; ]
} ];</p>

<p>var allPluginsWithDetails = getPlugin( list );</p>

<p>// do something with plugins when they were
// enriched with detail information
allPluginsWithDetails.then( function( plugins ) {
  doSomething( plugins );
} );
```</p>

<p><strong>Sticking promises together</strong></p>

<p>Now, we have created a lot of promises, so let us have another look where we started with a more detailed look and lots of comments. ;)</p>

<p>```javascript
function fetchPluginList() {
  // return a promise
  return Q.fcall( function fetchPluginList() {</p>

<pre><code>// fetch all grunt plugins with help of a deferred object
var deferred = Q.defer();
var keyword = 'gruntplugin';
var url = 'http://isaacs.iriscouch.com/registry/_design/app/_view/byKeyword?startkey=[%22' +
  keyword + '%22]&amp;endkey=[%22' + keyword + '%22,{}]&amp;group_level=3';
// fetch all plugins
request(
  { url : url, json : true },
  function handlePluginList( error, response, body ) {
    if( !error &amp;&amp; response.statusCode === 200 ) {
      // resolve deferred with response
      deferred.resolve( body.rows );
    } else {
      deferred.reject( new Error( error ) );
    }
  }
);
return deferred.promise;
</code></pre>

<p>  } )
  // executed when the promise returned by &lsquo;fetchPluginList&rsquo; was resolved
  // argument &lsquo;list&rsquo; === &lsquo;body.rows&rsquo; in line 15
  .then( function getPlugin( list ) {</p>

<pre><code>// transform Array with data to Array with promises
var results = _.map( list, function( item ) {
  var deferred = Q.defer();
  var name = item.key[ 1 ];
  var url = 'http://isaacs.iriscouch.com/registry/' + name;
  // fetch plugin information
  request(
    { url : url, json : true },
    function handlePlugin( error, response, body ) {
      if( !error &amp;&amp; response.statusCode === 200 ) {
        // resolve deferred with response
        deferred.resolve( condensePlugin( body ) );
      } else {
        deferred.reject( new Error( error ) );
      }
    }
  );
  return deferred.promise;
} );
// return a promise that will be resolved
// when all promises inside of 'results' are resolved
return Q.all( results );
</code></pre>

<p>  })
  // executed when the promise returned by &lsquo;getPlugin was resolved&rsquo;
  // argument &lsquo;results&rsquo; is an Array which now consists of plugin data
  // with enriched plugin information
  .then( function getDownloads( results ) {</p>

<pre><code>// transform Array with data to Array with promises
var resultsWithDownloads = _.map( results, function( result ) {
  var deferred = Q.defer();

  var today = Date.today();
  var oneMonthAgo = today.clone().add( { months : -1 } );

  var startKey = JSON.stringify( [ result.name, oneMonthAgo.toYMD() ] );
  var endKey = JSON.stringify( [ result.name, today.toYMD() ] );

  var url = 'http://isaacs.iriscouch.com/downloads/_design/app/_view/pkg?startkey=' + startKey + '&amp;' + 'endkey=' + endKey;

  // fetch download information
  request(
    { url : url, json : true },
    function handlePlugin( error, response, body ) {
      if (!error &amp;&amp; response.statusCode === 200) {
        if ( body.rows &amp;&amp; body.rows.length ) {
          result.downloads = body.rows[ 0 ].value;
        } else {
          result.downloads = 'N/A';
        }

        // resolve deffered with enriched result
        deferred.resolve( result );
      } else {
        deferred.reject( new Error( error ) );
      }
    }
  );
  return deferred.promise;
});

// return a promise the will be resolved
// when all promises inside of 'results' are resolved
return Q.all( resultsWithDownloads );
</code></pre>

<p>  });
}</p>

<p>var plugins = fetchPluginList();</p>

<p>// working with result when all requests are down
// argument &lsquo;resultsWithDownloads&rsquo; is result of &lsquo;Q.all&rsquo; at line 89
plugins.then( function( resultsWithDownloads ) {
  doSomething( resultsWithDownloads );
} );
```</p>

<p><strong>Conclusion</strong></p>

<p>The <code>fetchPluginList</code> function looks first really heavy, but when you understood the principle ( looking at you <a href="https://twitter.com/TeixeiraPedro">@TeixeiraPedro</a> ;) ) the code has much more structure and is much easier to read. Especially lots of asynchronous operations that has to be in sync at some point loose complexity by using <code>Q.all</code>, which absolutely blew my mind.</p>

<p>For me it is clear, that I will structure next projects with lots of requests definitely promises based like the Grunt guys do to make my life easier.</p>

<p>And that is it. I hope you enjoyed it and thanks. :)</p>
]]></content>
  </entry>
  
</feed>
