<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: grunt | 4waisenkinder]]></title>
  <link href="http://4waisenkinder.github.io/blog/categories/grunt/atom.xml" rel="self"/>
  <link href="http://4waisenkinder.github.io/"/>
  <updated>2014-10-19T00:22:12+02:00</updated>
  <id>http://4waisenkinder.github.io/</id>
  <author>
    <name><![CDATA[Stefan Judis, Patrick Venetz, AndrÃ© Kussmann, Bernhard Weisshuhn]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[NPM 2.0 and how it helps avoiding global dependencies]]></title>
    <link href="http://4waisenkinder.github.io/blog/2014/10/18/npm-2-dot-0-and-the-much-better-star-npm-run-star-command/"/>
    <updated>2014-10-18T20:50:00+02:00</updated>
    <id>http://4waisenkinder.github.io/blog/2014/10/18/npm-2-dot-0-and-the-much-better-star-npm-run-star-command</id>
    <content type="html"><![CDATA[<p>Today I was listening to the NodeUp <a href="http://nodeup.com/seventy">episode 70</a>, which is all about the <a href="https://www.npmjs.org/package/npm">npm command line client</a>. And there is tons of useful information in this episode. It is all about where npm is at the moment and what the plans are for the future. Especially the recent changes inside of the command line client are a heavy discussed topic and I highly recommend to listen to this episode, when you are dealing with <a href="https://www.npmjs.org/">npm</a> on a daily basis.</p>

<p>One thing that is mentioned and really gets me excited is the change regarding the functionality to run scripts via npm which was introduced in the latest major version of npm &ndash; <a href="http://blog.npmjs.org/post/98131109725/npm-2-0-0">npm@2.0.0</a>.<!-- more --></p>

<p>So let us recover how to run scripts via npm, have a loot at what has changed in version 2.0.0 and check why this is such a big deal.</p>

<h3>Running scripts via npm</h3>

<p>The configuration file for any project based on node and npm is the <code>package.json</code>. This file includes meta information like name, version and author of the depending project, but also defines all dependencies, which need to be installed via calling <code>npm install</code>. If you are not familiar with this file, there is an excellent <a href="http://browsenpm.org/package.json">interative cheat sheet</a> out there and you may want to check it out.</p>

<p>One thing to notice is that you can also run scripts and execute commands via npm. To do so you can define an optional object as the <code>scripts</code> property inside of the <code>package.json</code> and define your wished commands. <a href="https://twitter.com/substack">@substack</a> wrote a <a href="http://substack.net/task_automation_with_npm_run">great article</a> about how to use this functionality extensively.</p>

<p>There is not much magic about this.</p>

<p>```json
{
  &ldquo;name&rdquo;: &ldquo;blog-npm-run-scripts&rdquo;,
  &ldquo;version&rdquo;: &ldquo;1.0.0&rdquo;,
  &ldquo;description&rdquo;: &ldquo;Show of the new npm run command&rdquo;,
  &ldquo;scripts&rdquo;: {</p>

<pre><code>"echo" : "echo \"Hello world\""
</code></pre>

<p>  }
}
```</p>

<p>And then you can use <code>npm run</code> to kick it off &ndash; pretty straight forward.</p>

<p>```bash</p>

<blockquote><p>npm run echo</p>

<p><a href="&#109;&#97;&#x69;&#x6c;&#116;&#111;&#58;&#98;&#108;&#111;&#103;&#45;&#x6e;&#x70;&#x6d;&#45;&#114;&#117;&#x6e;&#45;&#115;&#99;&#114;&#105;&#112;&#116;&#115;&#64;&#49;&#x2e;&#x30;&#46;&#48;">&#x62;&#x6c;&#111;&#x67;&#x2d;&#110;&#112;&#109;&#x2d;&#114;&#x75;&#110;&#x2d;&#x73;&#99;&#x72;&#105;&#112;&#x74;&#x73;&#64;&#49;&#x2e;&#x30;&#46;&#x30;</a> echo /Users/stefan/Sites/blog-npm-run-scripts
echo &ldquo;Hello world&rdquo;</p></blockquote>

<p>Hello world
```</p>

<p>This functionality had one downside so far. It was not able to pass arguments to the <code>npm run</code> command. And that is why you had to hardcode the arguments, which made the whole thing less flexible and harder to use. The only solution for having similar commands with different arguments was to define specific named scripts inside of the <code>package.json</code> including different arguments.</p>

<p>```json
{
  &ldquo;name&rdquo;: &ldquo;blog-npm-run-scripts&rdquo;,
  &ldquo;version&rdquo;: &ldquo;1.0.0&rdquo;,
  &ldquo;description&rdquo;: &ldquo;Show of the new npm run command&rdquo;,
  &ldquo;scripts&rdquo;: {</p>

<pre><code>"echo_helloWorld" : "echo \"Hello world\"",
"echo_foo" : "echo \"Foo\""
</code></pre>

<p>  }
}
```</p>

<h3>Passing arguments to <code>npm run</code></h3>

<p>Since version 2.0.0 it is now possible to pass arguments to the scripts defined in the <code>package.json</code>. And this is a big improvement on flexibility and makes the whole thing much more powerful. The <code>package.json</code> above including two scripts running the <code>echo</code> command can be combined into one and can accept the wished arguments.</p>

<p>```json
{
  &ldquo;name&rdquo;: &ldquo;blog-npm-run-scripts&rdquo;,
  &ldquo;version&rdquo;: &ldquo;1.0.0&rdquo;,
  &ldquo;description&rdquo;: &ldquo;Show of the new npm run command&rdquo;,
  &ldquo;scripts&rdquo;: {</p>

<pre><code>"echo" : "echo"
</code></pre>

<p>  }
}
```</p>

<p>The syntax to pass arguments to the defined scripts is as follows. You have to use <code>npm run</code> and then devided by two dashes(<code>--</code>) you can pass any arguments you like to the command.</p>

<p>```bash</p>

<blockquote><p>npm run echo &mdash; &ldquo;hello world&rdquo;</p>

<p><a href="&#x6d;&#97;&#x69;&#x6c;&#116;&#111;&#x3a;&#98;&#x6c;&#111;&#x67;&#x2d;&#110;&#112;&#x6d;&#45;&#114;&#117;&#x6e;&#45;&#x73;&#99;&#114;&#x69;&#x70;&#x74;&#x73;&#64;&#49;&#x2e;&#48;&#x2e;&#x30;">&#x62;&#108;&#x6f;&#x67;&#x2d;&#110;&#112;&#109;&#x2d;&#114;&#117;&#x6e;&#x2d;&#115;&#x63;&#114;&#105;&#x70;&#x74;&#115;&#x40;&#49;&#x2e;&#48;&#x2e;&#x30;</a> echo /Users/stefan/Sites/blog-npm-run-scripts
echo &ldquo;hello world&rdquo;</p></blockquote>

<p>hello world
```</p>

<h3>Setting up Grunt and gulp without the global dependency</h3>

<p>Using the <code>echo</code> command might not seem really useful, but we will come to a much more useful example now. I am doing mostly frontend development and that is why in almost every project that I work on either <a href="http://gruntjs.com/">Grunt</a> or <a href="http://gulpjs.com/">gulp</a> is included. Grunt and gulp are task runners, that come with huge plugin registries to help automate any task you can think of.</p>

<p>When you check the getting started guide of both projects you will find the instruction to install them globally.</p>

<p>```bash</p>

<h1>install gulp globally</h1>

<p>$ npm install -g gulp</p>

<h1>install grunt globally</h1>

<p>$ npm install -g grunt-cli
```</p>

<p>This is absolutely fine when you are working alone and these tools are only supposed to be executed on your machine. But when you work together with other colleagues on a project or you process includes a <a href="http://www.martinfowler.com/articles/continuousIntegration.html">continuous integration</a> system, then every global dependency can be quite troublesome. It simply moves the entry barrier a bit higher and increases the complexity to get everything up and running.</p>

<p>So let us have a look how to avoid that. First step is to install the needed modules in our project and not globally anymore.</p>

<p>```</p>

<h1>install gulp in the project</h1>

<p>$ npm install gulp</p>

<h1>install grunt in the project</h1>

<p>$ npm install grunt-cli
```</p>

<p>By calling <code>npm install</code> npm will install the module and depending, if it has the <a href="http://browsenpm.org/package.json#bin"><code>bin</code></a> property defined, it will create a <code>.bin</code> folder inside of the <code>node_modules</code> folder. This means that this folder will include all defined command line interfaces of your installed modules. In this case the <code>.bin</code> folder includes the binaries <code>gulp</code> and <code>grunt</code>.</p>

<p>```
node_modules
  |_  .bin</p>

<pre><code>  |_ gulp
  |_ grunt
</code></pre>

<p>```</p>

<p>If you want to use either Grunt or gulp via the <code>npm run</code> command now, you can set them up inside of your <code>package.json</code>.</p>

<p>```json
{
  &ldquo;name&rdquo;: &ldquo;blog-npm-run-scripts&rdquo;,
  &ldquo;version&rdquo;: &ldquo;1.0.0&rdquo;,
  &ldquo;description&rdquo;: &ldquo;Show of the new npm run command&rdquo;,
  &ldquo;scripts&rdquo;: {</p>

<pre><code>"gulp" : "./node_modules/bin/gulp",
"grunt" : "./node_modules/bin/grunt"
</code></pre>

<p>  }
}
```</p>

<p>And then you can easily run your defined tasks with npm.</p>

<p>```bash</p>

<h1>run &lsquo;dev&rsquo; task with in project install grunt</h1>

<p>$ npm run grunt &mdash; dev</p>

<h1>run &lsquo;dev&rsquo; task with in project install gulp</h1>

<p>$ npm run gulp &mdash; dev
```</p>

<p>To make it even a bit nicer npm provides a nifty feature, when setting up custom scripts.</p>

<blockquote><p>Packages that contain a command line interface and are installed locally can be called without a relative path. So instead of doing ./node-modules/.bin/mocha you can directly call mocha.</p></blockquote>

<p>This means, we can make the <code>package.json</code> a bit cleaner.</p>

<p>```json
{
  &ldquo;name&rdquo;: &ldquo;blog-npm-run-scripts&rdquo;,
  &ldquo;version&rdquo;: &ldquo;1.0.0&rdquo;,
  &ldquo;description&rdquo;: &ldquo;Show of the new npm run command&rdquo;,
  &ldquo;scripts&rdquo;: {</p>

<pre><code>"gulp" : "gulp",
"grunt" : "grunt"
</code></pre>

<p>  }
}
```</p>

<p><strong>For me this is pure awesomeness!</strong></p>

<p>It means not only dropping a global dependency but rather simplifying the whole work and setup flow.</p>

<p>Getting everything up and running is not</p>

<ul>
<li>installing node (which will install npm also)</li>
<li>installing dependencies</li>
<li>installing global dependencies</li>
<li>and run e.g. Grunt</li>
</ul>


<p>anymore.</p>

<p>It becomes</p>

<ul>
<li>installing node</li>
<li>installing dependencies</li>
<li>and run everything via npm scripts</li>
</ul>


<p>only.</p>

<p>If you want to play around with this I set up an <a href="https://github.com/stefanjudis/npm2-run-scripts-tryout">example repository</a>, which includes Grunt and gulp ready to use without any global installation.</p>

<h3>Sum up</h3>

<p>For me it is clear, that I will drop any project required global dependency that can be installed via npm in the future, because having less global dependencies just means less troubles and quicker setup.</p>

<p>And that is it for now and if you have any comments or ideas on that, please let me know. I hope you enjoyed it. :)</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[How to handle a bunch of requests using JS promises]]></title>
    <link href="http://4waisenkinder.github.io/blog/2013/11/01/how-promises-work-using-the-example-of-gruntjs-dot-com/"/>
    <updated>2013-11-01T14:00:00+01:00</updated>
    <id>http://4waisenkinder.github.io/blog/2013/11/01/how-promises-work-using-the-example-of-gruntjs-dot-com</id>
    <content type="html"><![CDATA[<p>Yesterday I procrastinated the stuff I wanted (and should) do and spent a lot of time browsing Github and checking what is going on in the JS world. I discoverd a <a href="https://github.com/gruntjs/grunt/issues/926">discussion</a> held by the grunt guys about how Grunt can be promoted better. That was quite a good read and it was really nice to see, that these people try to push Grunt forward to make tooling much better for everyone.</p>

<p>A lot of new issues were created at Github to push the project to the next level. It turns out that the <a href="http://gruntjs.com">Gruntjs.com</a> website is a <a href="https://github.com/gruntjs/gruntjs.com">seperate repository</a> whose code is available on Github (man, I really love that Open Source approach).</p>

<p>What else can I do than checking out the source? I mean the website of Grunt itself must include a lot of best practices and stuff to discover. I forked it and opened in my editor and there they were &ndash; a lot of JS promises&hellip;<!-- more --></p>

<p>Basically I know how promises work, but I have to admit that they still irritate me a bit. It is just another way of thinking and sometimes it takes me a while to understand what is going on when the code in front of me is promises based.</p>

<p>The Grunt website makes usage of the framework <a href="https://npmjs.org/package/q">Q</a>. There are a lot of promises frameworks out there, but Q is with over 10000 downloads a day according to NPM stats not a bad choice. ;)</p>

<p><strong>Handling of requests at <em>/plugins</em> </strong></p>

<p>There is not much functionality in the site (most of it is static content), so the most interessting part of it is probably the <code>plugins</code> site. It fetches all available Grunt plugins from &ldquo;somewhere&rdquo; &ndash; I will explain where it comes from, so keep reading ;) &ndash; and displays them. Let us check, what is going on there.</p>

<p>The fun part starts inside of a file called <code>server.js</code>.</p>

<p>```javascript
// plugin list route
app.get(&lsquo;/plugin-list&rsquo;, function (req, res, next) {
  // get the plugin list
  pluginListEntity.then(function (entity) {</p>

<pre><code>// Allow Cross-origin resource sharing
res.setHeader('Access-Control-Allow-Origin', '*');
res.setHeader('Content-Type', 'application/json');
res.setHeader('ETag', entity.etag);

res.statusCode = 200;
res.end(new Buffer(entity.json));
</code></pre>

<p>  }).fail(function () {</p>

<pre><code>  next();
</code></pre>

<p>  });
});
```</p>

<p>What we see here is a route definition for the <a href="http://expressjs.com/">Express Framework</a>. If you are not familiar with Express it describes itself as follows:</p>

<blockquote><p>Express is a minimal and flexible node.js web application framework, providing a robust set of features for building single and multi-page, and hybrid web applications.</p></blockquote>

<p>It is a quite handy framework and when you are into node.js it is definitely worth a try.</p>

<p>But anyway&hellip; The shown function will be called when a user enters the url <code>/plugin-list</code>. And there it is &ndash; the first promise <code>pluginListEntity</code>. You see that it is a promise, because an included function <code>then</code> gets called with an anonymous callback function. This is the basic pattern when dealing with promises.</p>

<p><strong>Comparing <em>callback</em> and <em>promise</em> way </strong></p>

<p>Particular functions return a promise object instead of the wished data. This becomes quite handy when you have to deal with asynchronous operations, because the &ldquo;normal&rdquo; way would be to implement a callback function that deals with wished data, when the operation succeeded.</p>

<p>```javascript
var result;</p>

<p>// callback way
asyncOperation( function( data ) {
  result = data;
} );</p>

<p>// promise way
result = asyncOperation();
result.then( function( data ) {
  result = data;
} );</p>

<p>```</p>

<p><strong>Creating <em>pluginListEntity</em> </strong></p>

<p>So far so good &ndash; let us check where this variable <code>pluginListEntity</code> seen in the first code block comes from. It is basically the result of a function called <code>getPluginListEntity</code>.</p>

<p>```javascript
function getPluginListEntity() {
  // create new promise
  var deferred = Q.defer();</p>

<p>  // oh, another promise&hellip;
  gruntPlugins.fetchPluginList().then(</p>

<pre><code>function ( pluginList ) {
  var entity = {
    json:JSON.stringify( pluginList )
  };
  var shasum = crypto.createHash( 'sha1' );
  shasum.update( entity.json );
  entity.etag = shasum.digest( 'hex' );
  deferred.resolve( entity );

  // update the entity
  pluginListEntity = deferred.promise;
} ).fail( function ( e ) {
  deferred.reject( e );
} );
</code></pre>

<p>  // return no values but rather a promise
  return deferred.promise;
}</p>

<p>// set pluginListEntitry at initial start
var pluginListEntity = getPluginListEntity();</p>

<p>// Update function to keep everything fresh
setInterval(function () {
  getPluginListEntity();
}, UPDATE_INTERVAL_IN_SECONDS * 1000);</p>

<p>```</p>

<p>What we see here is the actual &ldquo;kick off&rdquo; functionality for the plugin fetch process. It gets called at the initial start of the Express application. The most important thing is, that the variable <code>pluginListEntity</code> is set with a promise at initial start by calling <code>getPluginListEntity</code>.</p>

<p><code>getPluginListEntity</code> does two things when called. First of all it creates a new promise and returns it. Additionally it refreshes <code>pluginListEntity</code> with the created promise. That is actually really smart, because this way it is possible to update it automatically using <code>setInterval</code> constantly which is absolutely necessary, because <a href="http://gruntjs.com">gruntjs.com</a> should be up to date all the time.</p>

<p>But wait&hellip; you may have noticed that there is more promises stuff going on inside of <code>getPluginListEntity</code>. This line <code>gruntPlugins.fetchPluginList.then( ... )</code> hints to another object, that does the actual fetching job for the application and obviously return another promise.</p>

<p>Let us check it out.</p>

<p><strong>Fetching data from NPM</strong></p>

<p>```javascript
function fetchPluginList() {
  // return a promise to use it in &lsquo;getPluginListEntitry&rsquo;
  return Q.fcall( function fetchPluginList() {</p>

<pre><code>var deferred = Q.defer();

// fetch all grunt plugins

return deferred.promise;
</code></pre>

<p>  } ).then( function getPlugin( list ) {</p>

<pre><code>  var results = _.map( list, function( item ) {
    var deferred = Q.defer();

    // fetch plugin information for each plugin

    return deferred.promise;
  } );
  return Q.all( results );
</code></pre>

<p>  } ).then( function getDownloads( results ) {</p>

<pre><code>  var resultsWithDownloads = _.map( results, function( result ) {
    var deferred = Q.defer();

    // fetch download statistics for each plugin

    return deferred.promise;
  } );

  return Q.all( resultsWithDownloads );
</code></pre>

<p>  } );
}
```
BAM!!! That is it &ndash; much more promises &ndash;, but let us break it into little pieces. :)</p>

<p>The needed functionality consists of really a lot of requests made to a <a href="http://couchdb.apache.org/">CouchDB</a>. NPM stores all its plugin inside of a CouchDB available at <a href="http://isaacs.iriscouch.com">http://isaacs.iriscouch.com</a>.</p>

<p>To wrap up what is needed to do:</p>

<ul>
<li>Fetch all plugins from database &lsquo;reqistry&rsquo; that include keyword &lsquo;gruntplugin&rsquo; &ndash; <strong> one call </strong></li>
<li>Fetch plugin details of all fetched grunt plugins from database &lsquo;registry&rsquo; &ndash; <strong> * calls </strong></li>
<li>Fetch download statistics of all fetched plugin &ndash; <strong> * calls </strong></li>
</ul>


<p>Just to make sure you understand to advantage of that, here is the callback way of doing it:</p>

<p>```javascript</p>

<p>fetchPluginList( function ( plugins ) {
  getPlugin( plugins, function( pluginsWithDetails ) {</p>

<pre><code>getDownloads( pluginsWithDetails, function( pluginsWithDownloadStats ) {
  // do something with 'pluginsWithDownladStats'
} );
</code></pre>

<p>  } );
} );
```</p>

<p>Doing it like that is less readable and it is a perfect example of the so called &lsquo;callback hell&rsquo;. Additionally dealing with a lot asynchronous requests can be really tricky and keeping it in sync to call the next callback is not so easy like it sounds.</p>

<p>So what is really going on? The function <code>fetchPluginList</code> makes usage of <code>Q.fcall</code>. This gives us the possibility to return a new promise by this function. Following is a simplified version of this approach to make it clearer.</p>

<p><strong>Example for <em>Q.fcall</em> </strong></p>

<p>```javascript
var Q = require( &lsquo;q&rsquo; );</p>

<p>function getPromise () {
  return Q.fcall( function () {</p>

<pre><code>return 10;
</code></pre>

<p>  } ).then( function( value ) {</p>

<pre><code>return value * 2;
</code></pre>

<p>  } ).then( function( value ) {</p>

<pre><code>return value * 3;
</code></pre>

<p>  } );
}</p>

<p>var a = getPromise();</p>

<p>a.then( function( returnValue) {
  console.log( returnValue ); // will log &lsquo;60&rsquo;
});
```</p>

<p>This way we are able to stick a lot of functions together and avoid creating callback trees. The end result of a deep nested callback is then easily accessible using the <code>then</code> function of the particular promise.</p>

<p><strong>Example of <em>Q.defer</em> with one request</strong></p>

<p>Now starts the tricky part &ndash; in each step ( remember <code>fetchAll</code>, <code>fetchDetails</code>, <code>fetchDownloads</code>? ;) ) will be made an asynchronous request and this request is handled by &hellip;? Yeah, you are right &ndash; another promise.</p>

<p>Here is the complete first step to fetch all grunt plugins including one call to the CouchDB:</p>

<p>```javascript
function fetchPluginList() {
  // get new deffered object
  var deferred = Q.defer();
  var keyword = &lsquo;gruntplugin&rsquo;;
  var url = &lsquo;<a href="http://isaacs.iriscouch.com/registry/_design/app/_view/byKeyword?startkey=">http://isaacs.iriscouch.com/registry/_design/app/_view/byKeyword?startkey=</a>[%22&rsquo; +</p>

<pre><code>keyword + '%22]&amp;endkey=[%22' + keyword + '%22,{}]&amp;group_level=3';
</code></pre>

<p>  // fetch all plugins
  request(</p>

<pre><code>{ url : url, json : true },
function handlePluginList( error, response, body ) {
  if( !error &amp;&amp; response.statusCode === 200 ) {
    // yeah - resolve it successfully
    deferred.resolve( body.rows );
  } else {
    // reject it in case of error
    deferred.reject( new Error( error ) );
  }
}
</code></pre>

<p>  );</p>

<p>  // return no value but rather the deffered
  return deferred.promise;
}
```</p>

<p>A new promise is created by using <code>Q.defer</code>. <code>Q.defer</code> acts as an interface when you have to deal with callback based functions ( like <code>request</code> in this case ) and you want to do it the promise way. All you have to do is getting a new defer object by calling <code>Q.defer()</code> and then resolving/rejecting it inside of the asynchronous callback function. The response of the request is then easily accessible be calling <code>then</code>.</p>

<p>```javascript
var allPlugins = fetchPluginList();</p>

<p>allPlugins.then( function( plugins ) {
  doSomething( plugins );
} );
```</p>

<p><strong>Example of <em>Q.defer</em> with multiple request</strong></p>

<p>If the first step is clear to you ( if not feel free to comment or ping me on <a href="twitter.com/stefanjudis">Twitter</a> ) let us check the second and third, because there is a bit more magic going on in it.</p>

<p>```javascript
function getPlugin( list ) {
  // create array full of promises
  var results = _.map( list, function( item ) {</p>

<pre><code>var deferred = Q.defer();
var name = item.key[ 1 ];
var url = 'http://isaacs.iriscouch.com/registry/' + name;

// fetch plugin information
request(
  { url : url, json: true },
  function handlePlugin( error, response, body ) {
    if( !error &amp;&amp; response.statusCode === 200 ) {
      // yeah - resolve promise for this plugin
      deferred.resolve( condensePlugin( body ) );
    } else {
      // reject promise for this plugin
      deferred.reject( new Error( error ) );
    }
  }
);
return deferred.promise;
</code></pre>

<p>  } );
  // &lsquo;results&rsquo; is an Array containing a lot of promises
  // &ndash;> returns a new promise that will be resolved
  // &ndash;> when all promises inside of results succeeded
  return Q.all(results);
}
```</p>

<p>This step does basically the same as the first step, but makes a lot of more requests. For each plugin a seperate request has to be made to fetch the plugin details. The function will be executed with an Array containing all information that was fetched in first call to get all grunt plugins.</p>

<p>This Array ( <code>list</code> ) will be transformed using the <code>map</code> function of <a href="http://lodash.com/">lo-dash</a>. Each item is replaced by a new deffered object which will be resolved, when the request for plugin information succeeded. Q provides the really nice function <code>Q.all</code> which gives us a lot of power to handle multiple requests.</p>

<p><code>Q.all</code> will return a new promise which will be resolved when all promises inside of the handed in Array will be resolved and enriched with detail information.</p>

<p>```javascript
// response of first call to CouchDB
var list = [ {
  key : [ &lsquo;something&rsquo;, &lsquo;pluginName1&rsquo; ]
}, {
  key : [ &lsquo;something&rsquo;, &lsquo;pluginName2&rsquo; ]
} ];</p>

<p>var allPluginsWithDetails = getPlugin( list );</p>

<p>// do something with plugins when they were
// enriched with detail information
allPluginsWithDetails.then( function( plugins ) {
  doSomething( plugins );
} );
```</p>

<p><strong>Sticking promises together</strong></p>

<p>Now, we have created a lot of promises, so let us have another look where we started with a more detailed look and lots of comments. ;)</p>

<p>```javascript
function fetchPluginList() {
  // return a promise
  return Q.fcall( function fetchPluginList() {</p>

<pre><code>// fetch all grunt plugins with help of a deferred object
var deferred = Q.defer();
var keyword = 'gruntplugin';
var url = 'http://isaacs.iriscouch.com/registry/_design/app/_view/byKeyword?startkey=[%22' +
  keyword + '%22]&amp;endkey=[%22' + keyword + '%22,{}]&amp;group_level=3';
// fetch all plugins
request(
  { url : url, json : true },
  function handlePluginList( error, response, body ) {
    if( !error &amp;&amp; response.statusCode === 200 ) {
      // resolve deferred with response
      deferred.resolve( body.rows );
    } else {
      deferred.reject( new Error( error ) );
    }
  }
);
return deferred.promise;
</code></pre>

<p>  } )
  // executed when the promise returned by &lsquo;fetchPluginList&rsquo; was resolved
  // argument &lsquo;list&rsquo; === &lsquo;body.rows&rsquo; in line 15
  .then( function getPlugin( list ) {</p>

<pre><code>// transform Array with data to Array with promises
var results = _.map( list, function( item ) {
  var deferred = Q.defer();
  var name = item.key[ 1 ];
  var url = 'http://isaacs.iriscouch.com/registry/' + name;
  // fetch plugin information
  request(
    { url : url, json : true },
    function handlePlugin( error, response, body ) {
      if( !error &amp;&amp; response.statusCode === 200 ) {
        // resolve deferred with response
        deferred.resolve( condensePlugin( body ) );
      } else {
        deferred.reject( new Error( error ) );
      }
    }
  );
  return deferred.promise;
} );
// return a promise that will be resolved
// when all promises inside of 'results' are resolved
return Q.all( results );
</code></pre>

<p>  })
  // executed when the promise returned by &lsquo;getPlugin was resolved&rsquo;
  // argument &lsquo;results&rsquo; is an Array which now consists of plugin data
  // with enriched plugin information
  .then( function getDownloads( results ) {</p>

<pre><code>// transform Array with data to Array with promises
var resultsWithDownloads = _.map( results, function( result ) {
  var deferred = Q.defer();

  var today = Date.today();
  var oneMonthAgo = today.clone().add( { months : -1 } );

  var startKey = JSON.stringify( [ result.name, oneMonthAgo.toYMD() ] );
  var endKey = JSON.stringify( [ result.name, today.toYMD() ] );

  var url = 'http://isaacs.iriscouch.com/downloads/_design/app/_view/pkg?startkey=' + startKey + '&amp;' + 'endkey=' + endKey;

  // fetch download information
  request(
    { url : url, json : true },
    function handlePlugin( error, response, body ) {
      if (!error &amp;&amp; response.statusCode === 200) {
        if ( body.rows &amp;&amp; body.rows.length ) {
          result.downloads = body.rows[ 0 ].value;
        } else {
          result.downloads = 'N/A';
        }

        // resolve deffered with enriched result
        deferred.resolve( result );
      } else {
        deferred.reject( new Error( error ) );
      }
    }
  );
  return deferred.promise;
});

// return a promise the will be resolved
// when all promises inside of 'results' are resolved
return Q.all( resultsWithDownloads );
</code></pre>

<p>  });
}</p>

<p>var plugins = fetchPluginList();</p>

<p>// working with result when all requests are down
// argument &lsquo;resultsWithDownloads&rsquo; is result of &lsquo;Q.all&rsquo; at line 89
plugins.then( function( resultsWithDownloads ) {
  doSomething( resultsWithDownloads );
} );
```</p>

<p><strong>Conclusion</strong></p>

<p>The <code>fetchPluginList</code> function looks first really heavy, but when you understood the principle ( looking at you <a href="https://twitter.com/TeixeiraPedro">@TeixeiraPedro</a> ;) ) the code has much more structure and is much easier to read. Especially lots of asynchronous operations that has to be in sync at some point loose complexity by using <code>Q.all</code>, which absolutely blew my mind.</p>

<p>For me it is clear, that I will structure next projects with lots of requests definitely promises based like the Grunt guys do to make my life easier.</p>

<p>And that is it. I hope you enjoyed it and thanks. :)</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[grunt-photobox - secure yourself against broken layout]]></title>
    <link href="http://4waisenkinder.github.io/blog/2013/07/26/grunt-photobox-secure-yourself-against-broken-layout/"/>
    <updated>2013-07-26T00:32:00+02:00</updated>
    <id>http://4waisenkinder.github.io/blog/2013/07/26/grunt-photobox-secure-yourself-against-broken-layout</id>
    <content type="html"><![CDATA[<p>Recently at work we ran into the issue, that we had a broken layout in production. Everybody knows that and sure everybody produced that already. Most of the time it is not a big deal, but it is an uncomfortable situation to get the message like &ldquo;Hey, the product detail page is broken.&rdquo;. We implemented <a href="http://gruntjs.com">grunt</a> a few weeks before and got the idea to make the check for broken layout a bit easier for us and the QA-Team than clicking through the whole site in different screen sizes.</p>

<!-- more -->


<p>And this is the result of it:</p>

<p><strong>grunt-photobox</strong></p>

<p><img class="left" src="/images/blog/stefanjudis/photoBox.png" width="420" height="300" title="&lsquo;grunt-photobox logo&rsquo; &lsquo;grunt-photobox logo&rsquo;" ></p>

<p>Woooohooooo!!! Let me explain how it works:</p>

<ul>
<li>set up url&rsquo;s, that are important for you</li>
<li>set up screensizes, that are important for you &ndash; think of responsive web design</li>
<li>set up a path to render the screenshots and an index.html</li>
</ul>


<p>After that <a href="http://phantomjs.org/">phantomjs</a> will visit the url&rsquo;s with given size and simply takes a picture of it. Nothing magically about it. ;)</p>

<p>So let&rsquo;s set it up:</p>

<p>I downloaded a nice &ldquo;mobile-first&rdquo; site from <a href="http://html5boilerplate.com">html5boilerplate</a> and implemented grunt. When you&rsquo;re ready to go, you have to install <code>grunt-photobox</code>.</p>

<p><code>bash
$ npm install --save-dev grunt-photobox
</code></p>

<p>Your <code>package.json</code> should include inside of the <code>devDependencies</code> photobox afterwards:</p>

<p>```js
{
  &ldquo;name&rdquo;: &ldquo;grunt-photobox-tutorial&rdquo;,
  &ldquo;version&rdquo;: &ldquo;0.1.0&rdquo;,
  &ldquo;dependencies&rdquo;: {},
  &ldquo;devDependencies&rdquo;: {</p>

<pre><code>"grunt": "~0.4.1",
"grunt-photobox": "~0.1.2"
</code></pre>

<p>  }
}
```</p>

<p>After that let&rsquo;s start to configure grunt-photobox. We have to set the url&rsquo;s &ndash; in this case it is just <code>http://localhost/grunt-photobox-tutorial/</code>, because it is a dummy site. But at least we can set different screensizes to check if something broke and if the mobile site really works in a nice responsive way.</p>

<p>Your <code>Gruntfile.js</code> should look like that:</p>

<p>```js
module.exports = function(grunt) {
  grunt.initConfig( {</p>

<pre><code>pkg: grunt.file.readJSON('package.json'),

photobox: {
  options: {
    // set needed url's
    urls: [ 'http://localhost/grunt-photobox-tutorial/' ],
    // set needed screensizes
    screenSizes: [ '400x800', '600x800', '1200x800' ]
  }
}
</code></pre>

<p>  } );</p>

<p>  // Load photobox plugin
  grunt.loadNpmTasks( &lsquo;grunt-photobox&rsquo; );</p>

<p>  // Default task(s).
  grunt.registerTask( &lsquo;default&rsquo;, [ &lsquo;photobox&rsquo; ] );
};</p>

<p>```</p>

<p><strong>And that&rsquo;s it.</strong></p>

<p>Now you can run <code>$ grunt</code>( we set photobox to default &ndash; if it&rsquo;s not default, run <code>$ grunt photobox</code>)</p>

<p><img class="left" src="/images/blog/stefanjudis/photoBoxOutput.png" width="596" height="180" title="&lsquo;output of photobox grunt command&rsquo; &lsquo;output of photobox grunt command&rsquo;" ></p>

<p>It will tell you, that a new <code>index.html</code> was created. Per default it is <code>photobox/</code>, but you can change that inside of the options, if you want to. When you run photobox for the first time, there is nothing to compare &ndash;  keep that in mind, when calling the photobox index for the first time. ;)</p>

<p>So let&rsquo;s break something and check if we can detect a broken layout with it. I commented out some css lines and ran photobox again. And here is the result:</p>

<p><img class="left" src="/images/blog/stefanjudis/photoBoxBroken.png" width="1120" height="750" title="&lsquo;broken layout&rsquo; &lsquo;broken layout&rsquo;" ></p>

<p><strong>YEEEEESSSSS</strong>. It is obvious, that something went wrong here with the size of 1200x800 and that we were able to notice that without clicking around and checking by ourselves. ;)</p>

<p>Inside of the generated index file you&rsquo;ve got the possibility, to check the old and new version in seperate images or to overlay both pictures. What you see here, is the &lsquo;overlay&rsquo; mode.</p>

<p>If you want to check out the output <code>index.html</code> of this example and play around with it &ndash; <a href="http://stefanjudis.github.io/grunt-photobox-tutorial/photobox">here it is</a>.</p>

<p>We will implement that at work soon. If you have any feedback or feature requests, please let me know and write me an <a href="mailto:stefanjudis@gmail.com">email</a> or ping on <a href="https://twitter.com/stefanjudis">Twitter</a>. It is still in early stage, though. I would really like to have some feedback on that, because I think, it can speed up the qa-process heavily.</p>

<p>THX.</p>

<p><a href="https://npmjs.org/package/grunt-photobox">grunt-photobox at NPM</a></p>

<p><a href="https://github.com/stefanjudis/grunt-photobox">grunt-photobox at Github</a></p>
]]></content>
  </entry>
  
</feed>
