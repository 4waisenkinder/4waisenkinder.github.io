<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: performance | 4waisenkinder]]></title>
  <link href="http://4waisenkinder.github.io/blog/categories/performance/atom.xml" rel="self"/>
  <link href="http://4waisenkinder.github.io/"/>
  <updated>2013-09-23T19:35:16+02:00</updated>
  <id>http://4waisenkinder.github.io/</id>
  <author>
    <name><![CDATA[Stefan Judis, Patrick Venetz, André Kussmann, Bernhard Weisshuhn]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Why you shouldn't use Backbone's built-in Array functions]]></title>
    <link href="http://4waisenkinder.github.io/blog/2013/08/13/why-you-should-not-use-backbone-collection-utility-functions/"/>
    <updated>2013-08-13T23:15:00+02:00</updated>
    <id>http://4waisenkinder.github.io/blog/2013/08/13/why-you-should-not-use-backbone-collection-utility-functions</id>
    <content type="html"><![CDATA[<p>Today I ran into an issue that let me dive into the Backbone.js library. Very often developers just use the stuff that is in there because it just works fine, but when it does not do what it is supposed to do the best way is to have a look into the used library and figure out what is going on.</p>

<p>My case was the following:</p>

<p>I had some lines for getting the index of a particular model stored inside of a Backbone collection.</p>

<!-- more -->


<p><code>js
var index = collection.indexOf( model );
</code></p>

<p>Not very complicated and it worked immediately. I did not really think about it. A colleague came around and pointed me into the direction, that the native Array function <em>indexOf</em> is only supported in IE9 and higher. I changed it to use the particular LoDash/Underscore utility function and it did not work anymore.</p>

<p><code>js
var index = _.indexOf( collection, model );
</code></p>

<p>So, what was going on? After thinking about it, the idea that a Backbone collection uses the native Array function <em>indexOf</em> does not even make sense. So where does it come from? I checked the code and noticed that Backbone collections implement the Array functions of LoDash/Underscore. I created a <a href="http://jsbin.com/apowiz/25/edit">JSBin</a> to try this principle myself.</p>

<p>```js
var ExampleObject = function( array ) {
   this.array = array;
};</p>

<p>// the methods we want to implement
// in our object
var utilityMethods = [ &lsquo;indexOf&rsquo;, &lsquo;filter&rsquo; ],</p>

<pre><code>slice          = [].slice;
</code></pre>

<p>// iterate over the wished methods
_.each( utilityMethods, function( method ) {
  ExampleObject.prototype[ method ] = function() {</p>

<pre><code>var args = slice.call( arguments );

args.unshift( this.array );

return _[ method ].apply( _, args );
</code></pre>

<p>  };
});</p>

<p>// create the new object
var example = new ExampleObject( [ 5, 4, 3, 2, 1 ] );</p>

<p>// proof that indexOf works
console.log( example.indexOf( 2 ) ); // output: 3</p>

<p>// proof that filter workds
console.log(
  example.filter( function( value ) {</p>

<pre><code>return value % 2;
</code></pre>

<p>  } )
); // output: [5, 3, 1]
```</p>

<p>Let us dive into the stuff that goes on inside of the each loop.</p>

<p><code>js
ExampleObject.prototype[ method ] = function() {};
</code></p>

<p>That is a basic pattern to extent the prototype of JavaScript object. In our case the prototype is <em>ExampleObject</em> and this way it has a method that is shared by every instance of <em>ExampleObject</em>.</p>

<p><code>js
var args = slice.call( arguments );
</code></p>

<p>This line was my first learning of digging into the Backbone codebase. Calling the Array function <em>slice</em> and passing in <em>arguments</em> is a common way to receive an Array out of the arguments object, which is available in every JavaScript function ( more information about that <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Functions_and_function_scope/arguments">here</a> ). My usual way to do that is <em>Array.prototype.slice( arguments )</em>. Backbone caches the slice function before using it for better performance ( which is proved <a href="http://jsperf.com/array-prototype-slice-call-vs-slice-call/7">here</a>). It is not huge difference, but when we can be faster, we should be faster. ;)</p>

<p><code>js
args.unshift( this.array );
</code></p>

<p>This line puts the actual array ( &ndash;> <em>this.array</em> ) to this start of this new generated &ldquo;arguments array&rdquo; to make it fit into the way LoDash/Underscore functions expect the handed in arguments to be.</p>

<p><code>js
return _[ method ].apply( _, args );
</code></p>

<p>And this is the final result. It is an actual call to the origin LoDash/Underscore function in the context of Underscore/LoDash. The context needs to be set to LoDash/Underscore itself, because we don&rsquo;t know, if the library calls other methods contained in itself. To sum up this line for example of <em>indexOf</em> is similar to:</p>

<p><code>js
example.indexOf( 2 );
// calls under the hood
_.indexOf( example.array, 2 );
</code></p>

<p>No magic. but a nice way to make the usability of your objects more convenient.</p>

<p>But there is also a bad part about that. I checked the performance of the origin utility methods and the integrated ones and there is really a huge difference ( check jsperf <a href="http://jsperf.com/integrated-utility-function-vs-utility-function-2">here</a> ). On my machine the new integrated functions are around 75% (!) percent slower ( tested in Firefox, Chrome and Opera ). 75% is really way too much for convenience.</p>

<p><img src="/images/blog/stefanjudis/utilityFunctions.png" width="970" height="387" title="&lsquo;result of jsperf&rsquo; &lsquo;result of jsperf&rsquo;" ></p>

<p>The reason for that difference is probably the needed context binding for the integrated utility functions to provide the LoDash/Underscore context inside of the function itself. But that is only guessing. ;)</p>

<p>No matter what, for me is clear that I will use the original utility functions instead of the integrated ones.</p>

<p>Thx for reading. Any ideas on that are really welcome. :)</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[See how your project performs at Travis CI]]></title>
    <link href="http://4waisenkinder.github.io/blog/2013/07/07/see-how-your-project-performs-at-travis-ci/"/>
    <updated>2013-07-07T14:50:00+02:00</updated>
    <id>http://4waisenkinder.github.io/blog/2013/07/07/see-how-your-project-performs-at-travis-ci</id>
    <content type="html"><![CDATA[<p>Many people run their test suite at Travis CI these days. At Travis you got the possibility to run your test suite against different programming languages and different versions of these ( e.g. node 0.8 / 0.9 / … ). Figuring out if there will be any problems or exceptions before switching to a new language version are easily done this way ( always assuming you are following the principles of test driven development ). <strong>Test your stuff at Travis first, then switch your server to the new version of language XY</strong>.</p>

<!-- more -->


<p>Tests that run in different languages are called &lsquo;jobs&rsquo; in travis context. You can define them in your .travis.yml.</p>

<p>```
language: node_js
  node_js:</p>

<pre><code>- "0.8"
- "0.9"
- "0.10"
</code></pre>

<p>```</p>

<p>Later on you can see this configuration inside of the so called build-matrix at <a href="http://travis-ci.org">Travis</a>.</p>

<p><img class="center" src="/images/blog/stefanjudis/buildMatrix.png" width="1225" height="184" title="&lsquo;build matrix cushion-cli&rsquo; &lsquo;build matrix for my project cushion-cli&rsquo;" ></p>

<p>Via Travalizit ( <a href="http://4waisenkinder.de/blog/2013/06/21/help-me-analyze-travis-build-data/">further explanation and introduction</a> ) you got the possibility to analyse your Travis build data. It is still in early stage, but I think you can already get some information, you did not know before. To have always the latest Travis information at Travalizit you only have to define a wekhook that sends the build data to Travalizit each time you finished a build ( checkout out explanation and introduction ).</p>

<p>Yesterday night I implemented a new chart to compare different builds with including jobs in term of state and duration. With the help of this chart you can easily check if a new language version will increase performance or not.</p>

<p>To check your project just go to <a href="http://travalizit.org">Travalizit</a>, add a new chart and choose type &ldquo;Travis job details&rdquo;.</p>

<p><img class="center" src="/images/blog/stefanjudis/jobDetails.png" width="603" height="377" title="&lsquo;add job details chart action&rsquo; &lsquo;push the button ;)&rsquo;" ></p>

<p>After that you will probably get a message, that your build data is not included in the Travalizit database ( there is the small chance that it is, because I tested a lot ). Right now you got the possibility to fetch the latest builds from Travis.</p>

<p><img class="center" src="/images/blog/stefanjudis/fetchData.png" width="867" height="655" title="&lsquo;fetch data action&rsquo; &lsquo;fetch data dialog if no build data is available&rsquo;" ></p>

<p>Press the &lsquo;fetch&rsquo; &ndash; button and you are done. This works only <strong>once</strong>, because the architecture is actual set up to receive recent build data via webhook. That means, if you want to come back and to see the latest builds, you have implement the hook. ;)</p>

<p>And that is the result:</p>

<p><img class="center" src="/images/blog/stefanjudis/jobDetailsChart.png" width="882" height="670" title="&lsquo;job details for cushion-cli&rsquo; &lsquo;Travis job details chart for cushion-cli&rsquo;" ></p>

<p>Right now you can check the duration and state ( passed / errored / failed ) of the different jobs. If you want to see more, let me know.</p>

<p>I would love to hear wishes, improvements and feedback. So, if it is not working for you and your project or you have something to say about that ping me on <a href="https://twitter.com/stefanjudis">Twitter</a>, write me an <a href="mailto:stefanjudis@gmail.com">email</a> or leave a comment.</p>

<p>THX.</p>

<p>PS. I started developing a <a href="https://npmjs.org/package/travalizit">Nodes.js Travis-Api</a> for this project. If someone is interested in that, give a sign. That keeps motivation high. ;)</p>
]]></content>
  </entry>
  
</feed>
