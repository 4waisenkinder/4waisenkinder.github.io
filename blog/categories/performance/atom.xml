<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: performance | 4waisenkinder]]></title>
  <link href="http://4waisenkinder.github.io/blog/categories/performance/atom.xml" rel="self"/>
  <link href="http://4waisenkinder.github.io/"/>
  <updated>2014-10-14T00:53:29+02:00</updated>
  <id>http://4waisenkinder.github.io/</id>
  <author>
    <name><![CDATA[Stefan Judis, Patrick Venetz, AndrÃ© Kussmann, Bernhard Weisshuhn]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[How to measure frontend performance with Grunt]]></title>
    <link href="http://4waisenkinder.github.io/blog/2013/12/22/how-to-measure-frontend-performance-with-phantomas-and-grunt/"/>
    <updated>2013-12-22T23:28:00+01:00</updated>
    <id>http://4waisenkinder.github.io/blog/2013/12/22/how-to-measure-frontend-performance-with-phantomas-and-grunt</id>
    <content type="html"><![CDATA[<p>When you are a frontend developer, you are on the constant journey to find the right tool to measure the performance of your site. Sure, there are the Developer Tools of your choice, <a href="https://developers.google.com/speed/pagespeed/">Google Pagespeed</a> or <a href="http://webpagetest.org">webpagespeed.org</a> available. And those tools are great (if you do not know them, you should definitely check them out), but for me it was always &ldquo;just&rdquo; nice to use these tools. They provide lots of useful information and I check them on a regular basis, but as far as I know, these tools do not provide a kind of timeline view of my daily work. They only give useful information to a given time &ndash; that is it. What I want to know, is how the site evolved after my latest deploy to production &hellip; <!-- more --></p>

<p>Did the size of CSS / JavaScript decrease or increase? How many Ajax requests are made on page load? How many DOM queries are executed? And how did my latest changes effect the overall performance of the site?</p>

<p>Sure, I could answer all these questions manually and could keep track of them in some way, but that is not in the nature of a developer, right? ;)</p>

<p>That is definitely a task that belongs to an automated process and should be done right after the deployment to production, so that I can check right away, what happened and how the production site changed.</p>

<p>Well, ( <strong>attention shameless self promotion</strong> ) &ndash; I wrote a <a href="http://gruntjs.com">Grunt</a> plugin called <a href="https://npmjs.org/package/grunt-phantomas">grunt-phantomas</a> to solve exactly that problem (preview of generated example results <a href="http://stefanjudis.github.io/grunt-phantomas/gruntjs/">here</a>).</p>

<p>Two weeks ago I discovered a NPM module called <a href="https://github.com/macbre/phantomas">Phantomas</a> and it absolutely blew my mind. It is a command line tool, which scans any site you like via <a href="http://phantomjs.org/">PhantomJS</a>. You can easily install it via <code>npm install -g phantomas</code> and after that, you are ready to go. To show how powerful this tool is, let us have a look at the by Phantomas given statistics of the <a href="http://gruntjs.com">Grunt site</a> as an example.</p>

<p>```
$ phantomas &mdash;url <a href="http://gruntjs.com">http://gruntjs.com</a></p>

<p>phantomas v0.9.0 metrics for <a href="http://gruntjs.com">http://gruntjs.com</a>:</p>

<ul>
<li>requests: 29</li>
<li>gzipRequests: 3</li>
<li>postRequests: 0</li>
<li>httpsRequests: 0</li>
<li>redirects: 0</li>
<li>notFound: 0</li>
<li>timeToFirstByte: 807</li>
<li>timeToLastByte: 833</li>
<li>bodySize: 179021</li>
<li>contentLength: 311187</li>
<li>ajaxRequests: 0</li>
<li>htmlCount: 1</li>
<li>htmlSize: 1151</li>
<li>cssCount: 2</li>
<li>cssSize: 1630</li>
<li>jsCount: 5</li>
<li>jsSize: 41272</li>
<li>jsonCount: 0</li>
<li>jsonSize: 0</li>
<li>imageCount: 21</li>
<li>imageSize: 134968</li>
<li>webfontCount: 0</li>
<li>webfontSize: 0</li>
<li>base64Count: 0</li>
<li>base64Size: 0</li>
<li>otherCount: 0</li>
<li>otherSize: 0</li>
<li>cacheHits: 3</li>
<li>cacheMisses: 0</li>
<li>cachingNotSpecified: 4</li>
<li>cachingTooShort: 2</li>
<li>cachingDisabled: 20</li>
<li>domains: 6</li>
<li>maxRequestsPerDomain: 21</li>
<li>medianRequestsPerDomain: 2</li>
<li>DOMqueries: 7</li>
<li>DOMqueriesById: 4</li>
<li>DOMqueriesByClassName: 0</li>
<li>DOMqueriesByTagName: 3</li>
<li>DOMqueriesByQuerySelectorAll: 0</li>
<li>DOMinserts: 4</li>
<li>DOMqueriesDuplicated: 2</li>
<li>eventsBound: 0</li>
<li>headersCount: 368</li>
<li>headersSentCount: 86</li>
<li>headersRecvCount: 282</li>
<li>headersSize: 12025</li>
<li>headersSentSize: 2989</li>
<li>headersRecvSize: 9036</li>
<li>documentWriteCalls: 1</li>
<li>evalCalls: 0</li>
<li>jQueryVersion:</li>
<li>jQueryOnDOMReadyFunctions: 0</li>
<li>jQuerySizzleCalls: 0</li>
<li>jsErrors: 0</li>
<li>assetsNotGzipped: 5</li>
<li>assetsWithQueryString: 4</li>
<li>smallImages: 3</li>
<li>multipleRequests: 0</li>
<li>timeToFirstCss: 878</li>
<li>timeToFirstJs: 1054</li>
<li>timeToFirstImage: 1860</li>
<li>onDOMReadyTime: 1339</li>
<li>onDOMReadyTimeEnd: 1340</li>
<li>windowOnLoadTime: 2386</li>
<li>windowOnLoadTimeEnd: 2387</li>
<li>httpTrafficCompleted: 3285</li>
<li>windowAlerts: 0</li>
<li>windowConfirms: 0</li>
<li>windowPrompts: 0</li>
<li>consoleMessages: 0</li>
<li>cookiesSent: 0</li>
<li>cookiesRecv: 354</li>
<li>domainsWithCookies: 1</li>
<li>documentCookiesLength: 193</li>
<li>documentCookiesCount: 4</li>
<li>bodyHTMLSize: 10809</li>
<li>iframesCount: 0</li>
<li>imagesWithoutDimensions: 16</li>
<li>commentsSize: 53</li>
<li>hiddenContentSize: 61</li>
<li>whiteSpacesSize: 4</li>
<li>DOMelementsCount: 197</li>
<li>DOMelementMaxDepth: 10</li>
<li>nodesWithInlineCSS: 0</li>
<li>globalVariables: 57</li>
<li>localStorageEntries: 0</li>
<li>smallestResponse: 35</li>
<li>biggestResponse: 29652</li>
<li>fastestResponse: 27</li>
<li>slowestResponse: 1057</li>
<li>medianResponse: 517</li>
</ul>


<p>First css received in 878 ms: <a href="http://fonts.googleapis.com/css?family=Lato:400,700">http://fonts.googleapis.com/css?family=Lato:400,700</a>
First js received in 1054 ms: <a href="http://gruntjs.com/js/vendor/lib/modernizr.min.js">http://gruntjs.com/js/vendor/lib/modernizr.min.js</a>
First image received in 1860 ms: <a href="http://gruntjs.com/img/grunt-logo.svg">http://gruntjs.com/img/grunt-logo.svg</a>
Requests per domain:
 gruntjs.com: 21 request(s)
 www.google-analytics.com: 2 request(s)
 static.adzerk.net: 2 request(s)
 engine.adzerk.net: 2 request(s)
 fonts.googleapis.com: 1 request(s)
 c.jslogger.com: 1 request(s)</p>

<p>Duplicated DOM queries (2):
 id &ldquo;#azk48893&rdquo;: 4 queries
 tag name &ldquo;script&rdquo;: 3 queries</p>

<p>JavaScript globals (57): JSLogger, Modernizr, <em>gaq, </em>gat, ados, adosResults, adosRun, ados_addInlinePlacement, ados_addPlacement, ados_addPlacementObject, ados_add_placement, ados_async_load, ados_execPassback, ados_findPassback, ados_frameLoaded, ados_load, ados_loadDiv, ados_loadFIframe, ados_loadInline, ados_loadPassback, ados_loadResults, ados_log, ados_passback, ados_passbackFilled, ados_passbackWritePixel, ados_passback_next, ados_passback_receiveMessage, ados_refresh, ados_setDomain, ados_setKeywordCookie, ados_setKeywords, ados_setNoTrack, ados_setWriteResults, ados_timeoutExpired, ados_writePixel, azHtmlLoad, azInitExtension, azLoad, azRegisterExtension, azScriptExtensionLoad, azScriptInlineLoad, azScriptSRCLoad, azk48893_html_98280, azk48893_html_command_17656, azk48893_pixel_64108, azk48893_pixel_command_60057, cssLinkLoad, cssLoad, d, gaGlobal, html5, jslogger, p, s, z, zItems, zshow</p>

<p>The smallest response (0.03 kB): <a href="http://www.google-analytics.com/__utm.gif?utmwv=5.4.6&amp;utms=1&amp;utmn=265814781&amp;utmhn=gruntjs.com&amp;utmcs=UTF-8&amp;utmsr=1920x1080&amp;utmvp=1024x1280&amp;utmsc=32-bit&amp;utmul=de-de&amp;utmje=0&amp;utmfl=-&amp;utmdt=Grunt%3A%20The%20JavaScript%20Task%20Runner&amp;utmhid=319494337&amp;utmr=-&amp;utmp=%2F&amp;utmht=1387753136010&amp;utmac=UA-34623937-1&amp;utmcc=__utma%3D221136078.1297690710.1387753136.1387753136.1387753136.1%3B%2B__utmz%3D221136078.1387753136.1.1.utmcsr%3D(direct)%7Cutmccn%3D(direct)%7Cutmcmd%3D(none)%3B&amp;utmu=q~">http://www.google-analytics.com/__utm.gif?utmwv=5.4.6&amp;utms=1&amp;utmn=265814781&amp;utmhn=gruntjs.com&amp;utmcs=UTF-8&amp;utmsr=1920x1080&amp;utmvp=1024x1280&amp;utmsc=32-bit&amp;utmul=de-de&amp;utmje=0&amp;utmfl=-&amp;utmdt=Grunt%3A%20The%20JavaScript%20Task%20Runner&amp;utmhid=319494337&amp;utmr=-&amp;utmp=%2F&amp;utmht=1387753136010&amp;utmac=UA-34623937-1&amp;utmcc=__utma%3D221136078.1297690710.1387753136.1387753136.1387753136.1%3B%2B__utmz%3D221136078.1387753136.1.1.utmcsr%3D(direct)%7Cutmccn%3D(direct)%7Cutmcmd%3D(none)%3B&amp;utmu=q~</a>
The biggest response (28.96 kB): <a href="http://gruntjs.com/img/grunt-logo.svg">http://gruntjs.com/img/grunt-logo.svg</a></p>

<p>The fastest response (27 ms): <a href="http://www.google-analytics.com/__utm.gif?utmwv=5.4.6&amp;utms=1&amp;utmn=265814781&amp;utmhn=gruntjs.com&amp;utmcs=UTF-8&amp;utmsr=1920x1080&amp;utmvp=1024x1280&amp;utmsc=32-bit&amp;utmul=de-de&amp;utmje=0&amp;utmfl=-&amp;utmdt=Grunt%3A%20The%20JavaScript%20Task%20Runner&amp;utmhid=319494337&amp;utmr=-&amp;utmp=%2F&amp;utmht=1387753136010&amp;utmac=UA-34623937-1&amp;utmcc=__utma%3D221136078.1297690710.1387753136.1387753136.1387753136.1%3B%2B__utmz%3D221136078.1387753136.1.1.utmcsr%3D(direct)%7Cutmccn%3D(direct)%7Cutmcmd%3D(none)%3B&amp;utmu=q~">http://www.google-analytics.com/__utm.gif?utmwv=5.4.6&amp;utms=1&amp;utmn=265814781&amp;utmhn=gruntjs.com&amp;utmcs=UTF-8&amp;utmsr=1920x1080&amp;utmvp=1024x1280&amp;utmsc=32-bit&amp;utmul=de-de&amp;utmje=0&amp;utmfl=-&amp;utmdt=Grunt%3A%20The%20JavaScript%20Task%20Runner&amp;utmhid=319494337&amp;utmr=-&amp;utmp=%2F&amp;utmht=1387753136010&amp;utmac=UA-34623937-1&amp;utmcc=__utma%3D221136078.1297690710.1387753136.1387753136.1387753136.1%3B%2B__utmz%3D221136078.1387753136.1.1.utmcsr%3D(direct)%7Cutmccn%3D(direct)%7Cutmcmd%3D(none)%3B&amp;utmu=q~</a>
The slowest response (1057 ms): <a href="http://gruntjs.com/img/logo-bitovi.jpg">http://gruntjs.com/img/logo-bitovi.jpg</a></p>

<p>Time spent on backend / frontend: 25% / 75%
```</p>

<p>When I saw these metrics for the first time I really had to dance for joy. They are by far the most powerful metrics I have seen. I thought about these metrics a bit more and descided that Phantomas is perfect for an automated process to keep track of all that after every deployment. Grunt is included in most of the projects I do, so it was not a big question how to create an automated task. That was the moment when <a href="https://npmjs.org/package/grunt-phantomas">grunt-phantomas</a> was born and that is what it looks like today:</p>

<p><img class="left" src="/images/blog/stefanjudis/grunt-phantomas.png" width="1892" height="676" title="&lsquo;Example stats of grunt-phantomas&rsquo; &lsquo;Example stats of grunt-phantomas&rsquo;" ></p>

<p>All you have to do is to integrate the plugin in your Grunt process and then you are ready to go. You just have to define a folder, where the generated <code>index.html</code> and needed files will take place, as well as the wished url to get metrics for. And then run it with <code>grunt phantomas</code>. Any more needed information can be found in the <a href="https://npmjs.org/package/grunt-phantomas">official documentation</a>.</p>

<p>Additional possible options are by now the following:</p>

<ul>
<li>number of runs &ndash;> Phantomas will be executed multiple times to make the data more reliable</li>
<li>raw phantomas arguments &ndash;> Phantomas has lots of options &ndash; it is for example possible to block external scripts, what can become extremely handy when you have to deal with lots of marketing stuff (check <a href="https://github.com/macbre/phantomas">Phantomas Docs</a> for more a complete list of options)</li>
</ul>


<p>We integrated it into our CI system in my company already, so that I can really check all that data right after deployment and I&rsquo;m really excited about that. In my opinion this can be an extremely valuable tool and any feedback on it is more than welcome.</p>

<p>And that is it. Thanks for reading and merry Christmas. :)</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Journey of discovery - the global 'window.performance' object]]></title>
    <link href="http://4waisenkinder.github.io/blog/2013/11/10/discovery-of-window-dot-performance-dot-timing/"/>
    <updated>2013-11-10T13:37:00+01:00</updated>
    <id>http://4waisenkinder.github.io/blog/2013/11/10/discovery-of-window-dot-performance-dot-timing</id>
    <content type="html"><![CDATA[<p>A few days ago I was attending the <a href="http://www.developer-conference.eu/">Developer Conference Hamburg</a>. Topics of the talks were nearly everything you could think of ( from Java to PHP to JavaScript and much more ). For me only frontend related talks were important and that was why I attended the talk of <a href="https://twitter.com/AloisReitbauer">Alois Reitbauer</a> with the title &ldquo;W3C Web Performance &ndash; A detailed overview&rdquo; ( slides of his talk can be found <a href="http://de.slideshare.net/AloisReitbauer/w3c-web-performance-a-detailed-overview">here</a> ).</p>

<p>And well, what should I say? He introduced the <code>window.performance</code> object to the audience and that absolutely blew my mind, <!-- more -->because there is really a lot of useful stuff in there and I did not know, that there was such an object available in the global window scope.</p>

<p>The performance object includes three additional objects, which provide information for different use cases:</p>

<ul>
<li>timing // instanceof PerformanceTiming &ndash;> true</li>
<li>navigation // instanceof PerformanceNavigation &ndash;> true</li>
<li>memory // instanceof MemoryInfo &ndash;> true</li>
</ul>


<p>I tend to check out the particular specification for something I discovered, so let us have a first look inside of <a href="https://dvcs.w3.org/hg/webperf/raw-file/tip/specs/NavigationTiming/Overview.html">the spec</a> for the Navigation Timing API, which is the base for the <code>window.performance.timing</code> and <code>window.performance.navigation</code> object.</p>

<p>It turned out, that the spec for <em>Navigation Timing</em> is work in progress. So please be careful, when dealing with stuff described in it. It may change in the future without a warning.</p>

<p>According to <a href="http://caniuse.com/#search=performance">caniuse.com</a> the Navigation Timing API is unfortunately not completely supported ( Safari is missing ), but it is definitely something to play around with. ;)</p>

<p>So let us check it out&hellip;</p>

<h3>Specification for <em>window.performance.timing</em> &ndash; &ldquo;<a href="https://dvcs.w3.org/hg/webperf/raw-file/tip/specs/NavigationTiming/Overview.html#sec-navigation-timing-interface">interface PerformanceTiming</a>&rdquo;</h3>

<h4>&ndash;> getting general performance information of current document</h4>

<p>Quote from the <em>Navigation Timing</em> specification:</p>

<blockquote><p>To address the need for complete information on user experience, this document introduces the PerformanceTiming interfaces. This interface allows JavaScript mechanisms to provide complete client-side latency measurements within applications. [&hellip;] This specification introduces an interface that provides Web applications with timing-related information.</p></blockquote>

<p>For me that sounds really awesome. Accessing timing information of the current document via JavaScript can be become really useful for any optimization of your site. Especially when you are dealing with the goal of presenting your site / your web application to your customers in less than 1000ms every metric you can get, can help you succeed and compare current and improved versions.</p>

<p>Got curious? Let us check it out! :)</p>

<p><img class="center" src="/images/blog/stefanjudis/window-performance-timing.png" width="604" height="375" title="&lsquo;window.performance.timing object&rsquo; &lsquo;window.performance.timing object&rsquo;" ></p>

<p>As you can see <code>window.performance.timing</code> includes a bunch of data that is predefined by the <code>interface PerformanceTiming</code>. The W3C provides inside of the spec itself a nice graphic to figure out, what these values stand for.</p>

<p><img class="center <a" src="href="https://dvcs.w3.org/hg/webperf/raw-file/tip/specs/NavigationTiming/timing-overview.png">https://dvcs.w3.org/hg/webperf/raw-file/tip/specs/NavigationTiming/timing-overview.png</a>" width="911" height="555" title="&lsquo;window.performance.timing metrics&rsquo; &lsquo;window.performance.timing metrics&rsquo;" ></p>

<h4>Example usage of data included in <em>window.performance.timing</em></h4>

<p>Let us start simple and try to figure out how long a document needs to load.</p>

<p>```javascript
// cache it for shorter lines
var timing = window.performance.timing;</p>

<p>// actual calculation
var loadingTime = timing.loadEventEnd &ndash; timing.navigationStart;
```</p>

<p>No magic in there. You may say now &ldquo;<em>Well I can get this information inside of the DevTools</em>&rdquo; and well&hellip; that is true. But the nice thing of that is, that you are able to access this information easily and you could ( or rather should? ) log it to get a better idea of the actual performance and user experience of your visitors in their browsers.</p>

<p>To show a bit more interesting information than <code>loadingTime</code> and to make the usage of this a bit clearer I created a little snippet ( can be found <a href="https://gist.github.com/stefanjudis/7399022">here</a> ), which you can <a href="https://developers.google.com/chrome-developer-tools/docs/authoring-development-workflow#snippets">save inside of your Chrome DevTools</a>. With the usage of that we can easily display the main document metrics, when dealing with performance, without even touching the Network panel inside of the DevTools.</p>

<p><img class="center" src="/images/blog/stefanjudis/consoleMetrics.png" width="533" height="204" title="&lsquo;document performance metrics shown in console&rsquo; &lsquo;document performance metrics shown in console&rsquo;" ></p>

<h3>Specification for <em>window.performance.navigation</em> &ndash; &ldquo;<a href="https://dvcs.w3.org/hg/webperf/raw-file/tip/specs/NavigationTiming/Overview.html#sec-navigation-info-interface">interface PerformanceNavigation</a>&rdquo;</h3>

<h4>&ndash;> getting information of navigation context</h4>

<p>According to the <a href="https://dvcs.w3.org/hg/webperf/raw-file/tip/specs/NavigationTiming/Overview.html#performancenavigation">specification</a> the object <code>window.performance.navigation</code> only has to include two values, which give you information about the &ldquo;<em>last non-redirect navigation in the current browsing context</em>&rdquo;. Maybe you are thinking &ldquo;<em>I do not get it</em>&rdquo; like I did one hour ago, but it is not really complicated as well.</p>

<p>Let us have a look at an example:</p>

<p>```javascript
// enter a site directly by entering
// the particular URL
console.log( window.performance.navigation.type ) // &lsquo;0&rsquo;</p>

<p>// reload the page
console.log( window.performance.navigation.type ) // &lsquo;1&rsquo;</p>

<p>// go back in the history and come
// back by going &lsquo;forward&rsquo; in history
console.log( window.performance.navigation.type ) // &lsquo;2&rsquo;
```</p>

<p>To sum up the possibilities of the <code>type</code> attribute, it can have the following values:</p>

<ul>
<li>0 &ndash; site was directly entered</li>
<li>1 &ndash; site was reloaded</li>
<li>2 &ndash; site was entered via history</li>
<li>255 &ndash; none of the first three options matches</li>
</ul>


<p>Additionally the object includes <code>redirectCount</code>, which will give you unfortunatelly only &ldquo;nearly&rdquo; the information you would expect. It will only count redirects from the same origin. That means if you want to check if there was a redirect via a URL shortener for example, <code>redirectCount</code> will still return <code>0</code>. I can not say, what is the exact reason for that decision, but it is defined in the spec this way. For redirects on your site it just works fine. ;)</p>

<h3><em>window.performance.memory</em> &ndash; unfortunately no spec found</h3>

<h4>&ndash;> getting general information of JavsScript memory usage</h4>

<p>Unfortunately I was not able to find any specification for this included object ( maybe you can ping <a href="https://twitter.com/stefanjudis">me</a> and point me into the correct direction &ndash; I really would like to read it ). Googling for &lsquo;interface MemoryInfo&rsquo; or &lsquo;jsHeapSizeLimit spec&rsquo; unfortunately did not give me any useful information.</p>

<p>But anyway&hellip; I have not played around with memory profiling of JavaScript yet, but information about the current document can be found there &ndash; only wanted to mention it because it is included. ;)</p>

<p>Example of the <code>window.performance.memory</code> object:</p>

<p><code>javascript
console.log( window.performance.memory );
// will log :
// {
//   jsHeapSizeLimit : 793000000,
//   usedJSHeapSize  : 60300000,
//   totalJSHeapSize : 97400000
// }
</code></p>

<h3>Specification for <em>window.performance</em> &ndash; &ldquo;<a href="http://www.w3.org/TR/performance-timeline/#sec-window.performance-attribute">interface Performance</a>&rdquo;</h3>

<h4>&ndash;> getting detailed information of in document included ressources</h4>

<p>By using the in <code>window.performance</code> included objects ( timing, navigation, memory ) it is easily possible to receive information of the current document. That can be really helpful to figure out if the particular document has any performance problems. If you want to dive into that in more detail, you probably need a bit more information:</p>

<ul>
<li>why needs the document so much time to finish loading?</li>
<li>which ressource takes the most of the loading time?</li>
<li>can I avoid loading problematic ressource at initial load?</li>
</ul>


<p>The <a href="http://www.w3.org/TR/performance-timeline/">spec</a> for the <em>Performance Timeline</em> describes the <code>interface Performance</code> to have the following functions, which help to figure out exactly, where performance problems can have their origin:</p>

<ul>
<li>getEntries()</li>
<li>getEntriesByType( DOMString entryType )</li>
<li>getEntriesByName( DOMString name, optional DOMString entryType )</li>
</ul>


<p>So let us check it out.</p>

<p><code>getEntries</code> is defined to return a <code>PerformanceEntryList</code>. A <code>PerformanceEntry</code> has to have the following values:</p>

<ul>
<li>name</li>
<li>entryType</li>
<li>startTime</li>
<li>duration</li>
</ul>


<p>That looks pretty handy for me. I created another JavaScript snippet ( can be found <a href="https://gist.github.com/stefanjudis/7399022">here</a> ) to make usage of that. The script fetches all entries by calling <code>getEntries</code> and sorts all the entries by the amount of duration beginning by the entry with the highest duration. The output for example for <a href="http://google.com">google.com</a> looks like that:</p>

<p><img class="center" src="/images/blog/stefanjudis/detailedMetrics.png" width="1091" height="305" title="&lsquo;Sorted PerformanceEntries of google.com&rsquo; &lsquo;Sorted PerformanceEntries of google.com&rsquo;" ></p>

<p>Especially this data can be extremely useful, when dealing with performance bottlenecks. Additionally there is to say, that all the entries have much more included information than the particular interface describes. It is definitely worth a look, if you want to dive deeper into this topic.</p>

<p>Data included in one <code>PerformanceEntry</code>:</p>

<p><code>javascript
console.log( window.performance.getEntries() );
// will log :
// [
//   {
//     connectEnd: 0
//     connectStart: 0
//     domainLookupEnd: 0
//     domainLookupStart: 0
//     duration: 501.9820000161417
//     entryType: "resource"
//     fetchStart: 437.753000005614
//     initiatorType: "script"
//     name: "http://use.typekit.net/axj3cfp.js"
//     redirectEnd: 0
//     redirectStart: 0
//     requestStart: 0
//     responseEnd: 939.7350000217557
//     responseStart: 0
//     secureConnectionStart: 0
//     startTime: 437.753000005614
//   },
//   // much more items
// ]
</code>
I did not check the other to functions, because <code>getEntries</code> totally fits my needs right now, but if you have any good use cases for them, I would really like to know them.</p>

<h3>Sum up &ndash; <em>window.performance</em> FTW</h3>

<p><code>window.performance</code> includes a lot of useful information for creating a good user experience by focussing on performance ( remember &ldquo;Performance is a feature?&rdquo; ). Especially the information about the document in general and particular ressources can become really handy. For me it is clear, that I will use it a lot in the future to get a nice overview of what is really going on the sites I am responsible for.</p>

<p>I hope you will start playing around with it as well and that is it for today. Thx for reading and I hope you enjoyed it. ;)</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Why you shouldn't use Backbone's built-in Array functions]]></title>
    <link href="http://4waisenkinder.github.io/blog/2013/08/13/why-you-should-not-use-backbone-collection-utility-functions/"/>
    <updated>2013-08-13T23:15:00+02:00</updated>
    <id>http://4waisenkinder.github.io/blog/2013/08/13/why-you-should-not-use-backbone-collection-utility-functions</id>
    <content type="html"><![CDATA[<p>Today I ran into an issue that let me dive into the Backbone.js library. Very often developers just use the stuff that is in there because it just works fine, but when it does not do what it is supposed to do the best way is to have a look into the used library and figure out what is going on.</p>

<p>My case was the following:</p>

<p>I had some lines for getting the index of a particular model stored inside of a Backbone collection.</p>

<!-- more -->


<p><code>js
var index = collection.indexOf( model );
</code></p>

<p>Not very complicated and it worked immediately. I did not really think about it. A colleague came around and pointed me into the direction, that the native Array function <em>indexOf</em> is only supported in IE9 and higher. I changed it to use the particular LoDash/Underscore utility function and it did not work anymore.</p>

<p><code>js
var index = _.indexOf( collection, model );
</code></p>

<p>So, what was going on? After thinking about it, the idea that a Backbone collection uses the native Array function <em>indexOf</em> does not even make sense. So where does it come from? I checked the code and noticed that Backbone collections implement the Array functions of LoDash/Underscore. I created a <a href="http://jsbin.com/apowiz/25/edit">JSBin</a> to try this principle myself.</p>

<p>```js
var ExampleObject = function( array ) {
   this.array = array;
};</p>

<p>// the methods we want to implement
// in our object
var utilityMethods = [ &lsquo;indexOf&rsquo;, &lsquo;filter&rsquo; ],</p>

<pre><code>slice          = [].slice;
</code></pre>

<p>// iterate over the wished methods
_.each( utilityMethods, function( method ) {
  ExampleObject.prototype[ method ] = function() {</p>

<pre><code>var args = slice.call( arguments );

args.unshift( this.array );

return _[ method ].apply( _, args );
</code></pre>

<p>  };
});</p>

<p>// create the new object
var example = new ExampleObject( [ 5, 4, 3, 2, 1 ] );</p>

<p>// proof that indexOf works
console.log( example.indexOf( 2 ) ); // output: 3</p>

<p>// proof that filter workds
console.log(
  example.filter( function( value ) {</p>

<pre><code>return value % 2;
</code></pre>

<p>  } )
); // output: [5, 3, 1]
```</p>

<p>Let us dive into the stuff that goes on inside of the each loop.</p>

<p><code>js
ExampleObject.prototype[ method ] = function() {};
</code></p>

<p>That is a basic pattern to extent the prototype of JavaScript object. In our case the prototype is <em>ExampleObject</em> and this way it has a method that is shared by every instance of <em>ExampleObject</em>.</p>

<p><code>js
var args = slice.call( arguments );
</code></p>

<p>This line was my first learning of digging into the Backbone codebase. Calling the Array function <em>slice</em> and passing in <em>arguments</em> is a common way to receive an Array out of the arguments object, which is available in every JavaScript function ( more information about that <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Functions_and_function_scope/arguments">here</a> ). My usual way to do that is <em>Array.prototype.slice( arguments )</em>. Backbone caches the slice function before using it for better performance ( which is proved <a href="http://jsperf.com/array-prototype-slice-call-vs-slice-call/7">here</a>). It is not huge difference, but when we can be faster, we should be faster. ;)</p>

<p><code>js
args.unshift( this.array );
</code></p>

<p>This line puts the actual array ( &ndash;> <em>this.array</em> ) to this start of this new generated &ldquo;arguments array&rdquo; to make it fit into the way LoDash/Underscore functions expect the handed in arguments to be.</p>

<p><code>js
return _[ method ].apply( _, args );
</code></p>

<p>And this is the final result. It is an actual call to the origin LoDash/Underscore function in the context of Underscore/LoDash. The context needs to be set to LoDash/Underscore itself, because we don&rsquo;t know, if the library calls other methods contained in itself. To sum up this line for example of <em>indexOf</em> is similar to:</p>

<p><code>js
example.indexOf( 2 );
// calls under the hood
_.indexOf( example.array, 2 );
</code></p>

<p>No magic. but a nice way to make the usability of your objects more convenient.</p>

<p>But there is also a bad part about that. I checked the performance of the origin utility methods and the integrated ones and there is really a huge difference ( check jsperf <a href="http://jsperf.com/integrated-utility-function-vs-utility-function-2">here</a> ). On my machine the new integrated functions are around 75% (!) percent slower ( tested in Firefox, Chrome and Opera ). 75% is really way too much for convenience.</p>

<p><img src="/images/blog/stefanjudis/utilityFunctions.png" width="970" height="387" title="&lsquo;result of jsperf&rsquo; &lsquo;result of jsperf&rsquo;" ></p>

<p>The reason for that difference is probably the needed context binding for the integrated utility functions to provide the LoDash/Underscore context inside of the function itself. But that is only guessing. ;)</p>

<p>No matter what, for me is clear that I will use the original utility functions instead of the integrated ones.</p>

<p>Thx for reading. Any ideas on that are really welcome. :)</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[See how your project performs at Travis CI]]></title>
    <link href="http://4waisenkinder.github.io/blog/2013/07/07/see-how-your-project-performs-at-travis-ci/"/>
    <updated>2013-07-07T14:50:00+02:00</updated>
    <id>http://4waisenkinder.github.io/blog/2013/07/07/see-how-your-project-performs-at-travis-ci</id>
    <content type="html"><![CDATA[<p>Many people run their test suite at Travis CI these days. At Travis you got the possibility to run your test suite against different programming languages and different versions of these ( e.g. node 0.8 / 0.9 / â¦ ). Figuring out if there will be any problems or exceptions before switching to a new language version are easily done this way ( always assuming you are following the principles of test driven development ). <strong>Test your stuff at Travis first, then switch your server to the new version of language XY</strong>.</p>

<!-- more -->


<p>Tests that run in different languages are called &lsquo;jobs&rsquo; in travis context. You can define them in your .travis.yml.</p>

<p>```
language: node_js
  node_js:</p>

<pre><code>- "0.8"
- "0.9"
- "0.10"
</code></pre>

<p>```</p>

<p>Later on you can see this configuration inside of the so called build-matrix at <a href="http://travis-ci.org">Travis</a>.</p>

<p><img class="center" src="/images/blog/stefanjudis/buildMatrix.png" width="1225" height="184" title="&lsquo;build matrix cushion-cli&rsquo; &lsquo;build matrix for my project cushion-cli&rsquo;" ></p>

<p>Via Travalizit ( <a href="http://4waisenkinder.de/blog/2013/06/21/help-me-analyze-travis-build-data/">further explanation and introduction</a> ) you got the possibility to analyse your Travis build data. It is still in early stage, but I think you can already get some information, you did not know before. To have always the latest Travis information at Travalizit you only have to define a wekhook that sends the build data to Travalizit each time you finished a build ( checkout out explanation and introduction ).</p>

<p>Yesterday night I implemented a new chart to compare different builds with including jobs in term of state and duration. With the help of this chart you can easily check if a new language version will increase performance or not.</p>

<p>To check your project just go to <a href="http://travalizit.org">Travalizit</a>, add a new chart and choose type &ldquo;Travis job details&rdquo;.</p>

<p><img class="center" src="/images/blog/stefanjudis/jobDetails.png" width="603" height="377" title="&lsquo;add job details chart action&rsquo; &lsquo;push the button ;)&rsquo;" ></p>

<p>After that you will probably get a message, that your build data is not included in the Travalizit database ( there is the small chance that it is, because I tested a lot ). Right now you got the possibility to fetch the latest builds from Travis.</p>

<p><img class="center" src="/images/blog/stefanjudis/fetchData.png" width="867" height="655" title="&lsquo;fetch data action&rsquo; &lsquo;fetch data dialog if no build data is available&rsquo;" ></p>

<p>Press the &lsquo;fetch&rsquo; &ndash; button and you are done. This works only <strong>once</strong>, because the architecture is actual set up to receive recent build data via webhook. That means, if you want to come back and to see the latest builds, you have implement the hook. ;)</p>

<p>And that is the result:</p>

<p><img class="center" src="/images/blog/stefanjudis/jobDetailsChart.png" width="882" height="670" title="&lsquo;job details for cushion-cli&rsquo; &lsquo;Travis job details chart for cushion-cli&rsquo;" ></p>

<p>Right now you can check the duration and state ( passed / errored / failed ) of the different jobs. If you want to see more, let me know.</p>

<p>I would love to hear wishes, improvements and feedback. So, if it is not working for you and your project or you have something to say about that ping me on <a href="https://twitter.com/stefanjudis">Twitter</a>, write me an <a href="mailto:stefanjudis@gmail.com">email</a> or leave a comment.</p>

<p>THX.</p>

<p>PS. I started developing a <a href="https://npmjs.org/package/travalizit">Nodes.js Travis-Api</a> for this project. If someone is interested in that, give a sign. That keeps motivation high. ;)</p>
]]></content>
  </entry>
  
</feed>
