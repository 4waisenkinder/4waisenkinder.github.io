<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: foundation | 4waisenkinder]]></title>
  <link href="http://4waisenkinder.github.io/blog/categories/foundation/atom.xml" rel="self"/>
  <link href="http://4waisenkinder.github.io/"/>
  <updated>2014-10-19T00:20:08+02:00</updated>
  <id>http://4waisenkinder.github.io/</id>
  <author>
    <name><![CDATA[Stefan Judis, Patrick Venetz, AndrÃ© Kussmann, Bernhard Weisshuhn]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Import once in Sass the 'Foundation way']]></title>
    <link href="http://4waisenkinder.github.io/blog/2014/03/06/import-once-in-sass-the-foundation-way/"/>
    <updated>2014-03-06T22:52:00+01:00</updated>
    <id>http://4waisenkinder.github.io/blog/2014/03/06/import-once-in-sass-the-foundation-way</id>
    <content type="html"><![CDATA[<p>Currently I am working on a huge so called &ldquo;redesign&rdquo;, which means to make a big e-commerce plattform responsive. But it is not only about fiddling a few media queries into some existant CSS. For me that is the perfect opportunity to clean up everything and build up a nice and modular CSS architecture. Each component separated into its own file. Margins, paddings, widths, colors, etc. controlled by a main config file. Maintainable and easy to work with. The tech stack is quite modern, so that I had the perfect basement to do fancy stuff.<!-- more --></p>

<p>I decided to include the <a href="http://foundation.zurb.com/">Foundation front-end framework</a> into our stack and started playing around with it. No matter, if you want to use all their styles or just a few components (the <code>block-grid</code> is awesome by the way) the source code is really worth a look. It is highly configurable and easily to integrate next to your own components.</p>

<p>Any complex system consists of tons of little components. When starting to model them in a CSS architecture multiple dependencies come up rather quickly. <a href="https://twitter.com/brad_frost">Brad Frost</a> describes this principle really good in his article <a href="http://bradfrostweb.com/blog/post/atomic-web-design/">Atomic Design</a>. Basically it&rsquo;s really simple.</p>

<p>Let us say you build up a button, which is an in itself closed unit. Nice! After that you start building up widgets, that need the styles of that particular button. No problem &ndash; you can easily <code>import</code> it via the already included Sass function. But unfortunately it now becomes tricky, when you start developing your next wigdet, that also depends on your shiny button.</p>

<p>Here is some example code.</p>

<p>File : <em>components/buttons/_fancyButton.scss</em>
```css
.fancyButton {
  color : blue;
}</p>

<p>```</p>

<p>File : <em>components/_widgetA.scss</em>
<code>css
@import
  "components/buttons/fancyButton";
</code></p>

<p>File : <em>components/_widgetB.scss</em>
<code>css
@import
  "components/buttons/fancyButton";
</code></p>

<p>File : <em>styles.scss</em>
<code>css
@import
  "components/widgetA",
  "components/widgetB";
</code></p>

<p>Generated file : <em>styles.css</em>
```css
.fancyButton {
  color: blue; }</p>

<p>.fancyButton {
  color: blue; }</p>

<p>```</p>

<p>Sass will now include the same file twice and you end up with a doubled set of CSS rules in your generated Stylesheet. The more components you have, the worse it gets. Talking about this problem my friend <a href="https://google.com/+TomaszStryjewski">Tomasz</a> pointed me to the direction of a <a href="https://github.com/zurb/foundation/blob/master/scss/foundation/_functions.scss#L8">Foundation mixin</a> solving exactly this use case.</p>

<p>```css
// IMPORT ONCE
// We use this to prevent styles from being loaded multiple times for compenents that rely on other components.
$modules: () !default;
@mixin exports($name) {
  // check if code with name is already stored inside of $modules
  @if (index($modules, $name) == false) {</p>

<pre><code>// if not push it into the list
$modules: append($modules, $name);
// include code that particular code
@content;
</code></pre>

<p>  }
}
```</p>

<p>The logic included here is not magically, but it shows a few really nice features of Sass, which I for example do not use on a daily basis. The first thing to notice is the assignment of a so called <code>List</code> with the variable named <code>$modules</code>. <a href="http://sass-lang.com/documentation/file.SASS_REFERENCE.html#lists">Lists in Sass</a> behave kind of like an Array with String values and are defined as follows:</p>

<blockquote><p>Lists are just a series of other values, separated by either spaces or commas.</p></blockquote>

<p>It is assigned with the <code>!default</code> flag to not overwrite an already existing <code>$modules</code> variable, which could easily happen, by importing the particular file twice.</p>

<p><strong>Side note</strong> : <em>Variables with null values are treated as unassigned by !default</em> and will be overwritten.</p>

<p>After that a <a href="http://sass-lang.com/documentation/file.SASS_REFERENCE.html#defining_a_mixin">mixin</a> with the name <code>exports</code> is defined. If you do not know mixins, they are according to Sass documentation defined as follows:</p>

<blockquote><p>Mixins allow you to define styles that can be re-used throughout the stylesheet without needing to resort to non-semantic classes like .float-left. Mixins can also contain full CSS rules, and anything else allowed elsewhere in a Sass document. They can even take arguments which allows you to produce a wide variety of styles with very few mixins.</p></blockquote>

<p>This mixin now accepts one argument which represents the actual name of the component. It is used to &ldquo;register&rdquo; new code.
First of all it checks if there was already a component (or whatever valid Sass code you like) with the same name included in <code>$modules</code>using the <a href="http://sass-lang.com/documentation/Sass/Script/Functions.html#index-instance_method">index</a> function provided by Sass lists.</p>

<p><strong>Side note</strong> : <code>index</code> either returns the index of the value or <code>false</code>.</p>

<p>If the name of the snippet is not included inside of the list it includes the particalar code and <a href="http://sass-lang.com/documentation/Sass/Script/Functions.html#append-instance_method">appends</a> a new value to <code>$modules</code>.
If the name is already inside of the <code>$modules</code> list it just ignores it and prevents including the same code multiple times by just doing nothing and going on.</p>

<p>The rebuilt version using this mixin looks then as follows.</p>

<p>File : <em>helpers/_functions.scss</em>
```css
$modules: () !default;
@mixin exports($name) {
  @if (index($modules, $name) == false) {</p>

<pre><code>$modules: append($modules, $name) !global;
@content;
</code></pre>

<p>  }
}
<code>
File : *components/buttons/_fancyButton.scss*
</code>css
@include exports(&ldquo;fancyButton&rdquo;) {
  .fancyButton {</p>

<pre><code>color : blue;
</code></pre>

<p>  }
}
<code>
File : *components/_widgetA.scss*
</code>css
@import
  &ldquo;./buttons/fancyButton&rdquo;;
<code>
File : *components/_widgetB.scss*
</code>css
@import
  &ldquo;./buttons/fancyButton&rdquo;;
<code>
File : *styles.scss*
</code>css
@import
  &ldquo;helpers/functions&rdquo;,
  &ldquo;components/widgetA&rdquo;,
  &ldquo;components/widgetB&rdquo;;
<code>
Generated file : *styles.css*
</code>css
.fancyButton {
  color: blue;
}
```</p>

<p>Problem solved. :)
I generally do not use Sass for logical mixins or similar, but this shows perfectly what is possible. I definitely have to dig deeper into that. ;)</p>

<p>In my case of the &ldquo;redesign&rdquo; I wrapped all my components using this mixin and it works pretty well with ~30 components included in different stylesheets. Maybe that will help someone dealing with a lot of components. ;)</p>

<p>So that is it and thanks for reading.</p>
]]></content>
  </entry>
  
</feed>
